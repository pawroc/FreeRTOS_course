
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006edc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  0800707c  0800707c  0001707c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007250  08007250  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007250  08007250  00017250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007258  08007258  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007258  08007258  00017258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800725c  0800725c  0001725c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007260  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000144a4  20000078  080072d8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001451c  080072d8  0002451c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a50f  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000364d  00000000  00000000  0003a5b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b0  00000000  00000000  0003dc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001218  00000000  00000000  0003efb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019cd1  00000000  00000000  000401d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015647  00000000  00000000  00059ea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c002  00000000  00000000  0006f4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010b4ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000584c  00000000  00000000  0010b540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007064 	.word	0x08007064

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08007064 	.word	0x08007064

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20014464 	.word	0x20014464

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b96e 	b.w	8000568 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	4604      	mov	r4, r0
 80002ac:	468c      	mov	ip, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	f040 8083 	bne.w	80003ba <__udivmoddi4+0x116>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	4617      	mov	r7, r2
 80002b8:	d947      	bls.n	800034a <__udivmoddi4+0xa6>
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	b142      	cbz	r2, 80002d2 <__udivmoddi4+0x2e>
 80002c0:	f1c2 0020 	rsb	r0, r2, #32
 80002c4:	fa24 f000 	lsr.w	r0, r4, r0
 80002c8:	4091      	lsls	r1, r2
 80002ca:	4097      	lsls	r7, r2
 80002cc:	ea40 0c01 	orr.w	ip, r0, r1
 80002d0:	4094      	lsls	r4, r2
 80002d2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d6:	0c23      	lsrs	r3, r4, #16
 80002d8:	fbbc f6f8 	udiv	r6, ip, r8
 80002dc:	fa1f fe87 	uxth.w	lr, r7
 80002e0:	fb08 c116 	mls	r1, r8, r6, ip
 80002e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e8:	fb06 f10e 	mul.w	r1, r6, lr
 80002ec:	4299      	cmp	r1, r3
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x60>
 80002f0:	18fb      	adds	r3, r7, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 8119 	bcs.w	800052c <__udivmoddi4+0x288>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 8116 	bls.w	800052c <__udivmoddi4+0x288>
 8000300:	3e02      	subs	r6, #2
 8000302:	443b      	add	r3, r7
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 fe0e 	mul.w	lr, r0, lr
 8000318:	45a6      	cmp	lr, r4
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x8c>
 800031c:	193c      	adds	r4, r7, r4
 800031e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000322:	f080 8105 	bcs.w	8000530 <__udivmoddi4+0x28c>
 8000326:	45a6      	cmp	lr, r4
 8000328:	f240 8102 	bls.w	8000530 <__udivmoddi4+0x28c>
 800032c:	3802      	subs	r0, #2
 800032e:	443c      	add	r4, r7
 8000330:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000334:	eba4 040e 	sub.w	r4, r4, lr
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa0>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xaa>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	2a00      	cmp	r2, #0
 8000354:	d150      	bne.n	80003f8 <__udivmoddi4+0x154>
 8000356:	1bcb      	subs	r3, r1, r7
 8000358:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035c:	fa1f f887 	uxth.w	r8, r7
 8000360:	2601      	movs	r6, #1
 8000362:	fbb3 fcfe 	udiv	ip, r3, lr
 8000366:	0c21      	lsrs	r1, r4, #16
 8000368:	fb0e 331c 	mls	r3, lr, ip, r3
 800036c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000370:	fb08 f30c 	mul.w	r3, r8, ip
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xe4>
 8000378:	1879      	adds	r1, r7, r1
 800037a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0xe2>
 8000380:	428b      	cmp	r3, r1
 8000382:	f200 80e9 	bhi.w	8000558 <__udivmoddi4+0x2b4>
 8000386:	4684      	mov	ip, r0
 8000388:	1ac9      	subs	r1, r1, r3
 800038a:	b2a3      	uxth	r3, r4
 800038c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000390:	fb0e 1110 	mls	r1, lr, r0, r1
 8000394:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000398:	fb08 f800 	mul.w	r8, r8, r0
 800039c:	45a0      	cmp	r8, r4
 800039e:	d907      	bls.n	80003b0 <__udivmoddi4+0x10c>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x10a>
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	f200 80d9 	bhi.w	8000560 <__udivmoddi4+0x2bc>
 80003ae:	4618      	mov	r0, r3
 80003b0:	eba4 0408 	sub.w	r4, r4, r8
 80003b4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b8:	e7bf      	b.n	800033a <__udivmoddi4+0x96>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0x12e>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80b1 	beq.w	8000526 <__udivmoddi4+0x282>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x1cc>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0x140>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80b8 	bhi.w	8000554 <__udivmoddi4+0x2b0>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0103 	sbc.w	r1, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	468c      	mov	ip, r1
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0a8      	beq.n	8000344 <__udivmoddi4+0xa0>
 80003f2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f6:	e7a5      	b.n	8000344 <__udivmoddi4+0xa0>
 80003f8:	f1c2 0320 	rsb	r3, r2, #32
 80003fc:	fa20 f603 	lsr.w	r6, r0, r3
 8000400:	4097      	lsls	r7, r2
 8000402:	fa01 f002 	lsl.w	r0, r1, r2
 8000406:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800040a:	40d9      	lsrs	r1, r3
 800040c:	4330      	orrs	r0, r6
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	fbb1 f6fe 	udiv	r6, r1, lr
 8000414:	fa1f f887 	uxth.w	r8, r7
 8000418:	fb0e 1116 	mls	r1, lr, r6, r1
 800041c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000420:	fb06 f108 	mul.w	r1, r6, r8
 8000424:	4299      	cmp	r1, r3
 8000426:	fa04 f402 	lsl.w	r4, r4, r2
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x19c>
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000432:	f080 808d 	bcs.w	8000550 <__udivmoddi4+0x2ac>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 808a 	bls.w	8000550 <__udivmoddi4+0x2ac>
 800043c:	3e02      	subs	r6, #2
 800043e:	443b      	add	r3, r7
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b281      	uxth	r1, r0
 8000444:	fbb3 f0fe 	udiv	r0, r3, lr
 8000448:	fb0e 3310 	mls	r3, lr, r0, r3
 800044c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000450:	fb00 f308 	mul.w	r3, r0, r8
 8000454:	428b      	cmp	r3, r1
 8000456:	d907      	bls.n	8000468 <__udivmoddi4+0x1c4>
 8000458:	1879      	adds	r1, r7, r1
 800045a:	f100 3cff 	add.w	ip, r0, #4294967295
 800045e:	d273      	bcs.n	8000548 <__udivmoddi4+0x2a4>
 8000460:	428b      	cmp	r3, r1
 8000462:	d971      	bls.n	8000548 <__udivmoddi4+0x2a4>
 8000464:	3802      	subs	r0, #2
 8000466:	4439      	add	r1, r7
 8000468:	1acb      	subs	r3, r1, r3
 800046a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046e:	e778      	b.n	8000362 <__udivmoddi4+0xbe>
 8000470:	f1c6 0c20 	rsb	ip, r6, #32
 8000474:	fa03 f406 	lsl.w	r4, r3, r6
 8000478:	fa22 f30c 	lsr.w	r3, r2, ip
 800047c:	431c      	orrs	r4, r3
 800047e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800048a:	fa21 f10c 	lsr.w	r1, r1, ip
 800048e:	431f      	orrs	r7, r3
 8000490:	0c3b      	lsrs	r3, r7, #16
 8000492:	fbb1 f9fe 	udiv	r9, r1, lr
 8000496:	fa1f f884 	uxth.w	r8, r4
 800049a:	fb0e 1119 	mls	r1, lr, r9, r1
 800049e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004a2:	fb09 fa08 	mul.w	sl, r9, r8
 80004a6:	458a      	cmp	sl, r1
 80004a8:	fa02 f206 	lsl.w	r2, r2, r6
 80004ac:	fa00 f306 	lsl.w	r3, r0, r6
 80004b0:	d908      	bls.n	80004c4 <__udivmoddi4+0x220>
 80004b2:	1861      	adds	r1, r4, r1
 80004b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b8:	d248      	bcs.n	800054c <__udivmoddi4+0x2a8>
 80004ba:	458a      	cmp	sl, r1
 80004bc:	d946      	bls.n	800054c <__udivmoddi4+0x2a8>
 80004be:	f1a9 0902 	sub.w	r9, r9, #2
 80004c2:	4421      	add	r1, r4
 80004c4:	eba1 010a 	sub.w	r1, r1, sl
 80004c8:	b2bf      	uxth	r7, r7
 80004ca:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ce:	fb0e 1110 	mls	r1, lr, r0, r1
 80004d2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d6:	fb00 f808 	mul.w	r8, r0, r8
 80004da:	45b8      	cmp	r8, r7
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x24a>
 80004de:	19e7      	adds	r7, r4, r7
 80004e0:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e4:	d22e      	bcs.n	8000544 <__udivmoddi4+0x2a0>
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d92c      	bls.n	8000544 <__udivmoddi4+0x2a0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	4427      	add	r7, r4
 80004ee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004f2:	eba7 0708 	sub.w	r7, r7, r8
 80004f6:	fba0 8902 	umull	r8, r9, r0, r2
 80004fa:	454f      	cmp	r7, r9
 80004fc:	46c6      	mov	lr, r8
 80004fe:	4649      	mov	r1, r9
 8000500:	d31a      	bcc.n	8000538 <__udivmoddi4+0x294>
 8000502:	d017      	beq.n	8000534 <__udivmoddi4+0x290>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x27a>
 8000506:	ebb3 020e 	subs.w	r2, r3, lr
 800050a:	eb67 0701 	sbc.w	r7, r7, r1
 800050e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000512:	40f2      	lsrs	r2, r6
 8000514:	ea4c 0202 	orr.w	r2, ip, r2
 8000518:	40f7      	lsrs	r7, r6
 800051a:	e9c5 2700 	strd	r2, r7, [r5]
 800051e:	2600      	movs	r6, #0
 8000520:	4631      	mov	r1, r6
 8000522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e70b      	b.n	8000344 <__udivmoddi4+0xa0>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e9      	b.n	8000304 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fd      	b.n	8000330 <__udivmoddi4+0x8c>
 8000534:	4543      	cmp	r3, r8
 8000536:	d2e5      	bcs.n	8000504 <__udivmoddi4+0x260>
 8000538:	ebb8 0e02 	subs.w	lr, r8, r2
 800053c:	eb69 0104 	sbc.w	r1, r9, r4
 8000540:	3801      	subs	r0, #1
 8000542:	e7df      	b.n	8000504 <__udivmoddi4+0x260>
 8000544:	4608      	mov	r0, r1
 8000546:	e7d2      	b.n	80004ee <__udivmoddi4+0x24a>
 8000548:	4660      	mov	r0, ip
 800054a:	e78d      	b.n	8000468 <__udivmoddi4+0x1c4>
 800054c:	4681      	mov	r9, r0
 800054e:	e7b9      	b.n	80004c4 <__udivmoddi4+0x220>
 8000550:	4666      	mov	r6, ip
 8000552:	e775      	b.n	8000440 <__udivmoddi4+0x19c>
 8000554:	4630      	mov	r0, r6
 8000556:	e74a      	b.n	80003ee <__udivmoddi4+0x14a>
 8000558:	f1ac 0c02 	sub.w	ip, ip, #2
 800055c:	4439      	add	r1, r7
 800055e:	e713      	b.n	8000388 <__udivmoddi4+0xe4>
 8000560:	3802      	subs	r0, #2
 8000562:	443c      	add	r4, r7
 8000564:	e724      	b.n	80003b0 <__udivmoddi4+0x10c>
 8000566:	bf00      	nop

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b088      	sub	sp, #32
 8000570:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000572:	f000 fb8b 	bl	8000c8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000576:	f000 f851 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057a:	f000 f8b9 	bl	80006f0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  // Enable DWT_CYCCNT
  DWT_CTRL |= (1 << 0);
 800057e:	4b20      	ldr	r3, [pc, #128]	; (8000600 <main+0x94>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a1f      	ldr	r2, [pc, #124]	; (8000600 <main+0x94>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 800058a:	f004 fa1b 	bl	80049c4 <SEGGER_SYSVIEW_Conf>

  SEGGER_SYSVIEW_Start();
 800058e:	f005 fa81 	bl	8005a94 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 3, &task1_handle);
 8000592:	f107 0308 	add.w	r3, r7, #8
 8000596:	9301      	str	r3, [sp, #4]
 8000598:	2303      	movs	r3, #3
 800059a:	9300      	str	r3, [sp, #0]
 800059c:	4b19      	ldr	r3, [pc, #100]	; (8000604 <main+0x98>)
 800059e:	22c8      	movs	r2, #200	; 0xc8
 80005a0:	4919      	ldr	r1, [pc, #100]	; (8000608 <main+0x9c>)
 80005a2:	481a      	ldr	r0, [pc, #104]	; (800060c <main+0xa0>)
 80005a4:	f002 fb54 	bl	8002c50 <xTaskCreate>
 80005a8:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d00a      	beq.n	80005c6 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b4:	f383 8811 	msr	BASEPRI, r3
 80005b8:	f3bf 8f6f 	isb	sy
 80005bc:	f3bf 8f4f 	dsb	sy
 80005c0:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005c2:	bf00      	nop
 80005c4:	e7fe      	b.n	80005c4 <main+0x58>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_handle);
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	2302      	movs	r3, #2
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	4b10      	ldr	r3, [pc, #64]	; (8000610 <main+0xa4>)
 80005d0:	22c8      	movs	r2, #200	; 0xc8
 80005d2:	4910      	ldr	r1, [pc, #64]	; (8000614 <main+0xa8>)
 80005d4:	4810      	ldr	r0, [pc, #64]	; (8000618 <main+0xac>)
 80005d6:	f002 fb3b 	bl	8002c50 <xTaskCreate>
 80005da:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d00a      	beq.n	80005f8 <main+0x8c>
        __asm volatile
 80005e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005e6:	f383 8811 	msr	BASEPRI, r3
 80005ea:	f3bf 8f6f 	isb	sy
 80005ee:	f3bf 8f4f 	dsb	sy
 80005f2:	60fb      	str	r3, [r7, #12]
    }
 80005f4:	bf00      	nop
 80005f6:	e7fe      	b.n	80005f6 <main+0x8a>

  vTaskStartScheduler();
 80005f8:	f002 fc8e 	bl	8002f18 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <main+0x90>
 80005fe:	bf00      	nop
 8000600:	e0001000 	.word	0xe0001000
 8000604:	0800707c 	.word	0x0800707c
 8000608:	08007094 	.word	0x08007094
 800060c:	080009ad 	.word	0x080009ad
 8000610:	0800709c 	.word	0x0800709c
 8000614:	080070b4 	.word	0x080070b4
 8000618:	080009d5 	.word	0x080009d5

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	; 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f006 f850 	bl	80066d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <SystemClock_Config+0xcc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a27      	ldr	r2, [pc, #156]	; (80006e8 <SystemClock_Config+0xcc>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b25      	ldr	r3, [pc, #148]	; (80006e8 <SystemClock_Config+0xcc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b22      	ldr	r3, [pc, #136]	; (80006ec <SystemClock_Config+0xd0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemClock_Config+0xd0>)
 8000666:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <SystemClock_Config+0xd0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000678:	2302      	movs	r3, #2
 800067a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	2301      	movs	r3, #1
 800067e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000680:	2310      	movs	r3, #16
 8000682:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000684:	2302      	movs	r3, #2
 8000686:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000688:	2300      	movs	r3, #0
 800068a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800068c:	2308      	movs	r3, #8
 800068e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000690:	23c0      	movs	r3, #192	; 0xc0
 8000692:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000694:	2304      	movs	r3, #4
 8000696:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000698:	2308      	movs	r3, #8
 800069a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 0320 	add.w	r3, r7, #32
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 fdb5 	bl	8001210 <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006ac:	f000 f9b8 	bl	8000a20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	230f      	movs	r3, #15
 80006b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b4:	2302      	movs	r3, #2
 80006b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2103      	movs	r1, #3
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 f816 	bl	8001700 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006da:	f000 f9a1 	bl	8000a20 <Error_Handler>
  }
}
 80006de:	bf00      	nop
 80006e0:	3750      	adds	r7, #80	; 0x50
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08c      	sub	sp, #48	; 0x30
 80006f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f6:	f107 031c 	add.w	r3, r7, #28
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	61bb      	str	r3, [r7, #24]
 800070a:	4ba2      	ldr	r3, [pc, #648]	; (8000994 <MX_GPIO_Init+0x2a4>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4aa1      	ldr	r2, [pc, #644]	; (8000994 <MX_GPIO_Init+0x2a4>)
 8000710:	f043 0310 	orr.w	r3, r3, #16
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b9f      	ldr	r3, [pc, #636]	; (8000994 <MX_GPIO_Init+0x2a4>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0310 	and.w	r3, r3, #16
 800071e:	61bb      	str	r3, [r7, #24]
 8000720:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]
 8000726:	4b9b      	ldr	r3, [pc, #620]	; (8000994 <MX_GPIO_Init+0x2a4>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a9a      	ldr	r2, [pc, #616]	; (8000994 <MX_GPIO_Init+0x2a4>)
 800072c:	f043 0304 	orr.w	r3, r3, #4
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b98      	ldr	r3, [pc, #608]	; (8000994 <MX_GPIO_Init+0x2a4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0304 	and.w	r3, r3, #4
 800073a:	617b      	str	r3, [r7, #20]
 800073c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
 8000742:	4b94      	ldr	r3, [pc, #592]	; (8000994 <MX_GPIO_Init+0x2a4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a93      	ldr	r2, [pc, #588]	; (8000994 <MX_GPIO_Init+0x2a4>)
 8000748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b91      	ldr	r3, [pc, #580]	; (8000994 <MX_GPIO_Init+0x2a4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	4b8d      	ldr	r3, [pc, #564]	; (8000994 <MX_GPIO_Init+0x2a4>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a8c      	ldr	r2, [pc, #560]	; (8000994 <MX_GPIO_Init+0x2a4>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b8a      	ldr	r3, [pc, #552]	; (8000994 <MX_GPIO_Init+0x2a4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	4b86      	ldr	r3, [pc, #536]	; (8000994 <MX_GPIO_Init+0x2a4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a85      	ldr	r2, [pc, #532]	; (8000994 <MX_GPIO_Init+0x2a4>)
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b83      	ldr	r3, [pc, #524]	; (8000994 <MX_GPIO_Init+0x2a4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0302 	and.w	r3, r3, #2
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	4b7f      	ldr	r3, [pc, #508]	; (8000994 <MX_GPIO_Init+0x2a4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a7e      	ldr	r2, [pc, #504]	; (8000994 <MX_GPIO_Init+0x2a4>)
 800079c:	f043 0308 	orr.w	r3, r3, #8
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b7c      	ldr	r3, [pc, #496]	; (8000994 <MX_GPIO_Init+0x2a4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0308 	and.w	r3, r3, #8
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2108      	movs	r1, #8
 80007b2:	4879      	ldr	r0, [pc, #484]	; (8000998 <MX_GPIO_Init+0x2a8>)
 80007b4:	f000 fd12 	bl	80011dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007b8:	2201      	movs	r2, #1
 80007ba:	2101      	movs	r1, #1
 80007bc:	4877      	ldr	r0, [pc, #476]	; (800099c <MX_GPIO_Init+0x2ac>)
 80007be:	f000 fd0d 	bl	80011dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007c2:	2200      	movs	r2, #0
 80007c4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007c8:	4875      	ldr	r0, [pc, #468]	; (80009a0 <MX_GPIO_Init+0x2b0>)
 80007ca:	f000 fd07 	bl	80011dc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007ce:	2304      	movs	r3, #4
 80007d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d2:	2300      	movs	r3, #0
 80007d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	4619      	mov	r1, r3
 80007e0:	486d      	ldr	r0, [pc, #436]	; (8000998 <MX_GPIO_Init+0x2a8>)
 80007e2:	f000 fb77 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007e6:	2308      	movs	r3, #8
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	4619      	mov	r1, r3
 80007fc:	4866      	ldr	r0, [pc, #408]	; (8000998 <MX_GPIO_Init+0x2a8>)
 80007fe:	f000 fb69 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8000802:	2332      	movs	r3, #50	; 0x32
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000806:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800080a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4619      	mov	r1, r3
 8000816:	4860      	ldr	r0, [pc, #384]	; (8000998 <MX_GPIO_Init+0x2a8>)
 8000818:	f000 fb5c 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800081c:	2301      	movs	r3, #1
 800081e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000820:	2301      	movs	r3, #1
 8000822:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	485a      	ldr	r0, [pc, #360]	; (800099c <MX_GPIO_Init+0x2ac>)
 8000834:	f000 fb4e 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000838:	2308      	movs	r3, #8
 800083a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083c:	2302      	movs	r3, #2
 800083e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	2300      	movs	r3, #0
 8000846:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000848:	2305      	movs	r3, #5
 800084a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800084c:	f107 031c 	add.w	r3, r7, #28
 8000850:	4619      	mov	r1, r3
 8000852:	4852      	ldr	r0, [pc, #328]	; (800099c <MX_GPIO_Init+0x2ac>)
 8000854:	f000 fb3e 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000858:	2301      	movs	r3, #1
 800085a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800085c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	484d      	ldr	r0, [pc, #308]	; (80009a4 <MX_GPIO_Init+0x2b4>)
 800086e:	f000 fb31 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000872:	2310      	movs	r3, #16
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000876:	2302      	movs	r3, #2
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000882:	2306      	movs	r3, #6
 8000884:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	4619      	mov	r1, r3
 800088c:	4845      	ldr	r0, [pc, #276]	; (80009a4 <MX_GPIO_Init+0x2b4>)
 800088e:	f000 fb21 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000892:	23e0      	movs	r3, #224	; 0xe0
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000896:	2302      	movs	r3, #2
 8000898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089e:	2303      	movs	r3, #3
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008a2:	2305      	movs	r3, #5
 80008a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	483d      	ldr	r0, [pc, #244]	; (80009a4 <MX_GPIO_Init+0x2b4>)
 80008ae:	f000 fb11 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80008b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b8:	2302      	movs	r3, #2
 80008ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008c4:	2305      	movs	r3, #5
 80008c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	4836      	ldr	r0, [pc, #216]	; (80009a8 <MX_GPIO_Init+0x2b8>)
 80008d0:	f000 fb00 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008d4:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008d8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	2301      	movs	r3, #1
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	482c      	ldr	r0, [pc, #176]	; (80009a0 <MX_GPIO_Init+0x2b0>)
 80008ee:	f000 faf1 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008f2:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f8:	2302      	movs	r3, #2
 80008fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2300      	movs	r3, #0
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000904:	2306      	movs	r3, #6
 8000906:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	4823      	ldr	r0, [pc, #140]	; (800099c <MX_GPIO_Init+0x2ac>)
 8000910:	f000 fae0 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000914:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091a:	2300      	movs	r3, #0
 800091c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	481e      	ldr	r0, [pc, #120]	; (80009a4 <MX_GPIO_Init+0x2b4>)
 800092a:	f000 fad3 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800092e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000934:	2302      	movs	r3, #2
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093c:	2303      	movs	r3, #3
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000940:	230a      	movs	r3, #10
 8000942:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4619      	mov	r1, r3
 800094a:	4816      	ldr	r0, [pc, #88]	; (80009a4 <MX_GPIO_Init+0x2b4>)
 800094c:	f000 fac2 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000950:	2320      	movs	r3, #32
 8000952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000954:	2300      	movs	r3, #0
 8000956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	4619      	mov	r1, r3
 8000962:	480f      	ldr	r0, [pc, #60]	; (80009a0 <MX_GPIO_Init+0x2b0>)
 8000964:	f000 fab6 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000968:	f44f 7310 	mov.w	r3, #576	; 0x240
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800096e:	2312      	movs	r3, #18
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800097a:	2304      	movs	r3, #4
 800097c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	4808      	ldr	r0, [pc, #32]	; (80009a8 <MX_GPIO_Init+0x2b8>)
 8000986:	f000 faa5 	bl	8000ed4 <HAL_GPIO_Init>

}
 800098a:	bf00      	nop
 800098c:	3730      	adds	r7, #48	; 0x30
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800
 8000998:	40021000 	.word	0x40021000
 800099c:	40020800 	.word	0x40020800
 80009a0:	40020c00 	.word	0x40020c00
 80009a4:	40020000 	.word	0x40020000
 80009a8:	40020400 	.word	0x40020400

080009ac <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* params)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b09c      	sub	sp, #112	; 0x70
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		printf("Hello from task-1\n");
 80009b4:	4805      	ldr	r0, [pc, #20]	; (80009cc <task1_handler+0x20>)
 80009b6:	f005 ff01 	bl	80067bc <puts>
//		snprintf(msg, 100, "%s\n", (const char*)params);
//		SEGGER_SYSVIEW_PrintfTarget(msg);
		taskYIELD();
 80009ba:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <task1_handler+0x24>)
 80009bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	f3bf 8f4f 	dsb	sy
 80009c6:	f3bf 8f6f 	isb	sy
		printf("Hello from task-1\n");
 80009ca:	e7f3      	b.n	80009b4 <task1_handler+0x8>
 80009cc:	080070bc 	.word	0x080070bc
 80009d0:	e000ed04 	.word	0xe000ed04

080009d4 <task2_handler>:
//		vTaskDelay(3);
	}
}

static void task2_handler(void* params)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b09c      	sub	sp, #112	; 0x70
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		printf("Hello from task-2\n");
 80009dc:	4805      	ldr	r0, [pc, #20]	; (80009f4 <task2_handler+0x20>)
 80009de:	f005 feed 	bl	80067bc <puts>
//		snprintf(msg, 100, "%s\n", (const char*)params);
//		SEGGER_SYSVIEW_PrintfTarget(msg);
		taskYIELD();
 80009e2:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <task2_handler+0x24>)
 80009e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	f3bf 8f4f 	dsb	sy
 80009ee:	f3bf 8f6f 	isb	sy
		printf("Hello from task-2\n");
 80009f2:	e7f3      	b.n	80009dc <task2_handler+0x8>
 80009f4:	080070d0 	.word	0x080070d0
 80009f8:	e000ed04 	.word	0xe000ed04

080009fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a04      	ldr	r2, [pc, #16]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d101      	bne.n	8000a12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a0e:	f000 f95f 	bl	8000cd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40000c00 	.word	0x40000c00

08000a20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a24:	b672      	cpsid	i
}
 8000a26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <Error_Handler+0x8>
	...

08000a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	4a0f      	ldr	r2, [pc, #60]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a40:	6453      	str	r3, [r2, #68]	; 0x44
 8000a42:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	4a08      	ldr	r2, [pc, #32]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000a6a:	f003 fbf5 	bl	8004258 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40023800 	.word	0x40023800

08000a7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08c      	sub	sp, #48	; 0x30
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	6879      	ldr	r1, [r7, #4]
 8000a90:	2032      	movs	r0, #50	; 0x32
 8000a92:	f000 f9f5 	bl	8000e80 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000a96:	2032      	movs	r0, #50	; 0x32
 8000a98:	f000 fa0e 	bl	8000eb8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	4b1f      	ldr	r3, [pc, #124]	; (8000b20 <HAL_InitTick+0xa4>)
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa4:	4a1e      	ldr	r2, [pc, #120]	; (8000b20 <HAL_InitTick+0xa4>)
 8000aa6:	f043 0308 	orr.w	r3, r3, #8
 8000aaa:	6413      	str	r3, [r2, #64]	; 0x40
 8000aac:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <HAL_InitTick+0xa4>)
 8000aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab0:	f003 0308 	and.w	r3, r3, #8
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ab8:	f107 0210 	add.w	r2, r7, #16
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	4611      	mov	r1, r2
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f001 f804 	bl	8001ad0 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ac8:	f000 ffee 	bl	8001aa8 <HAL_RCC_GetPCLK1Freq>
 8000acc:	4603      	mov	r3, r0
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ad4:	4a13      	ldr	r2, [pc, #76]	; (8000b24 <HAL_InitTick+0xa8>)
 8000ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8000ada:	0c9b      	lsrs	r3, r3, #18
 8000adc:	3b01      	subs	r3, #1
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <HAL_InitTick+0xac>)
 8000ae2:	4a12      	ldr	r2, [pc, #72]	; (8000b2c <HAL_InitTick+0xb0>)
 8000ae4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <HAL_InitTick+0xac>)
 8000ae8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aec:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000aee:	4a0e      	ldr	r2, [pc, #56]	; (8000b28 <HAL_InitTick+0xac>)
 8000af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000af2:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000af4:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <HAL_InitTick+0xac>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afa:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <HAL_InitTick+0xac>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000b00:	4809      	ldr	r0, [pc, #36]	; (8000b28 <HAL_InitTick+0xac>)
 8000b02:	f001 f817 	bl	8001b34 <HAL_TIM_Base_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d104      	bne.n	8000b16 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000b0c:	4806      	ldr	r0, [pc, #24]	; (8000b28 <HAL_InitTick+0xac>)
 8000b0e:	f001 f86b 	bl	8001be8 <HAL_TIM_Base_Start_IT>
 8000b12:	4603      	mov	r3, r0
 8000b14:	e000      	b.n	8000b18 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3730      	adds	r7, #48	; 0x30
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40023800 	.word	0x40023800
 8000b24:	431bde83 	.word	0x431bde83
 8000b28:	200143d8 	.word	0x200143d8
 8000b2c:	40000c00 	.word	0x40000c00

08000b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <NMI_Handler+0x4>

08000b36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3a:	e7fe      	b.n	8000b3a <HardFault_Handler+0x4>

08000b3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <MemManage_Handler+0x4>

08000b42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b46:	e7fe      	b.n	8000b46 <BusFault_Handler+0x4>

08000b48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <UsageFault_Handler+0x4>

08000b4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000b60:	4802      	ldr	r0, [pc, #8]	; (8000b6c <TIM5_IRQHandler+0x10>)
 8000b62:	f001 f8a3 	bl	8001cac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200143d8 	.word	0x200143d8

08000b70 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	e00a      	b.n	8000b98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b82:	f3af 8000 	nop.w
 8000b86:	4601      	mov	r1, r0
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	1c5a      	adds	r2, r3, #1
 8000b8c:	60ba      	str	r2, [r7, #8]
 8000b8e:	b2ca      	uxtb	r2, r1
 8000b90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	3301      	adds	r3, #1
 8000b96:	617b      	str	r3, [r7, #20]
 8000b98:	697a      	ldr	r2, [r7, #20]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	dbf0      	blt.n	8000b82 <_read+0x12>
	}

return len;
 8000ba0:	687b      	ldr	r3, [r7, #4]
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <_close>:
	}
	return len;
}

int _close(int file)
{
 8000baa:	b480      	push	{r7}
 8000bac:	b083      	sub	sp, #12
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
	return -1;
 8000bb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	b083      	sub	sp, #12
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
 8000bca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bd2:	605a      	str	r2, [r3, #4]
	return 0;
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <_isatty>:

int _isatty(int file)
{
 8000be2:	b480      	push	{r7}
 8000be4:	b083      	sub	sp, #12
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
	return 1;
 8000bea:	2301      	movs	r3, #1
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
	return 0;
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3714      	adds	r7, #20
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
	...

08000c14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <SystemInit+0x20>)
 8000c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c1e:	4a05      	ldr	r2, [pc, #20]	; (8000c34 <SystemInit+0x20>)
 8000c20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c3c:	480d      	ldr	r0, [pc, #52]	; (8000c74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c3e:	490e      	ldr	r1, [pc, #56]	; (8000c78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c40:	4a0e      	ldr	r2, [pc, #56]	; (8000c7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c44:	e002      	b.n	8000c4c <LoopCopyDataInit>

08000c46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4a:	3304      	adds	r3, #4

08000c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c50:	d3f9      	bcc.n	8000c46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c52:	4a0b      	ldr	r2, [pc, #44]	; (8000c80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c54:	4c0b      	ldr	r4, [pc, #44]	; (8000c84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c58:	e001      	b.n	8000c5e <LoopFillZerobss>

08000c5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c5c:	3204      	adds	r2, #4

08000c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c60:	d3fb      	bcc.n	8000c5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c62:	f7ff ffd7 	bl	8000c14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c66:	f005 fcf3 	bl	8006650 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c6a:	f7ff fc7f 	bl	800056c <main>
  bx  lr    
 8000c6e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c78:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000c7c:	08007260 	.word	0x08007260
  ldr r2, =_sbss
 8000c80:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000c84:	2001451c 	.word	0x2001451c

08000c88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c88:	e7fe      	b.n	8000c88 <ADC_IRQHandler>
	...

08000c8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c90:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <HAL_Init+0x40>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0d      	ldr	r2, [pc, #52]	; (8000ccc <HAL_Init+0x40>)
 8000c96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <HAL_Init+0x40>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a0a      	ldr	r2, [pc, #40]	; (8000ccc <HAL_Init+0x40>)
 8000ca2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca8:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <HAL_Init+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a07      	ldr	r2, [pc, #28]	; (8000ccc <HAL_Init+0x40>)
 8000cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb4:	2003      	movs	r0, #3
 8000cb6:	f000 f8d8 	bl	8000e6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f7ff fede 	bl	8000a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc0:	f7ff feb4 	bl	8000a2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40023c00 	.word	0x40023c00

08000cd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HAL_IncTick+0x20>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_IncTick+0x24>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4413      	add	r3, r2
 8000ce0:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <HAL_IncTick+0x24>)
 8000ce2:	6013      	str	r3, [r2, #0]
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	20000008 	.word	0x20000008
 8000cf4:	20014420 	.word	0x20014420

08000cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cfc:	4b03      	ldr	r3, [pc, #12]	; (8000d0c <HAL_GetTick+0x14>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	20014420 	.word	0x20014420

08000d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <__NVIC_SetPriorityGrouping+0x44>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d26:	68ba      	ldr	r2, [r7, #8]
 8000d28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d42:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <__NVIC_SetPriorityGrouping+0x44>)
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	60d3      	str	r3, [r2, #12]
}
 8000d48:	bf00      	nop
 8000d4a:	3714      	adds	r7, #20
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d5c:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <__NVIC_GetPriorityGrouping+0x18>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	0a1b      	lsrs	r3, r3, #8
 8000d62:	f003 0307 	and.w	r3, r3, #7
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	db0b      	blt.n	8000d9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	f003 021f 	and.w	r2, r3, #31
 8000d8c:	4907      	ldr	r1, [pc, #28]	; (8000dac <__NVIC_EnableIRQ+0x38>)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	095b      	lsrs	r3, r3, #5
 8000d94:	2001      	movs	r0, #1
 8000d96:	fa00 f202 	lsl.w	r2, r0, r2
 8000d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	e000e100 	.word	0xe000e100

08000db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	6039      	str	r1, [r7, #0]
 8000dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	db0a      	blt.n	8000dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	490c      	ldr	r1, [pc, #48]	; (8000dfc <__NVIC_SetPriority+0x4c>)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	0112      	lsls	r2, r2, #4
 8000dd0:	b2d2      	uxtb	r2, r2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd8:	e00a      	b.n	8000df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4908      	ldr	r1, [pc, #32]	; (8000e00 <__NVIC_SetPriority+0x50>)
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	f003 030f 	and.w	r3, r3, #15
 8000de6:	3b04      	subs	r3, #4
 8000de8:	0112      	lsls	r2, r2, #4
 8000dea:	b2d2      	uxtb	r2, r2
 8000dec:	440b      	add	r3, r1
 8000dee:	761a      	strb	r2, [r3, #24]
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000e100 	.word	0xe000e100
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b089      	sub	sp, #36	; 0x24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	f1c3 0307 	rsb	r3, r3, #7
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	bf28      	it	cs
 8000e22:	2304      	movcs	r3, #4
 8000e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3304      	adds	r3, #4
 8000e2a:	2b06      	cmp	r3, #6
 8000e2c:	d902      	bls.n	8000e34 <NVIC_EncodePriority+0x30>
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3b03      	subs	r3, #3
 8000e32:	e000      	b.n	8000e36 <NVIC_EncodePriority+0x32>
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	f04f 32ff 	mov.w	r2, #4294967295
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43da      	mvns	r2, r3
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	401a      	ands	r2, r3
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	fa01 f303 	lsl.w	r3, r1, r3
 8000e56:	43d9      	mvns	r1, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	4313      	orrs	r3, r2
         );
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3724      	adds	r7, #36	; 0x24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff ff4c 	bl	8000d10 <__NVIC_SetPriorityGrouping>
}
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
 8000e8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e92:	f7ff ff61 	bl	8000d58 <__NVIC_GetPriorityGrouping>
 8000e96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	68b9      	ldr	r1, [r7, #8]
 8000e9c:	6978      	ldr	r0, [r7, #20]
 8000e9e:	f7ff ffb1 	bl	8000e04 <NVIC_EncodePriority>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea8:	4611      	mov	r1, r2
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff ff80 	bl	8000db0 <__NVIC_SetPriority>
}
 8000eb0:	bf00      	nop
 8000eb2:	3718      	adds	r7, #24
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff ff54 	bl	8000d74 <__NVIC_EnableIRQ>
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b089      	sub	sp, #36	; 0x24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
 8000eee:	e159      	b.n	80011a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	697a      	ldr	r2, [r7, #20]
 8000f00:	4013      	ands	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	f040 8148 	bne.w	800119e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f003 0303 	and.w	r3, r3, #3
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d005      	beq.n	8000f26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d130      	bne.n	8000f88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	2203      	movs	r2, #3
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	68da      	ldr	r2, [r3, #12]
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	091b      	lsrs	r3, r3, #4
 8000f72:	f003 0201 	and.w	r2, r3, #1
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	2b03      	cmp	r3, #3
 8000f92:	d017      	beq.n	8000fc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	689a      	ldr	r2, [r3, #8]
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d123      	bne.n	8001018 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	08da      	lsrs	r2, r3, #3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3208      	adds	r2, #8
 8000fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	f003 0307 	and.w	r3, r3, #7
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	220f      	movs	r2, #15
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	691a      	ldr	r2, [r3, #16]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	08da      	lsrs	r2, r3, #3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3208      	adds	r2, #8
 8001012:	69b9      	ldr	r1, [r7, #24]
 8001014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	2203      	movs	r2, #3
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 0203 	and.w	r2, r3, #3
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001054:	2b00      	cmp	r3, #0
 8001056:	f000 80a2 	beq.w	800119e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	4b57      	ldr	r3, [pc, #348]	; (80011bc <HAL_GPIO_Init+0x2e8>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	4a56      	ldr	r2, [pc, #344]	; (80011bc <HAL_GPIO_Init+0x2e8>)
 8001064:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001068:	6453      	str	r3, [r2, #68]	; 0x44
 800106a:	4b54      	ldr	r3, [pc, #336]	; (80011bc <HAL_GPIO_Init+0x2e8>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001076:	4a52      	ldr	r2, [pc, #328]	; (80011c0 <HAL_GPIO_Init+0x2ec>)
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	089b      	lsrs	r3, r3, #2
 800107c:	3302      	adds	r3, #2
 800107e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001082:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f003 0303 	and.w	r3, r3, #3
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	220f      	movs	r2, #15
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a49      	ldr	r2, [pc, #292]	; (80011c4 <HAL_GPIO_Init+0x2f0>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d019      	beq.n	80010d6 <HAL_GPIO_Init+0x202>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a48      	ldr	r2, [pc, #288]	; (80011c8 <HAL_GPIO_Init+0x2f4>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d013      	beq.n	80010d2 <HAL_GPIO_Init+0x1fe>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a47      	ldr	r2, [pc, #284]	; (80011cc <HAL_GPIO_Init+0x2f8>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d00d      	beq.n	80010ce <HAL_GPIO_Init+0x1fa>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a46      	ldr	r2, [pc, #280]	; (80011d0 <HAL_GPIO_Init+0x2fc>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d007      	beq.n	80010ca <HAL_GPIO_Init+0x1f6>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a45      	ldr	r2, [pc, #276]	; (80011d4 <HAL_GPIO_Init+0x300>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d101      	bne.n	80010c6 <HAL_GPIO_Init+0x1f2>
 80010c2:	2304      	movs	r3, #4
 80010c4:	e008      	b.n	80010d8 <HAL_GPIO_Init+0x204>
 80010c6:	2307      	movs	r3, #7
 80010c8:	e006      	b.n	80010d8 <HAL_GPIO_Init+0x204>
 80010ca:	2303      	movs	r3, #3
 80010cc:	e004      	b.n	80010d8 <HAL_GPIO_Init+0x204>
 80010ce:	2302      	movs	r3, #2
 80010d0:	e002      	b.n	80010d8 <HAL_GPIO_Init+0x204>
 80010d2:	2301      	movs	r3, #1
 80010d4:	e000      	b.n	80010d8 <HAL_GPIO_Init+0x204>
 80010d6:	2300      	movs	r3, #0
 80010d8:	69fa      	ldr	r2, [r7, #28]
 80010da:	f002 0203 	and.w	r2, r2, #3
 80010de:	0092      	lsls	r2, r2, #2
 80010e0:	4093      	lsls	r3, r2
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010e8:	4935      	ldr	r1, [pc, #212]	; (80011c0 <HAL_GPIO_Init+0x2ec>)
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	089b      	lsrs	r3, r3, #2
 80010ee:	3302      	adds	r3, #2
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010f6:	4b38      	ldr	r3, [pc, #224]	; (80011d8 <HAL_GPIO_Init+0x304>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	43db      	mvns	r3, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4013      	ands	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800111a:	4a2f      	ldr	r2, [pc, #188]	; (80011d8 <HAL_GPIO_Init+0x304>)
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001120:	4b2d      	ldr	r3, [pc, #180]	; (80011d8 <HAL_GPIO_Init+0x304>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	43db      	mvns	r3, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4013      	ands	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d003      	beq.n	8001144 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	4313      	orrs	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001144:	4a24      	ldr	r2, [pc, #144]	; (80011d8 <HAL_GPIO_Init+0x304>)
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800114a:	4b23      	ldr	r3, [pc, #140]	; (80011d8 <HAL_GPIO_Init+0x304>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	43db      	mvns	r3, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4013      	ands	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800116e:	4a1a      	ldr	r2, [pc, #104]	; (80011d8 <HAL_GPIO_Init+0x304>)
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001174:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <HAL_GPIO_Init+0x304>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	4313      	orrs	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001198:	4a0f      	ldr	r2, [pc, #60]	; (80011d8 <HAL_GPIO_Init+0x304>)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3301      	adds	r3, #1
 80011a2:	61fb      	str	r3, [r7, #28]
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	2b0f      	cmp	r3, #15
 80011a8:	f67f aea2 	bls.w	8000ef0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	3724      	adds	r7, #36	; 0x24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40013800 	.word	0x40013800
 80011c4:	40020000 	.word	0x40020000
 80011c8:	40020400 	.word	0x40020400
 80011cc:	40020800 	.word	0x40020800
 80011d0:	40020c00 	.word	0x40020c00
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40013c00 	.word	0x40013c00

080011dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	460b      	mov	r3, r1
 80011e6:	807b      	strh	r3, [r7, #2]
 80011e8:	4613      	mov	r3, r2
 80011ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011ec:	787b      	ldrb	r3, [r7, #1]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011f2:	887a      	ldrh	r2, [r7, #2]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011f8:	e003      	b.n	8001202 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011fa:	887b      	ldrh	r3, [r7, #2]
 80011fc:	041a      	lsls	r2, r3, #16
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	619a      	str	r2, [r3, #24]
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e264      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	2b00      	cmp	r3, #0
 800122c:	d075      	beq.n	800131a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800122e:	4ba3      	ldr	r3, [pc, #652]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f003 030c 	and.w	r3, r3, #12
 8001236:	2b04      	cmp	r3, #4
 8001238:	d00c      	beq.n	8001254 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800123a:	4ba0      	ldr	r3, [pc, #640]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001242:	2b08      	cmp	r3, #8
 8001244:	d112      	bne.n	800126c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001246:	4b9d      	ldr	r3, [pc, #628]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800124e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001252:	d10b      	bne.n	800126c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001254:	4b99      	ldr	r3, [pc, #612]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d05b      	beq.n	8001318 <HAL_RCC_OscConfig+0x108>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d157      	bne.n	8001318 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e23f      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001274:	d106      	bne.n	8001284 <HAL_RCC_OscConfig+0x74>
 8001276:	4b91      	ldr	r3, [pc, #580]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a90      	ldr	r2, [pc, #576]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 800127c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	e01d      	b.n	80012c0 <HAL_RCC_OscConfig+0xb0>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800128c:	d10c      	bne.n	80012a8 <HAL_RCC_OscConfig+0x98>
 800128e:	4b8b      	ldr	r3, [pc, #556]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a8a      	ldr	r2, [pc, #552]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001294:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	4b88      	ldr	r3, [pc, #544]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a87      	ldr	r2, [pc, #540]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 80012a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	e00b      	b.n	80012c0 <HAL_RCC_OscConfig+0xb0>
 80012a8:	4b84      	ldr	r3, [pc, #528]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a83      	ldr	r2, [pc, #524]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 80012ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012b2:	6013      	str	r3, [r2, #0]
 80012b4:	4b81      	ldr	r3, [pc, #516]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a80      	ldr	r2, [pc, #512]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 80012ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d013      	beq.n	80012f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c8:	f7ff fd16 	bl	8000cf8 <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012d0:	f7ff fd12 	bl	8000cf8 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b64      	cmp	r3, #100	; 0x64
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e204      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e2:	4b76      	ldr	r3, [pc, #472]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0f0      	beq.n	80012d0 <HAL_RCC_OscConfig+0xc0>
 80012ee:	e014      	b.n	800131a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f0:	f7ff fd02 	bl	8000cf8 <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f8:	f7ff fcfe 	bl	8000cf8 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b64      	cmp	r3, #100	; 0x64
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e1f0      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800130a:	4b6c      	ldr	r3, [pc, #432]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1f0      	bne.n	80012f8 <HAL_RCC_OscConfig+0xe8>
 8001316:	e000      	b.n	800131a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d063      	beq.n	80013ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001326:	4b65      	ldr	r3, [pc, #404]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f003 030c 	and.w	r3, r3, #12
 800132e:	2b00      	cmp	r3, #0
 8001330:	d00b      	beq.n	800134a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001332:	4b62      	ldr	r3, [pc, #392]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800133a:	2b08      	cmp	r3, #8
 800133c:	d11c      	bne.n	8001378 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800133e:	4b5f      	ldr	r3, [pc, #380]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d116      	bne.n	8001378 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800134a:	4b5c      	ldr	r3, [pc, #368]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d005      	beq.n	8001362 <HAL_RCC_OscConfig+0x152>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d001      	beq.n	8001362 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e1c4      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001362:	4b56      	ldr	r3, [pc, #344]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	691b      	ldr	r3, [r3, #16]
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	4952      	ldr	r1, [pc, #328]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001372:	4313      	orrs	r3, r2
 8001374:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001376:	e03a      	b.n	80013ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d020      	beq.n	80013c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001380:	4b4f      	ldr	r3, [pc, #316]	; (80014c0 <HAL_RCC_OscConfig+0x2b0>)
 8001382:	2201      	movs	r2, #1
 8001384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001386:	f7ff fcb7 	bl	8000cf8 <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800138e:	f7ff fcb3 	bl	8000cf8 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e1a5      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a0:	4b46      	ldr	r3, [pc, #280]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d0f0      	beq.n	800138e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ac:	4b43      	ldr	r3, [pc, #268]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	4940      	ldr	r1, [pc, #256]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 80013bc:	4313      	orrs	r3, r2
 80013be:	600b      	str	r3, [r1, #0]
 80013c0:	e015      	b.n	80013ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013c2:	4b3f      	ldr	r3, [pc, #252]	; (80014c0 <HAL_RCC_OscConfig+0x2b0>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c8:	f7ff fc96 	bl	8000cf8 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013d0:	f7ff fc92 	bl	8000cf8 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e184      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013e2:	4b36      	ldr	r3, [pc, #216]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1f0      	bne.n	80013d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0308 	and.w	r3, r3, #8
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d030      	beq.n	800145c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d016      	beq.n	8001430 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001402:	4b30      	ldr	r3, [pc, #192]	; (80014c4 <HAL_RCC_OscConfig+0x2b4>)
 8001404:	2201      	movs	r2, #1
 8001406:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001408:	f7ff fc76 	bl	8000cf8 <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001410:	f7ff fc72 	bl	8000cf8 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e164      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001422:	4b26      	ldr	r3, [pc, #152]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d0f0      	beq.n	8001410 <HAL_RCC_OscConfig+0x200>
 800142e:	e015      	b.n	800145c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001430:	4b24      	ldr	r3, [pc, #144]	; (80014c4 <HAL_RCC_OscConfig+0x2b4>)
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001436:	f7ff fc5f 	bl	8000cf8 <HAL_GetTick>
 800143a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800143e:	f7ff fc5b 	bl	8000cf8 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e14d      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001450:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1f0      	bne.n	800143e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 80a0 	beq.w	80015aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800146a:	2300      	movs	r3, #0
 800146c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800146e:	4b13      	ldr	r3, [pc, #76]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d10f      	bne.n	800149a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	4a0e      	ldr	r2, [pc, #56]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001488:	6413      	str	r3, [r2, #64]	; 0x40
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001496:	2301      	movs	r3, #1
 8001498:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149a:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <HAL_RCC_OscConfig+0x2b8>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d121      	bne.n	80014ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014a6:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <HAL_RCC_OscConfig+0x2b8>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a07      	ldr	r2, [pc, #28]	; (80014c8 <HAL_RCC_OscConfig+0x2b8>)
 80014ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014b2:	f7ff fc21 	bl	8000cf8 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b8:	e011      	b.n	80014de <HAL_RCC_OscConfig+0x2ce>
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800
 80014c0:	42470000 	.word	0x42470000
 80014c4:	42470e80 	.word	0x42470e80
 80014c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014cc:	f7ff fc14 	bl	8000cf8 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e106      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014de:	4b85      	ldr	r3, [pc, #532]	; (80016f4 <HAL_RCC_OscConfig+0x4e4>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d0f0      	beq.n	80014cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d106      	bne.n	8001500 <HAL_RCC_OscConfig+0x2f0>
 80014f2:	4b81      	ldr	r3, [pc, #516]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 80014f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f6:	4a80      	ldr	r2, [pc, #512]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6713      	str	r3, [r2, #112]	; 0x70
 80014fe:	e01c      	b.n	800153a <HAL_RCC_OscConfig+0x32a>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	2b05      	cmp	r3, #5
 8001506:	d10c      	bne.n	8001522 <HAL_RCC_OscConfig+0x312>
 8001508:	4b7b      	ldr	r3, [pc, #492]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 800150a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800150c:	4a7a      	ldr	r2, [pc, #488]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 800150e:	f043 0304 	orr.w	r3, r3, #4
 8001512:	6713      	str	r3, [r2, #112]	; 0x70
 8001514:	4b78      	ldr	r3, [pc, #480]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 8001516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001518:	4a77      	ldr	r2, [pc, #476]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	6713      	str	r3, [r2, #112]	; 0x70
 8001520:	e00b      	b.n	800153a <HAL_RCC_OscConfig+0x32a>
 8001522:	4b75      	ldr	r3, [pc, #468]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 8001524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001526:	4a74      	ldr	r2, [pc, #464]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 8001528:	f023 0301 	bic.w	r3, r3, #1
 800152c:	6713      	str	r3, [r2, #112]	; 0x70
 800152e:	4b72      	ldr	r3, [pc, #456]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 8001530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001532:	4a71      	ldr	r2, [pc, #452]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 8001534:	f023 0304 	bic.w	r3, r3, #4
 8001538:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d015      	beq.n	800156e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001542:	f7ff fbd9 	bl	8000cf8 <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001548:	e00a      	b.n	8001560 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800154a:	f7ff fbd5 	bl	8000cf8 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	f241 3288 	movw	r2, #5000	; 0x1388
 8001558:	4293      	cmp	r3, r2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e0c5      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001560:	4b65      	ldr	r3, [pc, #404]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 8001562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0ee      	beq.n	800154a <HAL_RCC_OscConfig+0x33a>
 800156c:	e014      	b.n	8001598 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800156e:	f7ff fbc3 	bl	8000cf8 <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001574:	e00a      	b.n	800158c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001576:	f7ff fbbf 	bl	8000cf8 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	f241 3288 	movw	r2, #5000	; 0x1388
 8001584:	4293      	cmp	r3, r2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e0af      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800158c:	4b5a      	ldr	r3, [pc, #360]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 800158e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1ee      	bne.n	8001576 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001598:	7dfb      	ldrb	r3, [r7, #23]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d105      	bne.n	80015aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800159e:	4b56      	ldr	r3, [pc, #344]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	4a55      	ldr	r2, [pc, #340]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 80015a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f000 809b 	beq.w	80016ea <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015b4:	4b50      	ldr	r3, [pc, #320]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f003 030c 	and.w	r3, r3, #12
 80015bc:	2b08      	cmp	r3, #8
 80015be:	d05c      	beq.n	800167a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d141      	bne.n	800164c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c8:	4b4c      	ldr	r3, [pc, #304]	; (80016fc <HAL_RCC_OscConfig+0x4ec>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ce:	f7ff fb93 	bl	8000cf8 <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015d6:	f7ff fb8f 	bl	8000cf8 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e081      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e8:	4b43      	ldr	r3, [pc, #268]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1f0      	bne.n	80015d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	69da      	ldr	r2, [r3, #28]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a1b      	ldr	r3, [r3, #32]
 80015fc:	431a      	orrs	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001602:	019b      	lsls	r3, r3, #6
 8001604:	431a      	orrs	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160a:	085b      	lsrs	r3, r3, #1
 800160c:	3b01      	subs	r3, #1
 800160e:	041b      	lsls	r3, r3, #16
 8001610:	431a      	orrs	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001616:	061b      	lsls	r3, r3, #24
 8001618:	4937      	ldr	r1, [pc, #220]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 800161a:	4313      	orrs	r3, r2
 800161c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800161e:	4b37      	ldr	r3, [pc, #220]	; (80016fc <HAL_RCC_OscConfig+0x4ec>)
 8001620:	2201      	movs	r2, #1
 8001622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001624:	f7ff fb68 	bl	8000cf8 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800162c:	f7ff fb64 	bl	8000cf8 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e056      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800163e:	4b2e      	ldr	r3, [pc, #184]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0f0      	beq.n	800162c <HAL_RCC_OscConfig+0x41c>
 800164a:	e04e      	b.n	80016ea <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800164c:	4b2b      	ldr	r3, [pc, #172]	; (80016fc <HAL_RCC_OscConfig+0x4ec>)
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001652:	f7ff fb51 	bl	8000cf8 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800165a:	f7ff fb4d 	bl	8000cf8 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e03f      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800166c:	4b22      	ldr	r3, [pc, #136]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1f0      	bne.n	800165a <HAL_RCC_OscConfig+0x44a>
 8001678:	e037      	b.n	80016ea <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d101      	bne.n	8001686 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e032      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001686:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <HAL_RCC_OscConfig+0x4e8>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d028      	beq.n	80016e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800169e:	429a      	cmp	r2, r3
 80016a0:	d121      	bne.n	80016e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d11a      	bne.n	80016e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016b0:	68fa      	ldr	r2, [r7, #12]
 80016b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016b6:	4013      	ands	r3, r2
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016bc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016be:	4293      	cmp	r3, r2
 80016c0:	d111      	bne.n	80016e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016cc:	085b      	lsrs	r3, r3, #1
 80016ce:	3b01      	subs	r3, #1
 80016d0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d107      	bne.n	80016e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d001      	beq.n	80016ea <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e000      	b.n	80016ec <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3718      	adds	r7, #24
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40007000 	.word	0x40007000
 80016f8:	40023800 	.word	0x40023800
 80016fc:	42470060 	.word	0x42470060

08001700 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e0cc      	b.n	80018ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001714:	4b68      	ldr	r3, [pc, #416]	; (80018b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0307 	and.w	r3, r3, #7
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	429a      	cmp	r2, r3
 8001720:	d90c      	bls.n	800173c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001722:	4b65      	ldr	r3, [pc, #404]	; (80018b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800172a:	4b63      	ldr	r3, [pc, #396]	; (80018b8 <HAL_RCC_ClockConfig+0x1b8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	429a      	cmp	r2, r3
 8001736:	d001      	beq.n	800173c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e0b8      	b.n	80018ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d020      	beq.n	800178a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0304 	and.w	r3, r3, #4
 8001750:	2b00      	cmp	r3, #0
 8001752:	d005      	beq.n	8001760 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001754:	4b59      	ldr	r3, [pc, #356]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	4a58      	ldr	r2, [pc, #352]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 800175a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800175e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0308 	and.w	r3, r3, #8
 8001768:	2b00      	cmp	r3, #0
 800176a:	d005      	beq.n	8001778 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800176c:	4b53      	ldr	r3, [pc, #332]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	4a52      	ldr	r2, [pc, #328]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 8001772:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001776:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001778:	4b50      	ldr	r3, [pc, #320]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	494d      	ldr	r1, [pc, #308]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	4313      	orrs	r3, r2
 8001788:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	2b00      	cmp	r3, #0
 8001794:	d044      	beq.n	8001820 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d107      	bne.n	80017ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800179e:	4b47      	ldr	r3, [pc, #284]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d119      	bne.n	80017de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e07f      	b.n	80018ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d003      	beq.n	80017be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ba:	2b03      	cmp	r3, #3
 80017bc:	d107      	bne.n	80017ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017be:	4b3f      	ldr	r3, [pc, #252]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d109      	bne.n	80017de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e06f      	b.n	80018ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ce:	4b3b      	ldr	r3, [pc, #236]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e067      	b.n	80018ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017de:	4b37      	ldr	r3, [pc, #220]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f023 0203 	bic.w	r2, r3, #3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	4934      	ldr	r1, [pc, #208]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 80017ec:	4313      	orrs	r3, r2
 80017ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017f0:	f7ff fa82 	bl	8000cf8 <HAL_GetTick>
 80017f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017f6:	e00a      	b.n	800180e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017f8:	f7ff fa7e 	bl	8000cf8 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	f241 3288 	movw	r2, #5000	; 0x1388
 8001806:	4293      	cmp	r3, r2
 8001808:	d901      	bls.n	800180e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e04f      	b.n	80018ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800180e:	4b2b      	ldr	r3, [pc, #172]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f003 020c 	and.w	r2, r3, #12
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	429a      	cmp	r2, r3
 800181e:	d1eb      	bne.n	80017f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001820:	4b25      	ldr	r3, [pc, #148]	; (80018b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0307 	and.w	r3, r3, #7
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	429a      	cmp	r2, r3
 800182c:	d20c      	bcs.n	8001848 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800182e:	4b22      	ldr	r3, [pc, #136]	; (80018b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001836:	4b20      	ldr	r3, [pc, #128]	; (80018b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	429a      	cmp	r2, r3
 8001842:	d001      	beq.n	8001848 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e032      	b.n	80018ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	2b00      	cmp	r3, #0
 8001852:	d008      	beq.n	8001866 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001854:	4b19      	ldr	r3, [pc, #100]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	4916      	ldr	r1, [pc, #88]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 8001862:	4313      	orrs	r3, r2
 8001864:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0308 	and.w	r3, r3, #8
 800186e:	2b00      	cmp	r3, #0
 8001870:	d009      	beq.n	8001886 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001872:	4b12      	ldr	r3, [pc, #72]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	490e      	ldr	r1, [pc, #56]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	4313      	orrs	r3, r2
 8001884:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001886:	f000 f821 	bl	80018cc <HAL_RCC_GetSysClockFreq>
 800188a:	4602      	mov	r2, r0
 800188c:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	091b      	lsrs	r3, r3, #4
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	490a      	ldr	r1, [pc, #40]	; (80018c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001898:	5ccb      	ldrb	r3, [r1, r3]
 800189a:	fa22 f303 	lsr.w	r3, r2, r3
 800189e:	4a09      	ldr	r2, [pc, #36]	; (80018c4 <HAL_RCC_ClockConfig+0x1c4>)
 80018a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018a2:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <HAL_RCC_ClockConfig+0x1c8>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff f8e8 	bl	8000a7c <HAL_InitTick>

  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40023c00 	.word	0x40023c00
 80018bc:	40023800 	.word	0x40023800
 80018c0:	080071c0 	.word	0x080071c0
 80018c4:	20000000 	.word	0x20000000
 80018c8:	20000004 	.word	0x20000004

080018cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018d0:	b084      	sub	sp, #16
 80018d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018d4:	2300      	movs	r3, #0
 80018d6:	607b      	str	r3, [r7, #4]
 80018d8:	2300      	movs	r3, #0
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	2300      	movs	r3, #0
 80018de:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80018e0:	2300      	movs	r3, #0
 80018e2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018e4:	4b67      	ldr	r3, [pc, #412]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 030c 	and.w	r3, r3, #12
 80018ec:	2b08      	cmp	r3, #8
 80018ee:	d00d      	beq.n	800190c <HAL_RCC_GetSysClockFreq+0x40>
 80018f0:	2b08      	cmp	r3, #8
 80018f2:	f200 80bd 	bhi.w	8001a70 <HAL_RCC_GetSysClockFreq+0x1a4>
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d002      	beq.n	8001900 <HAL_RCC_GetSysClockFreq+0x34>
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	d003      	beq.n	8001906 <HAL_RCC_GetSysClockFreq+0x3a>
 80018fe:	e0b7      	b.n	8001a70 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001900:	4b61      	ldr	r3, [pc, #388]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001902:	60bb      	str	r3, [r7, #8]
       break;
 8001904:	e0b7      	b.n	8001a76 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001906:	4b61      	ldr	r3, [pc, #388]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001908:	60bb      	str	r3, [r7, #8]
      break;
 800190a:	e0b4      	b.n	8001a76 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800190c:	4b5d      	ldr	r3, [pc, #372]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001914:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001916:	4b5b      	ldr	r3, [pc, #364]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d04d      	beq.n	80019be <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001922:	4b58      	ldr	r3, [pc, #352]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	099b      	lsrs	r3, r3, #6
 8001928:	461a      	mov	r2, r3
 800192a:	f04f 0300 	mov.w	r3, #0
 800192e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001932:	f04f 0100 	mov.w	r1, #0
 8001936:	ea02 0800 	and.w	r8, r2, r0
 800193a:	ea03 0901 	and.w	r9, r3, r1
 800193e:	4640      	mov	r0, r8
 8001940:	4649      	mov	r1, r9
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	f04f 0300 	mov.w	r3, #0
 800194a:	014b      	lsls	r3, r1, #5
 800194c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001950:	0142      	lsls	r2, r0, #5
 8001952:	4610      	mov	r0, r2
 8001954:	4619      	mov	r1, r3
 8001956:	ebb0 0008 	subs.w	r0, r0, r8
 800195a:	eb61 0109 	sbc.w	r1, r1, r9
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	f04f 0300 	mov.w	r3, #0
 8001966:	018b      	lsls	r3, r1, #6
 8001968:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800196c:	0182      	lsls	r2, r0, #6
 800196e:	1a12      	subs	r2, r2, r0
 8001970:	eb63 0301 	sbc.w	r3, r3, r1
 8001974:	f04f 0000 	mov.w	r0, #0
 8001978:	f04f 0100 	mov.w	r1, #0
 800197c:	00d9      	lsls	r1, r3, #3
 800197e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001982:	00d0      	lsls	r0, r2, #3
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	eb12 0208 	adds.w	r2, r2, r8
 800198c:	eb43 0309 	adc.w	r3, r3, r9
 8001990:	f04f 0000 	mov.w	r0, #0
 8001994:	f04f 0100 	mov.w	r1, #0
 8001998:	0259      	lsls	r1, r3, #9
 800199a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800199e:	0250      	lsls	r0, r2, #9
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	4610      	mov	r0, r2
 80019a6:	4619      	mov	r1, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	461a      	mov	r2, r3
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	f7fe fc60 	bl	8000274 <__aeabi_uldivmod>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	4613      	mov	r3, r2
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	e04a      	b.n	8001a54 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019be:	4b31      	ldr	r3, [pc, #196]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	099b      	lsrs	r3, r3, #6
 80019c4:	461a      	mov	r2, r3
 80019c6:	f04f 0300 	mov.w	r3, #0
 80019ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80019ce:	f04f 0100 	mov.w	r1, #0
 80019d2:	ea02 0400 	and.w	r4, r2, r0
 80019d6:	ea03 0501 	and.w	r5, r3, r1
 80019da:	4620      	mov	r0, r4
 80019dc:	4629      	mov	r1, r5
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	f04f 0300 	mov.w	r3, #0
 80019e6:	014b      	lsls	r3, r1, #5
 80019e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019ec:	0142      	lsls	r2, r0, #5
 80019ee:	4610      	mov	r0, r2
 80019f0:	4619      	mov	r1, r3
 80019f2:	1b00      	subs	r0, r0, r4
 80019f4:	eb61 0105 	sbc.w	r1, r1, r5
 80019f8:	f04f 0200 	mov.w	r2, #0
 80019fc:	f04f 0300 	mov.w	r3, #0
 8001a00:	018b      	lsls	r3, r1, #6
 8001a02:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a06:	0182      	lsls	r2, r0, #6
 8001a08:	1a12      	subs	r2, r2, r0
 8001a0a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a0e:	f04f 0000 	mov.w	r0, #0
 8001a12:	f04f 0100 	mov.w	r1, #0
 8001a16:	00d9      	lsls	r1, r3, #3
 8001a18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a1c:	00d0      	lsls	r0, r2, #3
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	1912      	adds	r2, r2, r4
 8001a24:	eb45 0303 	adc.w	r3, r5, r3
 8001a28:	f04f 0000 	mov.w	r0, #0
 8001a2c:	f04f 0100 	mov.w	r1, #0
 8001a30:	0299      	lsls	r1, r3, #10
 8001a32:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001a36:	0290      	lsls	r0, r2, #10
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	461a      	mov	r2, r3
 8001a44:	f04f 0300 	mov.w	r3, #0
 8001a48:	f7fe fc14 	bl	8000274 <__aeabi_uldivmod>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4613      	mov	r3, r2
 8001a52:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a54:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	0c1b      	lsrs	r3, r3, #16
 8001a5a:	f003 0303 	and.w	r3, r3, #3
 8001a5e:	3301      	adds	r3, #1
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a64:	68fa      	ldr	r2, [r7, #12]
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6c:	60bb      	str	r3, [r7, #8]
      break;
 8001a6e:	e002      	b.n	8001a76 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a70:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001a72:	60bb      	str	r3, [r7, #8]
      break;
 8001a74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a76:	68bb      	ldr	r3, [r7, #8]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a82:	bf00      	nop
 8001a84:	40023800 	.word	0x40023800
 8001a88:	00f42400 	.word	0x00f42400
 8001a8c:	007a1200 	.word	0x007a1200

08001a90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a94:	4b03      	ldr	r3, [pc, #12]	; (8001aa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a96:	681b      	ldr	r3, [r3, #0]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	20000000 	.word	0x20000000

08001aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001aac:	f7ff fff0 	bl	8001a90 <HAL_RCC_GetHCLKFreq>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	0a9b      	lsrs	r3, r3, #10
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	4903      	ldr	r1, [pc, #12]	; (8001acc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001abe:	5ccb      	ldrb	r3, [r1, r3]
 8001ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	080071d0 	.word	0x080071d0

08001ad0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	220f      	movs	r2, #15
 8001ade:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ae0:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <HAL_RCC_GetClockConfig+0x5c>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 0203 	and.w	r2, r3, #3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001aec:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <HAL_RCC_GetClockConfig+0x5c>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001af8:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <HAL_RCC_GetClockConfig+0x5c>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b04:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <HAL_RCC_GetClockConfig+0x5c>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	08db      	lsrs	r3, r3, #3
 8001b0a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b12:	4b07      	ldr	r3, [pc, #28]	; (8001b30 <HAL_RCC_GetClockConfig+0x60>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0207 	and.w	r2, r3, #7
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	601a      	str	r2, [r3, #0]
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40023c00 	.word	0x40023c00

08001b34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e041      	b.n	8001bca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d106      	bne.n	8001b60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 f839 	bl	8001bd2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2202      	movs	r2, #2
 8001b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3304      	adds	r3, #4
 8001b70:	4619      	mov	r1, r3
 8001b72:	4610      	mov	r0, r2
 8001b74:	f000 f9ca 	bl	8001f0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
	...

08001be8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d001      	beq.n	8001c00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e044      	b.n	8001c8a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2202      	movs	r2, #2
 8001c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 0201 	orr.w	r2, r2, #1
 8001c16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a1e      	ldr	r2, [pc, #120]	; (8001c98 <HAL_TIM_Base_Start_IT+0xb0>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d018      	beq.n	8001c54 <HAL_TIM_Base_Start_IT+0x6c>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c2a:	d013      	beq.n	8001c54 <HAL_TIM_Base_Start_IT+0x6c>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a1a      	ldr	r2, [pc, #104]	; (8001c9c <HAL_TIM_Base_Start_IT+0xb4>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d00e      	beq.n	8001c54 <HAL_TIM_Base_Start_IT+0x6c>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a19      	ldr	r2, [pc, #100]	; (8001ca0 <HAL_TIM_Base_Start_IT+0xb8>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d009      	beq.n	8001c54 <HAL_TIM_Base_Start_IT+0x6c>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a17      	ldr	r2, [pc, #92]	; (8001ca4 <HAL_TIM_Base_Start_IT+0xbc>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d004      	beq.n	8001c54 <HAL_TIM_Base_Start_IT+0x6c>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a16      	ldr	r2, [pc, #88]	; (8001ca8 <HAL_TIM_Base_Start_IT+0xc0>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d111      	bne.n	8001c78 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2b06      	cmp	r3, #6
 8001c64:	d010      	beq.n	8001c88 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f042 0201 	orr.w	r2, r2, #1
 8001c74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c76:	e007      	b.n	8001c88 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f042 0201 	orr.w	r2, r2, #1
 8001c86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3714      	adds	r7, #20
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	40010000 	.word	0x40010000
 8001c9c:	40000400 	.word	0x40000400
 8001ca0:	40000800 	.word	0x40000800
 8001ca4:	40000c00 	.word	0x40000c00
 8001ca8:	40014000 	.word	0x40014000

08001cac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d122      	bne.n	8001d08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d11b      	bne.n	8001d08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f06f 0202 	mvn.w	r2, #2
 8001cd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f8ee 	bl	8001ed0 <HAL_TIM_IC_CaptureCallback>
 8001cf4:	e005      	b.n	8001d02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 f8e0 	bl	8001ebc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 f8f1 	bl	8001ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	d122      	bne.n	8001d5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	2b04      	cmp	r3, #4
 8001d22:	d11b      	bne.n	8001d5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f06f 0204 	mvn.w	r2, #4
 8001d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2202      	movs	r2, #2
 8001d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f8c4 	bl	8001ed0 <HAL_TIM_IC_CaptureCallback>
 8001d48:	e005      	b.n	8001d56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 f8b6 	bl	8001ebc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 f8c7 	bl	8001ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b08      	cmp	r3, #8
 8001d68:	d122      	bne.n	8001db0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f003 0308 	and.w	r3, r3, #8
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d11b      	bne.n	8001db0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f06f 0208 	mvn.w	r2, #8
 8001d80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2204      	movs	r2, #4
 8001d86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 f89a 	bl	8001ed0 <HAL_TIM_IC_CaptureCallback>
 8001d9c:	e005      	b.n	8001daa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f88c 	bl	8001ebc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 f89d 	bl	8001ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	f003 0310 	and.w	r3, r3, #16
 8001dba:	2b10      	cmp	r3, #16
 8001dbc:	d122      	bne.n	8001e04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	f003 0310 	and.w	r3, r3, #16
 8001dc8:	2b10      	cmp	r3, #16
 8001dca:	d11b      	bne.n	8001e04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f06f 0210 	mvn.w	r2, #16
 8001dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2208      	movs	r2, #8
 8001dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f870 	bl	8001ed0 <HAL_TIM_IC_CaptureCallback>
 8001df0:	e005      	b.n	8001dfe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 f862 	bl	8001ebc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 f873 	bl	8001ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d10e      	bne.n	8001e30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d107      	bne.n	8001e30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f06f 0201 	mvn.w	r2, #1
 8001e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7fe fde6 	bl	80009fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e3a:	2b80      	cmp	r3, #128	; 0x80
 8001e3c:	d10e      	bne.n	8001e5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e48:	2b80      	cmp	r3, #128	; 0x80
 8001e4a:	d107      	bne.n	8001e5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 f8e2 	bl	8002020 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e66:	2b40      	cmp	r3, #64	; 0x40
 8001e68:	d10e      	bne.n	8001e88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e74:	2b40      	cmp	r3, #64	; 0x40
 8001e76:	d107      	bne.n	8001e88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f838 	bl	8001ef8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	f003 0320 	and.w	r3, r3, #32
 8001e92:	2b20      	cmp	r3, #32
 8001e94:	d10e      	bne.n	8001eb4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	f003 0320 	and.w	r3, r3, #32
 8001ea0:	2b20      	cmp	r3, #32
 8001ea2:	d107      	bne.n	8001eb4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f06f 0220 	mvn.w	r2, #32
 8001eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f8ac 	bl	800200c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001eb4:	bf00      	nop
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a34      	ldr	r2, [pc, #208]	; (8001ff0 <TIM_Base_SetConfig+0xe4>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d00f      	beq.n	8001f44 <TIM_Base_SetConfig+0x38>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f2a:	d00b      	beq.n	8001f44 <TIM_Base_SetConfig+0x38>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a31      	ldr	r2, [pc, #196]	; (8001ff4 <TIM_Base_SetConfig+0xe8>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d007      	beq.n	8001f44 <TIM_Base_SetConfig+0x38>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a30      	ldr	r2, [pc, #192]	; (8001ff8 <TIM_Base_SetConfig+0xec>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d003      	beq.n	8001f44 <TIM_Base_SetConfig+0x38>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a2f      	ldr	r2, [pc, #188]	; (8001ffc <TIM_Base_SetConfig+0xf0>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d108      	bne.n	8001f56 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	68fa      	ldr	r2, [r7, #12]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a25      	ldr	r2, [pc, #148]	; (8001ff0 <TIM_Base_SetConfig+0xe4>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d01b      	beq.n	8001f96 <TIM_Base_SetConfig+0x8a>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f64:	d017      	beq.n	8001f96 <TIM_Base_SetConfig+0x8a>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a22      	ldr	r2, [pc, #136]	; (8001ff4 <TIM_Base_SetConfig+0xe8>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d013      	beq.n	8001f96 <TIM_Base_SetConfig+0x8a>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a21      	ldr	r2, [pc, #132]	; (8001ff8 <TIM_Base_SetConfig+0xec>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d00f      	beq.n	8001f96 <TIM_Base_SetConfig+0x8a>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a20      	ldr	r2, [pc, #128]	; (8001ffc <TIM_Base_SetConfig+0xf0>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d00b      	beq.n	8001f96 <TIM_Base_SetConfig+0x8a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a1f      	ldr	r2, [pc, #124]	; (8002000 <TIM_Base_SetConfig+0xf4>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d007      	beq.n	8001f96 <TIM_Base_SetConfig+0x8a>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a1e      	ldr	r2, [pc, #120]	; (8002004 <TIM_Base_SetConfig+0xf8>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d003      	beq.n	8001f96 <TIM_Base_SetConfig+0x8a>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a1d      	ldr	r2, [pc, #116]	; (8002008 <TIM_Base_SetConfig+0xfc>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d108      	bne.n	8001fa8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a08      	ldr	r2, [pc, #32]	; (8001ff0 <TIM_Base_SetConfig+0xe4>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d103      	bne.n	8001fdc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	691a      	ldr	r2, [r3, #16]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	615a      	str	r2, [r3, #20]
}
 8001fe2:	bf00      	nop
 8001fe4:	3714      	adds	r7, #20
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	40010000 	.word	0x40010000
 8001ff4:	40000400 	.word	0x40000400
 8001ff8:	40000800 	.word	0x40000800
 8001ffc:	40000c00 	.word	0x40000c00
 8002000:	40014000 	.word	0x40014000
 8002004:	40014400 	.word	0x40014400
 8002008:	40014800 	.word	0x40014800

0800200c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f103 0208 	add.w	r2, r3, #8
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f04f 32ff 	mov.w	r2, #4294967295
 800204c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f103 0208 	add.w	r2, r3, #8
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f103 0208 	add.w	r2, r3, #8
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800208e:	b480      	push	{r7}
 8002090:	b085      	sub	sp, #20
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
 8002096:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	1c5a      	adds	r2, r3, #1
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	601a      	str	r2, [r3, #0]
}
 80020ca:	bf00      	nop
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80020d6:	b480      	push	{r7}
 80020d8:	b085      	sub	sp, #20
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ec:	d103      	bne.n	80020f6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	e00c      	b.n	8002110 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	3308      	adds	r3, #8
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	e002      	b.n	8002104 <vListInsert+0x2e>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	429a      	cmp	r2, r3
 800210e:	d2f6      	bcs.n	80020fe <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	1c5a      	adds	r2, r3, #1
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	601a      	str	r2, [r3, #0]
}
 800213c:	bf00      	nop
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6892      	ldr	r2, [r2, #8]
 800215e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	6852      	ldr	r2, [r2, #4]
 8002168:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	429a      	cmp	r2, r3
 8002172:	d103      	bne.n	800217c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	1e5a      	subs	r2, r3, #1
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d10a      	bne.n	80021c6 <xQueueGenericReset+0x2a>
        __asm volatile
 80021b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021b4:	f383 8811 	msr	BASEPRI, r3
 80021b8:	f3bf 8f6f 	isb	sy
 80021bc:	f3bf 8f4f 	dsb	sy
 80021c0:	60bb      	str	r3, [r7, #8]
    }
 80021c2:	bf00      	nop
 80021c4:	e7fe      	b.n	80021c4 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80021c6:	f002 f8c5 	bl	8004354 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d2:	68f9      	ldr	r1, [r7, #12]
 80021d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80021d6:	fb01 f303 	mul.w	r3, r1, r3
 80021da:	441a      	add	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f6:	3b01      	subs	r3, #1
 80021f8:	68f9      	ldr	r1, [r7, #12]
 80021fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80021fc:	fb01 f303 	mul.w	r3, r1, r3
 8002200:	441a      	add	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	22ff      	movs	r2, #255	; 0xff
 800220a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	22ff      	movs	r2, #255	; 0xff
 8002212:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d114      	bne.n	8002246 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d01a      	beq.n	800225a <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	3310      	adds	r3, #16
 8002228:	4618      	mov	r0, r3
 800222a:	f001 f91f 	bl	800346c <xTaskRemoveFromEventList>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d012      	beq.n	800225a <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002234:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <xQueueGenericReset+0xcc>)
 8002236:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	f3bf 8f4f 	dsb	sy
 8002240:	f3bf 8f6f 	isb	sy
 8002244:	e009      	b.n	800225a <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	3310      	adds	r3, #16
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff fef2 	bl	8002034 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	3324      	adds	r3, #36	; 0x24
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff feed 	bl	8002034 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800225a:	f002 f8ab 	bl	80043b4 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800225e:	2301      	movs	r3, #1
}
 8002260:	4618      	mov	r0, r3
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	e000ed04 	.word	0xe000ed04

0800226c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800226c:	b580      	push	{r7, lr}
 800226e:	b08c      	sub	sp, #48	; 0x30
 8002270:	af02      	add	r7, sp, #8
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	4613      	mov	r3, r2
 8002278:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10a      	bne.n	8002296 <xQueueGenericCreate+0x2a>
        __asm volatile
 8002280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002284:	f383 8811 	msr	BASEPRI, r3
 8002288:	f3bf 8f6f 	isb	sy
 800228c:	f3bf 8f4f 	dsb	sy
 8002290:	61bb      	str	r3, [r7, #24]
    }
 8002292:	bf00      	nop
 8002294:	e7fe      	b.n	8002294 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	68ba      	ldr	r2, [r7, #8]
 800229a:	fb02 f303 	mul.w	r3, r2, r3
 800229e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d006      	beq.n	80022b4 <xQueueGenericCreate+0x48>
 80022a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d101      	bne.n	80022b8 <xQueueGenericCreate+0x4c>
 80022b4:	2301      	movs	r3, #1
 80022b6:	e000      	b.n	80022ba <xQueueGenericCreate+0x4e>
 80022b8:	2300      	movs	r3, #0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10a      	bne.n	80022d4 <xQueueGenericCreate+0x68>
        __asm volatile
 80022be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022c2:	f383 8811 	msr	BASEPRI, r3
 80022c6:	f3bf 8f6f 	isb	sy
 80022ca:	f3bf 8f4f 	dsb	sy
 80022ce:	617b      	str	r3, [r7, #20]
    }
 80022d0:	bf00      	nop
 80022d2:	e7fe      	b.n	80022d2 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80022da:	d90a      	bls.n	80022f2 <xQueueGenericCreate+0x86>
        __asm volatile
 80022dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022e0:	f383 8811 	msr	BASEPRI, r3
 80022e4:	f3bf 8f6f 	isb	sy
 80022e8:	f3bf 8f4f 	dsb	sy
 80022ec:	613b      	str	r3, [r7, #16]
    }
 80022ee:	bf00      	nop
 80022f0:	e7fe      	b.n	80022f0 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80022f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f4:	3350      	adds	r3, #80	; 0x50
 80022f6:	4618      	mov	r0, r3
 80022f8:	f002 f958 	bl	80045ac <pvPortMalloc>
 80022fc:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80022fe:	6a3b      	ldr	r3, [r7, #32]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00d      	beq.n	8002320 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002304:	6a3b      	ldr	r3, [r7, #32]
 8002306:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	3350      	adds	r3, #80	; 0x50
 800230c:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800230e:	79fa      	ldrb	r2, [r7, #7]
 8002310:	6a3b      	ldr	r3, [r7, #32]
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	4613      	mov	r3, r2
 8002316:	69fa      	ldr	r2, [r7, #28]
 8002318:	68b9      	ldr	r1, [r7, #8]
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f000 f805 	bl	800232a <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002320:	6a3b      	ldr	r3, [r7, #32]
    }
 8002322:	4618      	mov	r0, r3
 8002324:	3728      	adds	r7, #40	; 0x28
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b084      	sub	sp, #16
 800232e:	af00      	add	r7, sp, #0
 8002330:	60f8      	str	r0, [r7, #12]
 8002332:	60b9      	str	r1, [r7, #8]
 8002334:	607a      	str	r2, [r7, #4]
 8002336:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d103      	bne.n	8002346 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	e002      	b.n	800234c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002358:	2101      	movs	r1, #1
 800235a:	69b8      	ldr	r0, [r7, #24]
 800235c:	f7ff ff1e 	bl	800219c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	78fa      	ldrb	r2, [r7, #3]
 8002364:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002368:	78fb      	ldrb	r3, [r7, #3]
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	68f9      	ldr	r1, [r7, #12]
 800236e:	2073      	movs	r0, #115	; 0x73
 8002370:	f003 fa88 	bl	8005884 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002374:	bf00      	nop
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b090      	sub	sp, #64	; 0x40
 8002380:	af02      	add	r7, sp, #8
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
 8002388:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800238a:	2300      	movs	r3, #0
 800238c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10a      	bne.n	80023ae <xQueueGenericSend+0x32>
        __asm volatile
 8002398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800239c:	f383 8811 	msr	BASEPRI, r3
 80023a0:	f3bf 8f6f 	isb	sy
 80023a4:	f3bf 8f4f 	dsb	sy
 80023a8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80023aa:	bf00      	nop
 80023ac:	e7fe      	b.n	80023ac <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d103      	bne.n	80023bc <xQueueGenericSend+0x40>
 80023b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <xQueueGenericSend+0x44>
 80023bc:	2301      	movs	r3, #1
 80023be:	e000      	b.n	80023c2 <xQueueGenericSend+0x46>
 80023c0:	2300      	movs	r3, #0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10a      	bne.n	80023dc <xQueueGenericSend+0x60>
        __asm volatile
 80023c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ca:	f383 8811 	msr	BASEPRI, r3
 80023ce:	f3bf 8f6f 	isb	sy
 80023d2:	f3bf 8f4f 	dsb	sy
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80023d8:	bf00      	nop
 80023da:	e7fe      	b.n	80023da <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d103      	bne.n	80023ea <xQueueGenericSend+0x6e>
 80023e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d101      	bne.n	80023ee <xQueueGenericSend+0x72>
 80023ea:	2301      	movs	r3, #1
 80023ec:	e000      	b.n	80023f0 <xQueueGenericSend+0x74>
 80023ee:	2300      	movs	r3, #0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10a      	bne.n	800240a <xQueueGenericSend+0x8e>
        __asm volatile
 80023f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f8:	f383 8811 	msr	BASEPRI, r3
 80023fc:	f3bf 8f6f 	isb	sy
 8002400:	f3bf 8f4f 	dsb	sy
 8002404:	623b      	str	r3, [r7, #32]
    }
 8002406:	bf00      	nop
 8002408:	e7fe      	b.n	8002408 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800240a:	f001 f9cf 	bl	80037ac <xTaskGetSchedulerState>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d102      	bne.n	800241a <xQueueGenericSend+0x9e>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <xQueueGenericSend+0xa2>
 800241a:	2301      	movs	r3, #1
 800241c:	e000      	b.n	8002420 <xQueueGenericSend+0xa4>
 800241e:	2300      	movs	r3, #0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d10a      	bne.n	800243a <xQueueGenericSend+0xbe>
        __asm volatile
 8002424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002428:	f383 8811 	msr	BASEPRI, r3
 800242c:	f3bf 8f6f 	isb	sy
 8002430:	f3bf 8f4f 	dsb	sy
 8002434:	61fb      	str	r3, [r7, #28]
    }
 8002436:	bf00      	nop
 8002438:	e7fe      	b.n	8002438 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800243a:	f001 ff8b 	bl	8004354 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800243e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002440:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002446:	429a      	cmp	r2, r3
 8002448:	d302      	bcc.n	8002450 <xQueueGenericSend+0xd4>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	2b02      	cmp	r3, #2
 800244e:	d136      	bne.n	80024be <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8002450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002452:	4618      	mov	r0, r3
 8002454:	f003 ffa2 	bl	800639c <SEGGER_SYSVIEW_ShrinkId>
 8002458:	68ba      	ldr	r2, [r7, #8]
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	460b      	mov	r3, r1
 8002462:	4601      	mov	r1, r0
 8002464:	205a      	movs	r0, #90	; 0x5a
 8002466:	f003 fa83 	bl	8005970 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	68b9      	ldr	r1, [r7, #8]
 800246e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002470:	f000 fa78 	bl	8002964 <prvCopyDataToQueue>
 8002474:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247a:	2b00      	cmp	r3, #0
 800247c:	d010      	beq.n	80024a0 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800247e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002480:	3324      	adds	r3, #36	; 0x24
 8002482:	4618      	mov	r0, r3
 8002484:	f000 fff2 	bl	800346c <xTaskRemoveFromEventList>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d013      	beq.n	80024b6 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800248e:	4b4d      	ldr	r3, [pc, #308]	; (80025c4 <xQueueGenericSend+0x248>)
 8002490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	f3bf 8f4f 	dsb	sy
 800249a:	f3bf 8f6f 	isb	sy
 800249e:	e00a      	b.n	80024b6 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80024a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d007      	beq.n	80024b6 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80024a6:	4b47      	ldr	r3, [pc, #284]	; (80025c4 <xQueueGenericSend+0x248>)
 80024a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	f3bf 8f4f 	dsb	sy
 80024b2:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80024b6:	f001 ff7d 	bl	80043b4 <vPortExitCritical>
                return pdPASS;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e07d      	b.n	80025ba <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d110      	bne.n	80024e6 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80024c4:	f001 ff76 	bl	80043b4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80024c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ca:	4618      	mov	r0, r3
 80024cc:	f003 ff66 	bl	800639c <SEGGER_SYSVIEW_ShrinkId>
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	460b      	mov	r3, r1
 80024da:	4601      	mov	r1, r0
 80024dc:	205a      	movs	r0, #90	; 0x5a
 80024de:	f003 fa47 	bl	8005970 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	e069      	b.n	80025ba <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 80024e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d106      	bne.n	80024fa <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80024ec:	f107 0314 	add.w	r3, r7, #20
 80024f0:	4618      	mov	r0, r3
 80024f2:	f001 f821 	bl	8003538 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80024f6:	2301      	movs	r3, #1
 80024f8:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80024fa:	f001 ff5b 	bl	80043b4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80024fe:	f000 fd6d 	bl	8002fdc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002502:	f001 ff27 	bl	8004354 <vPortEnterCritical>
 8002506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002508:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800250c:	b25b      	sxtb	r3, r3
 800250e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002512:	d103      	bne.n	800251c <xQueueGenericSend+0x1a0>
 8002514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002516:	2200      	movs	r2, #0
 8002518:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800251c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002522:	b25b      	sxtb	r3, r3
 8002524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002528:	d103      	bne.n	8002532 <xQueueGenericSend+0x1b6>
 800252a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002532:	f001 ff3f 	bl	80043b4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002536:	1d3a      	adds	r2, r7, #4
 8002538:	f107 0314 	add.w	r3, r7, #20
 800253c:	4611      	mov	r1, r2
 800253e:	4618      	mov	r0, r3
 8002540:	f001 f810 	bl	8003564 <xTaskCheckForTimeOut>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d124      	bne.n	8002594 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800254a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800254c:	f000 fb02 	bl	8002b54 <prvIsQueueFull>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d018      	beq.n	8002588 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002558:	3310      	adds	r3, #16
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	4611      	mov	r1, r2
 800255e:	4618      	mov	r0, r3
 8002560:	f000 ff32 	bl	80033c8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002564:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002566:	f000 fa8d 	bl	8002a84 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800256a:	f000 fd45 	bl	8002ff8 <xTaskResumeAll>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	f47f af62 	bne.w	800243a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002576:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <xQueueGenericSend+0x248>)
 8002578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	f3bf 8f4f 	dsb	sy
 8002582:	f3bf 8f6f 	isb	sy
 8002586:	e758      	b.n	800243a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002588:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800258a:	f000 fa7b 	bl	8002a84 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800258e:	f000 fd33 	bl	8002ff8 <xTaskResumeAll>
 8002592:	e752      	b.n	800243a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002594:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002596:	f000 fa75 	bl	8002a84 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800259a:	f000 fd2d 	bl	8002ff8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 800259e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a0:	4618      	mov	r0, r3
 80025a2:	f003 fefb 	bl	800639c <SEGGER_SYSVIEW_ShrinkId>
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	6879      	ldr	r1, [r7, #4]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	460b      	mov	r3, r1
 80025b0:	4601      	mov	r1, r0
 80025b2:	205a      	movs	r0, #90	; 0x5a
 80025b4:	f003 f9dc 	bl	8005970 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80025b8:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3738      	adds	r7, #56	; 0x38
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	e000ed04 	.word	0xe000ed04

080025c8 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b090      	sub	sp, #64	; 0x40
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
 80025d4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80025da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10a      	bne.n	80025f6 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80025e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e4:	f383 8811 	msr	BASEPRI, r3
 80025e8:	f3bf 8f6f 	isb	sy
 80025ec:	f3bf 8f4f 	dsb	sy
 80025f0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80025f2:	bf00      	nop
 80025f4:	e7fe      	b.n	80025f4 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d103      	bne.n	8002604 <xQueueGenericSendFromISR+0x3c>
 80025fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <xQueueGenericSendFromISR+0x40>
 8002604:	2301      	movs	r3, #1
 8002606:	e000      	b.n	800260a <xQueueGenericSendFromISR+0x42>
 8002608:	2300      	movs	r3, #0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10a      	bne.n	8002624 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800260e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002612:	f383 8811 	msr	BASEPRI, r3
 8002616:	f3bf 8f6f 	isb	sy
 800261a:	f3bf 8f4f 	dsb	sy
 800261e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002620:	bf00      	nop
 8002622:	e7fe      	b.n	8002622 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	2b02      	cmp	r3, #2
 8002628:	d103      	bne.n	8002632 <xQueueGenericSendFromISR+0x6a>
 800262a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800262c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262e:	2b01      	cmp	r3, #1
 8002630:	d101      	bne.n	8002636 <xQueueGenericSendFromISR+0x6e>
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <xQueueGenericSendFromISR+0x70>
 8002636:	2300      	movs	r3, #0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d10a      	bne.n	8002652 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 800263c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002640:	f383 8811 	msr	BASEPRI, r3
 8002644:	f3bf 8f6f 	isb	sy
 8002648:	f3bf 8f4f 	dsb	sy
 800264c:	623b      	str	r3, [r7, #32]
    }
 800264e:	bf00      	nop
 8002650:	e7fe      	b.n	8002650 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002652:	f001 ff6b 	bl	800452c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002656:	f3ef 8211 	mrs	r2, BASEPRI
 800265a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800265e:	f383 8811 	msr	BASEPRI, r3
 8002662:	f3bf 8f6f 	isb	sy
 8002666:	f3bf 8f4f 	dsb	sy
 800266a:	61fa      	str	r2, [r7, #28]
 800266c:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800266e:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002670:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002674:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267a:	429a      	cmp	r2, r3
 800267c:	d302      	bcc.n	8002684 <xQueueGenericSendFromISR+0xbc>
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	2b02      	cmp	r3, #2
 8002682:	d148      	bne.n	8002716 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002686:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800268a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800268e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002692:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002696:	4618      	mov	r0, r3
 8002698:	f003 fe80 	bl	800639c <SEGGER_SYSVIEW_ShrinkId>
 800269c:	4601      	mov	r1, r0
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	461a      	mov	r2, r3
 80026a2:	2060      	movs	r0, #96	; 0x60
 80026a4:	f003 f894 	bl	80057d0 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	68b9      	ldr	r1, [r7, #8]
 80026ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80026ae:	f000 f959 	bl	8002964 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80026b2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80026b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ba:	d112      	bne.n	80026e2 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d025      	beq.n	8002710 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c6:	3324      	adds	r3, #36	; 0x24
 80026c8:	4618      	mov	r0, r3
 80026ca:	f000 fecf 	bl	800346c <xTaskRemoveFromEventList>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d01d      	beq.n	8002710 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d01a      	beq.n	8002710 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	e016      	b.n	8002710 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80026e2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80026e6:	2b7f      	cmp	r3, #127	; 0x7f
 80026e8:	d10a      	bne.n	8002700 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 80026ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ee:	f383 8811 	msr	BASEPRI, r3
 80026f2:	f3bf 8f6f 	isb	sy
 80026f6:	f3bf 8f4f 	dsb	sy
 80026fa:	617b      	str	r3, [r7, #20]
    }
 80026fc:	bf00      	nop
 80026fe:	e7fe      	b.n	80026fe <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002700:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002704:	3301      	adds	r3, #1
 8002706:	b2db      	uxtb	r3, r3
 8002708:	b25a      	sxtb	r2, r3
 800270a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002710:	2301      	movs	r3, #1
 8002712:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002714:	e00b      	b.n	800272e <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002718:	4618      	mov	r0, r3
 800271a:	f003 fe3f 	bl	800639c <SEGGER_SYSVIEW_ShrinkId>
 800271e:	4601      	mov	r1, r0
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	461a      	mov	r2, r3
 8002724:	2060      	movs	r0, #96	; 0x60
 8002726:	f003 f853 	bl	80057d0 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800272a:	2300      	movs	r3, #0
 800272c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800272e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002730:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002738:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800273a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800273c:	4618      	mov	r0, r3
 800273e:	3740      	adds	r7, #64	; 0x40
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002744:	b590      	push	{r4, r7, lr}
 8002746:	b08f      	sub	sp, #60	; 0x3c
 8002748:	af02      	add	r7, sp, #8
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002750:	2300      	movs	r3, #0
 8002752:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10a      	bne.n	8002774 <xQueueReceive+0x30>
        __asm volatile
 800275e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002762:	f383 8811 	msr	BASEPRI, r3
 8002766:	f3bf 8f6f 	isb	sy
 800276a:	f3bf 8f4f 	dsb	sy
 800276e:	623b      	str	r3, [r7, #32]
    }
 8002770:	bf00      	nop
 8002772:	e7fe      	b.n	8002772 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d103      	bne.n	8002782 <xQueueReceive+0x3e>
 800277a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <xQueueReceive+0x42>
 8002782:	2301      	movs	r3, #1
 8002784:	e000      	b.n	8002788 <xQueueReceive+0x44>
 8002786:	2300      	movs	r3, #0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10a      	bne.n	80027a2 <xQueueReceive+0x5e>
        __asm volatile
 800278c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002790:	f383 8811 	msr	BASEPRI, r3
 8002794:	f3bf 8f6f 	isb	sy
 8002798:	f3bf 8f4f 	dsb	sy
 800279c:	61fb      	str	r3, [r7, #28]
    }
 800279e:	bf00      	nop
 80027a0:	e7fe      	b.n	80027a0 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027a2:	f001 f803 	bl	80037ac <xTaskGetSchedulerState>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d102      	bne.n	80027b2 <xQueueReceive+0x6e>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <xQueueReceive+0x72>
 80027b2:	2301      	movs	r3, #1
 80027b4:	e000      	b.n	80027b8 <xQueueReceive+0x74>
 80027b6:	2300      	movs	r3, #0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d10a      	bne.n	80027d2 <xQueueReceive+0x8e>
        __asm volatile
 80027bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c0:	f383 8811 	msr	BASEPRI, r3
 80027c4:	f3bf 8f6f 	isb	sy
 80027c8:	f3bf 8f4f 	dsb	sy
 80027cc:	61bb      	str	r3, [r7, #24]
    }
 80027ce:	bf00      	nop
 80027d0:	e7fe      	b.n	80027d0 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80027d2:	f001 fdbf 	bl	8004354 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027da:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d02f      	beq.n	8002842 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80027e2:	68b9      	ldr	r1, [r7, #8]
 80027e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027e6:	f000 f927 	bl	8002a38 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80027ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ec:	4618      	mov	r0, r3
 80027ee:	f003 fdd5 	bl	800639c <SEGGER_SYSVIEW_ShrinkId>
 80027f2:	4604      	mov	r4, r0
 80027f4:	2000      	movs	r0, #0
 80027f6:	f003 fdd1 	bl	800639c <SEGGER_SYSVIEW_ShrinkId>
 80027fa:	4602      	mov	r2, r0
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2101      	movs	r1, #1
 8002800:	9100      	str	r1, [sp, #0]
 8002802:	4621      	mov	r1, r4
 8002804:	205c      	movs	r0, #92	; 0x5c
 8002806:	f003 f8b3 	bl	8005970 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	1e5a      	subs	r2, r3, #1
 800280e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002810:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00f      	beq.n	800283a <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800281a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281c:	3310      	adds	r3, #16
 800281e:	4618      	mov	r0, r3
 8002820:	f000 fe24 	bl	800346c <xTaskRemoveFromEventList>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d007      	beq.n	800283a <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800282a:	4b4d      	ldr	r3, [pc, #308]	; (8002960 <xQueueReceive+0x21c>)
 800282c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	f3bf 8f4f 	dsb	sy
 8002836:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800283a:	f001 fdbb 	bl	80043b4 <vPortExitCritical>
                return pdPASS;
 800283e:	2301      	movs	r3, #1
 8002840:	e08a      	b.n	8002958 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d113      	bne.n	8002870 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002848:	f001 fdb4 	bl	80043b4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800284c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800284e:	4618      	mov	r0, r3
 8002850:	f003 fda4 	bl	800639c <SEGGER_SYSVIEW_ShrinkId>
 8002854:	4604      	mov	r4, r0
 8002856:	2000      	movs	r0, #0
 8002858:	f003 fda0 	bl	800639c <SEGGER_SYSVIEW_ShrinkId>
 800285c:	4602      	mov	r2, r0
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2101      	movs	r1, #1
 8002862:	9100      	str	r1, [sp, #0]
 8002864:	4621      	mov	r1, r4
 8002866:	205c      	movs	r0, #92	; 0x5c
 8002868:	f003 f882 	bl	8005970 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800286c:	2300      	movs	r3, #0
 800286e:	e073      	b.n	8002958 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002872:	2b00      	cmp	r3, #0
 8002874:	d106      	bne.n	8002884 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002876:	f107 0310 	add.w	r3, r7, #16
 800287a:	4618      	mov	r0, r3
 800287c:	f000 fe5c 	bl	8003538 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002880:	2301      	movs	r3, #1
 8002882:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002884:	f001 fd96 	bl	80043b4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002888:	f000 fba8 	bl	8002fdc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800288c:	f001 fd62 	bl	8004354 <vPortEnterCritical>
 8002890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002892:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002896:	b25b      	sxtb	r3, r3
 8002898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800289c:	d103      	bne.n	80028a6 <xQueueReceive+0x162>
 800289e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028ac:	b25b      	sxtb	r3, r3
 80028ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b2:	d103      	bne.n	80028bc <xQueueReceive+0x178>
 80028b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028bc:	f001 fd7a 	bl	80043b4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028c0:	1d3a      	adds	r2, r7, #4
 80028c2:	f107 0310 	add.w	r3, r7, #16
 80028c6:	4611      	mov	r1, r2
 80028c8:	4618      	mov	r0, r3
 80028ca:	f000 fe4b 	bl	8003564 <xTaskCheckForTimeOut>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d124      	bne.n	800291e <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028d6:	f000 f927 	bl	8002b28 <prvIsQueueEmpty>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d018      	beq.n	8002912 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80028e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e2:	3324      	adds	r3, #36	; 0x24
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	4611      	mov	r1, r2
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 fd6d 	bl	80033c8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80028ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028f0:	f000 f8c8 	bl	8002a84 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80028f4:	f000 fb80 	bl	8002ff8 <xTaskResumeAll>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f47f af69 	bne.w	80027d2 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002900:	4b17      	ldr	r3, [pc, #92]	; (8002960 <xQueueReceive+0x21c>)
 8002902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	f3bf 8f4f 	dsb	sy
 800290c:	f3bf 8f6f 	isb	sy
 8002910:	e75f      	b.n	80027d2 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002912:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002914:	f000 f8b6 	bl	8002a84 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002918:	f000 fb6e 	bl	8002ff8 <xTaskResumeAll>
 800291c:	e759      	b.n	80027d2 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800291e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002920:	f000 f8b0 	bl	8002a84 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002924:	f000 fb68 	bl	8002ff8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002928:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800292a:	f000 f8fd 	bl	8002b28 <prvIsQueueEmpty>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	f43f af4e 	beq.w	80027d2 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002938:	4618      	mov	r0, r3
 800293a:	f003 fd2f 	bl	800639c <SEGGER_SYSVIEW_ShrinkId>
 800293e:	4604      	mov	r4, r0
 8002940:	2000      	movs	r0, #0
 8002942:	f003 fd2b 	bl	800639c <SEGGER_SYSVIEW_ShrinkId>
 8002946:	4602      	mov	r2, r0
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2101      	movs	r1, #1
 800294c:	9100      	str	r1, [sp, #0]
 800294e:	4621      	mov	r1, r4
 8002950:	205c      	movs	r0, #92	; 0x5c
 8002952:	f003 f80d 	bl	8005970 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002956:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002958:	4618      	mov	r0, r3
 800295a:	3734      	adds	r7, #52	; 0x34
 800295c:	46bd      	mov	sp, r7
 800295e:	bd90      	pop	{r4, r7, pc}
 8002960:	e000ed04 	.word	0xe000ed04

08002964 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002978:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10d      	bne.n	800299e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d14d      	bne.n	8002a26 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	4618      	mov	r0, r3
 8002990:	f000 ff2a 	bl	80037e8 <xTaskPriorityDisinherit>
 8002994:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	609a      	str	r2, [r3, #8]
 800299c:	e043      	b.n	8002a26 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d119      	bne.n	80029d8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6858      	ldr	r0, [r3, #4]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	461a      	mov	r2, r3
 80029ae:	68b9      	ldr	r1, [r7, #8]
 80029b0:	f003 fe80 	bl	80066b4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	441a      	add	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d32b      	bcc.n	8002a26 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	605a      	str	r2, [r3, #4]
 80029d6:	e026      	b.n	8002a26 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	68d8      	ldr	r0, [r3, #12]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e0:	461a      	mov	r2, r3
 80029e2:	68b9      	ldr	r1, [r7, #8]
 80029e4:	f003 fe66 	bl	80066b4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	68da      	ldr	r2, [r3, #12]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f0:	425b      	negs	r3, r3
 80029f2:	441a      	add	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d207      	bcs.n	8002a14 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0c:	425b      	negs	r3, r3
 8002a0e:	441a      	add	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d105      	bne.n	8002a26 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d002      	beq.n	8002a26 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	3b01      	subs	r3, #1
 8002a24:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1c5a      	adds	r2, r3, #1
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002a2e:	697b      	ldr	r3, [r7, #20]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3718      	adds	r7, #24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d018      	beq.n	8002a7c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68da      	ldr	r2, [r3, #12]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	441a      	add	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68da      	ldr	r2, [r3, #12]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d303      	bcc.n	8002a6c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68d9      	ldr	r1, [r3, #12]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a74:	461a      	mov	r2, r3
 8002a76:	6838      	ldr	r0, [r7, #0]
 8002a78:	f003 fe1c 	bl	80066b4 <memcpy>
    }
}
 8002a7c:	bf00      	nop
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002a8c:	f001 fc62 	bl	8004354 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a96:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a98:	e011      	b.n	8002abe <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d012      	beq.n	8002ac8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3324      	adds	r3, #36	; 0x24
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 fce0 	bl	800346c <xTaskRemoveFromEventList>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002ab2:	f000 fdbd 	bl	8003630 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002ab6:	7bfb      	ldrb	r3, [r7, #15]
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	dce9      	bgt.n	8002a9a <prvUnlockQueue+0x16>
 8002ac6:	e000      	b.n	8002aca <prvUnlockQueue+0x46>
                        break;
 8002ac8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	22ff      	movs	r2, #255	; 0xff
 8002ace:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002ad2:	f001 fc6f 	bl	80043b4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002ad6:	f001 fc3d 	bl	8004354 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ae0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ae2:	e011      	b.n	8002b08 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d012      	beq.n	8002b12 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3310      	adds	r3, #16
 8002af0:	4618      	mov	r0, r3
 8002af2:	f000 fcbb 	bl	800346c <xTaskRemoveFromEventList>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002afc:	f000 fd98 	bl	8003630 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002b00:	7bbb      	ldrb	r3, [r7, #14]
 8002b02:	3b01      	subs	r3, #1
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	dce9      	bgt.n	8002ae4 <prvUnlockQueue+0x60>
 8002b10:	e000      	b.n	8002b14 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002b12:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	22ff      	movs	r2, #255	; 0xff
 8002b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002b1c:	f001 fc4a 	bl	80043b4 <vPortExitCritical>
}
 8002b20:	bf00      	nop
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002b30:	f001 fc10 	bl	8004354 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d102      	bne.n	8002b42 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	e001      	b.n	8002b46 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002b42:	2300      	movs	r3, #0
 8002b44:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002b46:	f001 fc35 	bl	80043b4 <vPortExitCritical>

    return xReturn;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002b5c:	f001 fbfa 	bl	8004354 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d102      	bne.n	8002b72 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	60fb      	str	r3, [r7, #12]
 8002b70:	e001      	b.n	8002b76 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002b72:	2300      	movs	r3, #0
 8002b74:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002b76:	f001 fc1d 	bl	80043b4 <vPortExitCritical>

    return xReturn;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	e01e      	b.n	8002bd2 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002b94:	4a13      	ldr	r2, [pc, #76]	; (8002be4 <vQueueAddToRegistry+0x60>)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d115      	bne.n	8002bcc <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002ba0:	4910      	ldr	r1, [pc, #64]	; (8002be4 <vQueueAddToRegistry+0x60>)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002baa:	4a0e      	ldr	r2, [pc, #56]	; (8002be4 <vQueueAddToRegistry+0x60>)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f003 fbef 	bl	800639c <SEGGER_SYSVIEW_ShrinkId>
 8002bbe:	4601      	mov	r1, r0
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	2071      	movs	r0, #113	; 0x71
 8002bc6:	f002 fe03 	bl	80057d0 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002bca:	e006      	b.n	8002bda <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2b07      	cmp	r3, #7
 8002bd6:	d9dd      	bls.n	8002b94 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002bd8:	bf00      	nop
 8002bda:	bf00      	nop
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	20014424 	.word	0x20014424

08002be8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002bf8:	f001 fbac 	bl	8004354 <vPortEnterCritical>
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c02:	b25b      	sxtb	r3, r3
 8002c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c08:	d103      	bne.n	8002c12 <vQueueWaitForMessageRestricted+0x2a>
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c18:	b25b      	sxtb	r3, r3
 8002c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1e:	d103      	bne.n	8002c28 <vQueueWaitForMessageRestricted+0x40>
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c28:	f001 fbc4 	bl	80043b4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d106      	bne.n	8002c42 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	3324      	adds	r3, #36	; 0x24
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	68b9      	ldr	r1, [r7, #8]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f000 fbe7 	bl	8003410 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002c42:	6978      	ldr	r0, [r7, #20]
 8002c44:	f7ff ff1e 	bl	8002a84 <prvUnlockQueue>
    }
 8002c48:	bf00      	nop
 8002c4a:	3718      	adds	r7, #24
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b08c      	sub	sp, #48	; 0x30
 8002c54:	af04      	add	r7, sp, #16
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	603b      	str	r3, [r7, #0]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002c60:	88fb      	ldrh	r3, [r7, #6]
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4618      	mov	r0, r3
 8002c66:	f001 fca1 	bl	80045ac <pvPortMalloc>
 8002c6a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00e      	beq.n	8002c90 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002c72:	2058      	movs	r0, #88	; 0x58
 8002c74:	f001 fc9a 	bl	80045ac <pvPortMalloc>
 8002c78:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	631a      	str	r2, [r3, #48]	; 0x30
 8002c86:	e005      	b.n	8002c94 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002c88:	6978      	ldr	r0, [r7, #20]
 8002c8a:	f001 fd6f 	bl	800476c <vPortFree>
 8002c8e:	e001      	b.n	8002c94 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002c90:	2300      	movs	r3, #0
 8002c92:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d013      	beq.n	8002cc2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c9a:	88fa      	ldrh	r2, [r7, #6]
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	9303      	str	r3, [sp, #12]
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	9302      	str	r3, [sp, #8]
 8002ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca6:	9301      	str	r3, [sp, #4]
 8002ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	68b9      	ldr	r1, [r7, #8]
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f000 f80e 	bl	8002cd2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002cb6:	69f8      	ldr	r0, [r7, #28]
 8002cb8:	f000 f8a2 	bl	8002e00 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	61bb      	str	r3, [r7, #24]
 8002cc0:	e002      	b.n	8002cc8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002cc8:	69bb      	ldr	r3, [r7, #24]
    }
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3720      	adds	r7, #32
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b088      	sub	sp, #32
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	60f8      	str	r0, [r7, #12]
 8002cda:	60b9      	str	r1, [r7, #8]
 8002cdc:	607a      	str	r2, [r7, #4]
 8002cde:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	461a      	mov	r2, r3
 8002cea:	21a5      	movs	r1, #165	; 0xa5
 8002cec:	f003 fcf0 	bl	80066d0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	f023 0307 	bic.w	r3, r3, #7
 8002d08:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00a      	beq.n	8002d2a <prvInitialiseNewTask+0x58>
        __asm volatile
 8002d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d18:	f383 8811 	msr	BASEPRI, r3
 8002d1c:	f3bf 8f6f 	isb	sy
 8002d20:	f3bf 8f4f 	dsb	sy
 8002d24:	617b      	str	r3, [r7, #20]
    }
 8002d26:	bf00      	nop
 8002d28:	e7fe      	b.n	8002d28 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d01f      	beq.n	8002d70 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d30:	2300      	movs	r3, #0
 8002d32:	61fb      	str	r3, [r7, #28]
 8002d34:	e012      	b.n	8002d5c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	7819      	ldrb	r1, [r3, #0]
 8002d3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	4413      	add	r3, r2
 8002d44:	3334      	adds	r3, #52	; 0x34
 8002d46:	460a      	mov	r2, r1
 8002d48:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	4413      	add	r3, r2
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d006      	beq.n	8002d64 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	61fb      	str	r3, [r7, #28]
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	2b09      	cmp	r3, #9
 8002d60:	d9e9      	bls.n	8002d36 <prvInitialiseNewTask+0x64>
 8002d62:	e000      	b.n	8002d66 <prvInitialiseNewTask+0x94>
            {
                break;
 8002d64:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002d6e:	e003      	b.n	8002d78 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d901      	bls.n	8002d82 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d7e:	2304      	movs	r3, #4
 8002d80:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d86:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d8c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d90:	2200      	movs	r2, #0
 8002d92:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d96:	3304      	adds	r3, #4
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff f96b 	bl	8002074 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da0:	3318      	adds	r3, #24
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff f966 	bl	8002074 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002daa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dac:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db0:	f1c3 0205 	rsb	r2, r3, #5
 8002db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dbc:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc0:	3350      	adds	r3, #80	; 0x50
 8002dc2:	2204      	movs	r2, #4
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f003 fc82 	bl	80066d0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dce:	3354      	adds	r3, #84	; 0x54
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f003 fc7b 	bl	80066d0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	68f9      	ldr	r1, [r7, #12]
 8002dde:	69b8      	ldr	r0, [r7, #24]
 8002de0:	f001 f90c 	bl	8003ffc <pxPortInitialiseStack>
 8002de4:	4602      	mov	r2, r0
 8002de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de8:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d002      	beq.n	8002df6 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002df4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002df6:	bf00      	nop
 8002df8:	3720      	adds	r7, #32
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
	...

08002e00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002e00:	b5b0      	push	{r4, r5, r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af02      	add	r7, sp, #8
 8002e06:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002e08:	f001 faa4 	bl	8004354 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002e0c:	4b3b      	ldr	r3, [pc, #236]	; (8002efc <prvAddNewTaskToReadyList+0xfc>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	3301      	adds	r3, #1
 8002e12:	4a3a      	ldr	r2, [pc, #232]	; (8002efc <prvAddNewTaskToReadyList+0xfc>)
 8002e14:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002e16:	4b3a      	ldr	r3, [pc, #232]	; (8002f00 <prvAddNewTaskToReadyList+0x100>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d109      	bne.n	8002e32 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002e1e:	4a38      	ldr	r2, [pc, #224]	; (8002f00 <prvAddNewTaskToReadyList+0x100>)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e24:	4b35      	ldr	r3, [pc, #212]	; (8002efc <prvAddNewTaskToReadyList+0xfc>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d110      	bne.n	8002e4e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002e2c:	f000 fc24 	bl	8003678 <prvInitialiseTaskLists>
 8002e30:	e00d      	b.n	8002e4e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002e32:	4b34      	ldr	r3, [pc, #208]	; (8002f04 <prvAddNewTaskToReadyList+0x104>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d109      	bne.n	8002e4e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e3a:	4b31      	ldr	r3, [pc, #196]	; (8002f00 <prvAddNewTaskToReadyList+0x100>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d802      	bhi.n	8002e4e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002e48:	4a2d      	ldr	r2, [pc, #180]	; (8002f00 <prvAddNewTaskToReadyList+0x100>)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002e4e:	4b2e      	ldr	r3, [pc, #184]	; (8002f08 <prvAddNewTaskToReadyList+0x108>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	3301      	adds	r3, #1
 8002e54:	4a2c      	ldr	r2, [pc, #176]	; (8002f08 <prvAddNewTaskToReadyList+0x108>)
 8002e56:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002e58:	4b2b      	ldr	r3, [pc, #172]	; (8002f08 <prvAddNewTaskToReadyList+0x108>)
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d016      	beq.n	8002e94 <prvAddNewTaskToReadyList+0x94>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f003 f971 	bl	8006150 <SEGGER_SYSVIEW_OnTaskCreate>
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	461d      	mov	r5, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	461c      	mov	r4, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	1ae3      	subs	r3, r4, r3
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	462b      	mov	r3, r5
 8002e90:	f001 fe32 	bl	8004af8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f003 f9de 	bl	8006258 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	409a      	lsls	r2, r3
 8002ea4:	4b19      	ldr	r3, [pc, #100]	; (8002f0c <prvAddNewTaskToReadyList+0x10c>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	4a18      	ldr	r2, [pc, #96]	; (8002f0c <prvAddNewTaskToReadyList+0x10c>)
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4a15      	ldr	r2, [pc, #84]	; (8002f10 <prvAddNewTaskToReadyList+0x110>)
 8002ebc:	441a      	add	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	f7ff f8e2 	bl	800208e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002eca:	f001 fa73 	bl	80043b4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002ece:	4b0d      	ldr	r3, [pc, #52]	; (8002f04 <prvAddNewTaskToReadyList+0x104>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00e      	beq.n	8002ef4 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ed6:	4b0a      	ldr	r3, [pc, #40]	; (8002f00 <prvAddNewTaskToReadyList+0x100>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d207      	bcs.n	8002ef4 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002ee4:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <prvAddNewTaskToReadyList+0x114>)
 8002ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	f3bf 8f4f 	dsb	sy
 8002ef0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002ef4:	bf00      	nop
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bdb0      	pop	{r4, r5, r7, pc}
 8002efc:	2000016c 	.word	0x2000016c
 8002f00:	20000094 	.word	0x20000094
 8002f04:	20000178 	.word	0x20000178
 8002f08:	20000188 	.word	0x20000188
 8002f0c:	20000174 	.word	0x20000174
 8002f10:	20000098 	.word	0x20000098
 8002f14:	e000ed04 	.word	0xe000ed04

08002f18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002f1e:	4b27      	ldr	r3, [pc, #156]	; (8002fbc <vTaskStartScheduler+0xa4>)
 8002f20:	9301      	str	r3, [sp, #4]
 8002f22:	2300      	movs	r3, #0
 8002f24:	9300      	str	r3, [sp, #0]
 8002f26:	2300      	movs	r3, #0
 8002f28:	2282      	movs	r2, #130	; 0x82
 8002f2a:	4925      	ldr	r1, [pc, #148]	; (8002fc0 <vTaskStartScheduler+0xa8>)
 8002f2c:	4825      	ldr	r0, [pc, #148]	; (8002fc4 <vTaskStartScheduler+0xac>)
 8002f2e:	f7ff fe8f 	bl	8002c50 <xTaskCreate>
 8002f32:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d102      	bne.n	8002f40 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002f3a:	f000 fd4d 	bl	80039d8 <xTimerCreateTimerTask>
 8002f3e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d124      	bne.n	8002f90 <vTaskStartScheduler+0x78>
        __asm volatile
 8002f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f4a:	f383 8811 	msr	BASEPRI, r3
 8002f4e:	f3bf 8f6f 	isb	sy
 8002f52:	f3bf 8f4f 	dsb	sy
 8002f56:	60bb      	str	r3, [r7, #8]
    }
 8002f58:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002f5a:	4b1b      	ldr	r3, [pc, #108]	; (8002fc8 <vTaskStartScheduler+0xb0>)
 8002f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f60:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002f62:	4b1a      	ldr	r3, [pc, #104]	; (8002fcc <vTaskStartScheduler+0xb4>)
 8002f64:	2201      	movs	r2, #1
 8002f66:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002f68:	4b19      	ldr	r3, [pc, #100]	; (8002fd0 <vTaskStartScheduler+0xb8>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002f6e:	4b19      	ldr	r3, [pc, #100]	; (8002fd4 <vTaskStartScheduler+0xbc>)
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	4b12      	ldr	r3, [pc, #72]	; (8002fbc <vTaskStartScheduler+0xa4>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d102      	bne.n	8002f80 <vTaskStartScheduler+0x68>
 8002f7a:	f003 f8cd 	bl	8006118 <SEGGER_SYSVIEW_OnIdle>
 8002f7e:	e004      	b.n	8002f8a <vTaskStartScheduler+0x72>
 8002f80:	4b14      	ldr	r3, [pc, #80]	; (8002fd4 <vTaskStartScheduler+0xbc>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f003 f925 	bl	80061d4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002f8a:	f001 f8c3 	bl	8004114 <xPortStartScheduler>
 8002f8e:	e00e      	b.n	8002fae <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f96:	d10a      	bne.n	8002fae <vTaskStartScheduler+0x96>
        __asm volatile
 8002f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9c:	f383 8811 	msr	BASEPRI, r3
 8002fa0:	f3bf 8f6f 	isb	sy
 8002fa4:	f3bf 8f4f 	dsb	sy
 8002fa8:	607b      	str	r3, [r7, #4]
    }
 8002faa:	bf00      	nop
 8002fac:	e7fe      	b.n	8002fac <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002fae:	4b0a      	ldr	r3, [pc, #40]	; (8002fd8 <vTaskStartScheduler+0xc0>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
}
 8002fb2:	bf00      	nop
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	20000190 	.word	0x20000190
 8002fc0:	080070e4 	.word	0x080070e4
 8002fc4:	08003649 	.word	0x08003649
 8002fc8:	2000018c 	.word	0x2000018c
 8002fcc:	20000178 	.word	0x20000178
 8002fd0:	20000170 	.word	0x20000170
 8002fd4:	20000094 	.word	0x20000094
 8002fd8:	2000000c 	.word	0x2000000c

08002fdc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002fe0:	4b04      	ldr	r3, [pc, #16]	; (8002ff4 <vTaskSuspendAll+0x18>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	4a03      	ldr	r2, [pc, #12]	; (8002ff4 <vTaskSuspendAll+0x18>)
 8002fe8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002fea:	bf00      	nop
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr
 8002ff4:	20000194 	.word	0x20000194

08002ff8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002ffe:	2300      	movs	r3, #0
 8003000:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003002:	2300      	movs	r3, #0
 8003004:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003006:	4b43      	ldr	r3, [pc, #268]	; (8003114 <xTaskResumeAll+0x11c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10a      	bne.n	8003024 <xTaskResumeAll+0x2c>
        __asm volatile
 800300e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003012:	f383 8811 	msr	BASEPRI, r3
 8003016:	f3bf 8f6f 	isb	sy
 800301a:	f3bf 8f4f 	dsb	sy
 800301e:	603b      	str	r3, [r7, #0]
    }
 8003020:	bf00      	nop
 8003022:	e7fe      	b.n	8003022 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003024:	f001 f996 	bl	8004354 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003028:	4b3a      	ldr	r3, [pc, #232]	; (8003114 <xTaskResumeAll+0x11c>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	3b01      	subs	r3, #1
 800302e:	4a39      	ldr	r2, [pc, #228]	; (8003114 <xTaskResumeAll+0x11c>)
 8003030:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003032:	4b38      	ldr	r3, [pc, #224]	; (8003114 <xTaskResumeAll+0x11c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d165      	bne.n	8003106 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800303a:	4b37      	ldr	r3, [pc, #220]	; (8003118 <xTaskResumeAll+0x120>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d061      	beq.n	8003106 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003042:	e032      	b.n	80030aa <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003044:	4b35      	ldr	r3, [pc, #212]	; (800311c <xTaskResumeAll+0x124>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	3318      	adds	r3, #24
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff f879 	bl	8002148 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	3304      	adds	r3, #4
 800305a:	4618      	mov	r0, r3
 800305c:	f7ff f874 	bl	8002148 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4618      	mov	r0, r3
 8003064:	f003 f8f8 	bl	8006258 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306c:	2201      	movs	r2, #1
 800306e:	409a      	lsls	r2, r3
 8003070:	4b2b      	ldr	r3, [pc, #172]	; (8003120 <xTaskResumeAll+0x128>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4313      	orrs	r3, r2
 8003076:	4a2a      	ldr	r2, [pc, #168]	; (8003120 <xTaskResumeAll+0x128>)
 8003078:	6013      	str	r3, [r2, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800307e:	4613      	mov	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4413      	add	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4a27      	ldr	r2, [pc, #156]	; (8003124 <xTaskResumeAll+0x12c>)
 8003088:	441a      	add	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	3304      	adds	r3, #4
 800308e:	4619      	mov	r1, r3
 8003090:	4610      	mov	r0, r2
 8003092:	f7fe fffc 	bl	800208e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800309a:	4b23      	ldr	r3, [pc, #140]	; (8003128 <xTaskResumeAll+0x130>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d302      	bcc.n	80030aa <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80030a4:	4b21      	ldr	r3, [pc, #132]	; (800312c <xTaskResumeAll+0x134>)
 80030a6:	2201      	movs	r2, #1
 80030a8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030aa:	4b1c      	ldr	r3, [pc, #112]	; (800311c <xTaskResumeAll+0x124>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1c8      	bne.n	8003044 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80030b8:	f000 fb5c 	bl	8003774 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80030bc:	4b1c      	ldr	r3, [pc, #112]	; (8003130 <xTaskResumeAll+0x138>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d010      	beq.n	80030ea <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80030c8:	f000 f858 	bl	800317c <xTaskIncrementTick>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d002      	beq.n	80030d8 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80030d2:	4b16      	ldr	r3, [pc, #88]	; (800312c <xTaskResumeAll+0x134>)
 80030d4:	2201      	movs	r2, #1
 80030d6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3b01      	subs	r3, #1
 80030dc:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1f1      	bne.n	80030c8 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80030e4:	4b12      	ldr	r3, [pc, #72]	; (8003130 <xTaskResumeAll+0x138>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80030ea:	4b10      	ldr	r3, [pc, #64]	; (800312c <xTaskResumeAll+0x134>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d009      	beq.n	8003106 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80030f2:	2301      	movs	r3, #1
 80030f4:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80030f6:	4b0f      	ldr	r3, [pc, #60]	; (8003134 <xTaskResumeAll+0x13c>)
 80030f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	f3bf 8f4f 	dsb	sy
 8003102:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003106:	f001 f955 	bl	80043b4 <vPortExitCritical>

    return xAlreadyYielded;
 800310a:	68bb      	ldr	r3, [r7, #8]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	20000194 	.word	0x20000194
 8003118:	2000016c 	.word	0x2000016c
 800311c:	2000012c 	.word	0x2000012c
 8003120:	20000174 	.word	0x20000174
 8003124:	20000098 	.word	0x20000098
 8003128:	20000094 	.word	0x20000094
 800312c:	20000180 	.word	0x20000180
 8003130:	2000017c 	.word	0x2000017c
 8003134:	e000ed04 	.word	0xe000ed04

08003138 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800313e:	4b05      	ldr	r3, [pc, #20]	; (8003154 <xTaskGetTickCount+0x1c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003144:	687b      	ldr	r3, [r7, #4]
}
 8003146:	4618      	mov	r0, r3
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	20000170 	.word	0x20000170

08003158 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800315e:	f001 f9e5 	bl	800452c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003162:	2300      	movs	r3, #0
 8003164:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003166:	4b04      	ldr	r3, [pc, #16]	; (8003178 <xTaskGetTickCountFromISR+0x20>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800316c:	683b      	ldr	r3, [r7, #0]
}
 800316e:	4618      	mov	r0, r3
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	20000170 	.word	0x20000170

0800317c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003182:	2300      	movs	r3, #0
 8003184:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003186:	4b50      	ldr	r3, [pc, #320]	; (80032c8 <xTaskIncrementTick+0x14c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	f040 8092 	bne.w	80032b4 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003190:	4b4e      	ldr	r3, [pc, #312]	; (80032cc <xTaskIncrementTick+0x150>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	3301      	adds	r3, #1
 8003196:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003198:	4a4c      	ldr	r2, [pc, #304]	; (80032cc <xTaskIncrementTick+0x150>)
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d120      	bne.n	80031e6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80031a4:	4b4a      	ldr	r3, [pc, #296]	; (80032d0 <xTaskIncrementTick+0x154>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00a      	beq.n	80031c4 <xTaskIncrementTick+0x48>
        __asm volatile
 80031ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b2:	f383 8811 	msr	BASEPRI, r3
 80031b6:	f3bf 8f6f 	isb	sy
 80031ba:	f3bf 8f4f 	dsb	sy
 80031be:	603b      	str	r3, [r7, #0]
    }
 80031c0:	bf00      	nop
 80031c2:	e7fe      	b.n	80031c2 <xTaskIncrementTick+0x46>
 80031c4:	4b42      	ldr	r3, [pc, #264]	; (80032d0 <xTaskIncrementTick+0x154>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	60fb      	str	r3, [r7, #12]
 80031ca:	4b42      	ldr	r3, [pc, #264]	; (80032d4 <xTaskIncrementTick+0x158>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a40      	ldr	r2, [pc, #256]	; (80032d0 <xTaskIncrementTick+0x154>)
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	4a40      	ldr	r2, [pc, #256]	; (80032d4 <xTaskIncrementTick+0x158>)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6013      	str	r3, [r2, #0]
 80031d8:	4b3f      	ldr	r3, [pc, #252]	; (80032d8 <xTaskIncrementTick+0x15c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	3301      	adds	r3, #1
 80031de:	4a3e      	ldr	r2, [pc, #248]	; (80032d8 <xTaskIncrementTick+0x15c>)
 80031e0:	6013      	str	r3, [r2, #0]
 80031e2:	f000 fac7 	bl	8003774 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80031e6:	4b3d      	ldr	r3, [pc, #244]	; (80032dc <xTaskIncrementTick+0x160>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d34c      	bcc.n	800328a <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031f0:	4b37      	ldr	r3, [pc, #220]	; (80032d0 <xTaskIncrementTick+0x154>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d104      	bne.n	8003204 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031fa:	4b38      	ldr	r3, [pc, #224]	; (80032dc <xTaskIncrementTick+0x160>)
 80031fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003200:	601a      	str	r2, [r3, #0]
                    break;
 8003202:	e042      	b.n	800328a <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003204:	4b32      	ldr	r3, [pc, #200]	; (80032d0 <xTaskIncrementTick+0x154>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	429a      	cmp	r2, r3
 800321a:	d203      	bcs.n	8003224 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800321c:	4a2f      	ldr	r2, [pc, #188]	; (80032dc <xTaskIncrementTick+0x160>)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003222:	e032      	b.n	800328a <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	3304      	adds	r3, #4
 8003228:	4618      	mov	r0, r3
 800322a:	f7fe ff8d 	bl	8002148 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003232:	2b00      	cmp	r3, #0
 8003234:	d004      	beq.n	8003240 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	3318      	adds	r3, #24
 800323a:	4618      	mov	r0, r3
 800323c:	f7fe ff84 	bl	8002148 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	4618      	mov	r0, r3
 8003244:	f003 f808 	bl	8006258 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324c:	2201      	movs	r2, #1
 800324e:	409a      	lsls	r2, r3
 8003250:	4b23      	ldr	r3, [pc, #140]	; (80032e0 <xTaskIncrementTick+0x164>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4313      	orrs	r3, r2
 8003256:	4a22      	ldr	r2, [pc, #136]	; (80032e0 <xTaskIncrementTick+0x164>)
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800325e:	4613      	mov	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4413      	add	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4a1f      	ldr	r2, [pc, #124]	; (80032e4 <xTaskIncrementTick+0x168>)
 8003268:	441a      	add	r2, r3
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	3304      	adds	r3, #4
 800326e:	4619      	mov	r1, r3
 8003270:	4610      	mov	r0, r2
 8003272:	f7fe ff0c 	bl	800208e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800327a:	4b1b      	ldr	r3, [pc, #108]	; (80032e8 <xTaskIncrementTick+0x16c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003280:	429a      	cmp	r2, r3
 8003282:	d3b5      	bcc.n	80031f0 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8003284:	2301      	movs	r3, #1
 8003286:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003288:	e7b2      	b.n	80031f0 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800328a:	4b17      	ldr	r3, [pc, #92]	; (80032e8 <xTaskIncrementTick+0x16c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003290:	4914      	ldr	r1, [pc, #80]	; (80032e4 <xTaskIncrementTick+0x168>)
 8003292:	4613      	mov	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4413      	add	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	440b      	add	r3, r1
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d901      	bls.n	80032a6 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80032a2:	2301      	movs	r3, #1
 80032a4:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80032a6:	4b11      	ldr	r3, [pc, #68]	; (80032ec <xTaskIncrementTick+0x170>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d007      	beq.n	80032be <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80032ae:	2301      	movs	r3, #1
 80032b0:	617b      	str	r3, [r7, #20]
 80032b2:	e004      	b.n	80032be <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80032b4:	4b0e      	ldr	r3, [pc, #56]	; (80032f0 <xTaskIncrementTick+0x174>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	3301      	adds	r3, #1
 80032ba:	4a0d      	ldr	r2, [pc, #52]	; (80032f0 <xTaskIncrementTick+0x174>)
 80032bc:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80032be:	697b      	ldr	r3, [r7, #20]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	20000194 	.word	0x20000194
 80032cc:	20000170 	.word	0x20000170
 80032d0:	20000124 	.word	0x20000124
 80032d4:	20000128 	.word	0x20000128
 80032d8:	20000184 	.word	0x20000184
 80032dc:	2000018c 	.word	0x2000018c
 80032e0:	20000174 	.word	0x20000174
 80032e4:	20000098 	.word	0x20000098
 80032e8:	20000094 	.word	0x20000094
 80032ec:	20000180 	.word	0x20000180
 80032f0:	2000017c 	.word	0x2000017c

080032f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80032fa:	4b2d      	ldr	r3, [pc, #180]	; (80033b0 <vTaskSwitchContext+0xbc>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003302:	4b2c      	ldr	r3, [pc, #176]	; (80033b4 <vTaskSwitchContext+0xc0>)
 8003304:	2201      	movs	r2, #1
 8003306:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003308:	e04d      	b.n	80033a6 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800330a:	4b2a      	ldr	r3, [pc, #168]	; (80033b4 <vTaskSwitchContext+0xc0>)
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003310:	4b29      	ldr	r3, [pc, #164]	; (80033b8 <vTaskSwitchContext+0xc4>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	fab3 f383 	clz	r3, r3
 800331c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800331e:	7afb      	ldrb	r3, [r7, #11]
 8003320:	f1c3 031f 	rsb	r3, r3, #31
 8003324:	617b      	str	r3, [r7, #20]
 8003326:	4925      	ldr	r1, [pc, #148]	; (80033bc <vTaskSwitchContext+0xc8>)
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	4613      	mov	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	440b      	add	r3, r1
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10a      	bne.n	8003350 <vTaskSwitchContext+0x5c>
        __asm volatile
 800333a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333e:	f383 8811 	msr	BASEPRI, r3
 8003342:	f3bf 8f6f 	isb	sy
 8003346:	f3bf 8f4f 	dsb	sy
 800334a:	607b      	str	r3, [r7, #4]
    }
 800334c:	bf00      	nop
 800334e:	e7fe      	b.n	800334e <vTaskSwitchContext+0x5a>
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	4613      	mov	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4a18      	ldr	r2, [pc, #96]	; (80033bc <vTaskSwitchContext+0xc8>)
 800335c:	4413      	add	r3, r2
 800335e:	613b      	str	r3, [r7, #16]
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	605a      	str	r2, [r3, #4]
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	3308      	adds	r3, #8
 8003372:	429a      	cmp	r2, r3
 8003374:	d104      	bne.n	8003380 <vTaskSwitchContext+0x8c>
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	605a      	str	r2, [r3, #4]
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	4a0e      	ldr	r2, [pc, #56]	; (80033c0 <vTaskSwitchContext+0xcc>)
 8003388:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800338a:	4b0d      	ldr	r3, [pc, #52]	; (80033c0 <vTaskSwitchContext+0xcc>)
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	4b0d      	ldr	r3, [pc, #52]	; (80033c4 <vTaskSwitchContext+0xd0>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	429a      	cmp	r2, r3
 8003394:	d102      	bne.n	800339c <vTaskSwitchContext+0xa8>
 8003396:	f002 febf 	bl	8006118 <SEGGER_SYSVIEW_OnIdle>
}
 800339a:	e004      	b.n	80033a6 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 800339c:	4b08      	ldr	r3, [pc, #32]	; (80033c0 <vTaskSwitchContext+0xcc>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f002 ff17 	bl	80061d4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80033a6:	bf00      	nop
 80033a8:	3718      	adds	r7, #24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	20000194 	.word	0x20000194
 80033b4:	20000180 	.word	0x20000180
 80033b8:	20000174 	.word	0x20000174
 80033bc:	20000098 	.word	0x20000098
 80033c0:	20000094 	.word	0x20000094
 80033c4:	20000190 	.word	0x20000190

080033c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10a      	bne.n	80033ee <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80033d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033dc:	f383 8811 	msr	BASEPRI, r3
 80033e0:	f3bf 8f6f 	isb	sy
 80033e4:	f3bf 8f4f 	dsb	sy
 80033e8:	60fb      	str	r3, [r7, #12]
    }
 80033ea:	bf00      	nop
 80033ec:	e7fe      	b.n	80033ec <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033ee:	4b07      	ldr	r3, [pc, #28]	; (800340c <vTaskPlaceOnEventList+0x44>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	3318      	adds	r3, #24
 80033f4:	4619      	mov	r1, r3
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7fe fe6d 	bl	80020d6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80033fc:	2101      	movs	r1, #1
 80033fe:	6838      	ldr	r0, [r7, #0]
 8003400:	f000 fa72 	bl	80038e8 <prvAddCurrentTaskToDelayedList>
}
 8003404:	bf00      	nop
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	20000094 	.word	0x20000094

08003410 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10a      	bne.n	8003438 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003426:	f383 8811 	msr	BASEPRI, r3
 800342a:	f3bf 8f6f 	isb	sy
 800342e:	f3bf 8f4f 	dsb	sy
 8003432:	617b      	str	r3, [r7, #20]
    }
 8003434:	bf00      	nop
 8003436:	e7fe      	b.n	8003436 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003438:	4b0b      	ldr	r3, [pc, #44]	; (8003468 <vTaskPlaceOnEventListRestricted+0x58>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	3318      	adds	r3, #24
 800343e:	4619      	mov	r1, r3
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f7fe fe24 	bl	800208e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d002      	beq.n	8003452 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 800344c:	f04f 33ff 	mov.w	r3, #4294967295
 8003450:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003452:	2024      	movs	r0, #36	; 0x24
 8003454:	f002 f962 	bl	800571c <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003458:	6879      	ldr	r1, [r7, #4]
 800345a:	68b8      	ldr	r0, [r7, #8]
 800345c:	f000 fa44 	bl	80038e8 <prvAddCurrentTaskToDelayedList>
    }
 8003460:	bf00      	nop
 8003462:	3718      	adds	r7, #24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	20000094 	.word	0x20000094

0800346c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10a      	bne.n	8003498 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003486:	f383 8811 	msr	BASEPRI, r3
 800348a:	f3bf 8f6f 	isb	sy
 800348e:	f3bf 8f4f 	dsb	sy
 8003492:	60fb      	str	r3, [r7, #12]
    }
 8003494:	bf00      	nop
 8003496:	e7fe      	b.n	8003496 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	3318      	adds	r3, #24
 800349c:	4618      	mov	r0, r3
 800349e:	f7fe fe53 	bl	8002148 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034a2:	4b1f      	ldr	r3, [pc, #124]	; (8003520 <xTaskRemoveFromEventList+0xb4>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d120      	bne.n	80034ec <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	3304      	adds	r3, #4
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fe fe4a 	bl	8002148 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f002 fece 	bl	8006258 <SEGGER_SYSVIEW_OnTaskStartReady>
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c0:	2201      	movs	r2, #1
 80034c2:	409a      	lsls	r2, r3
 80034c4:	4b17      	ldr	r3, [pc, #92]	; (8003524 <xTaskRemoveFromEventList+0xb8>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	4a16      	ldr	r2, [pc, #88]	; (8003524 <xTaskRemoveFromEventList+0xb8>)
 80034cc:	6013      	str	r3, [r2, #0]
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d2:	4613      	mov	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4a13      	ldr	r2, [pc, #76]	; (8003528 <xTaskRemoveFromEventList+0xbc>)
 80034dc:	441a      	add	r2, r3
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	3304      	adds	r3, #4
 80034e2:	4619      	mov	r1, r3
 80034e4:	4610      	mov	r0, r2
 80034e6:	f7fe fdd2 	bl	800208e <vListInsertEnd>
 80034ea:	e005      	b.n	80034f8 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	3318      	adds	r3, #24
 80034f0:	4619      	mov	r1, r3
 80034f2:	480e      	ldr	r0, [pc, #56]	; (800352c <xTaskRemoveFromEventList+0xc0>)
 80034f4:	f7fe fdcb 	bl	800208e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034fc:	4b0c      	ldr	r3, [pc, #48]	; (8003530 <xTaskRemoveFromEventList+0xc4>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003502:	429a      	cmp	r2, r3
 8003504:	d905      	bls.n	8003512 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003506:	2301      	movs	r3, #1
 8003508:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800350a:	4b0a      	ldr	r3, [pc, #40]	; (8003534 <xTaskRemoveFromEventList+0xc8>)
 800350c:	2201      	movs	r2, #1
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	e001      	b.n	8003516 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8003512:	2300      	movs	r3, #0
 8003514:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003516:	697b      	ldr	r3, [r7, #20]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3718      	adds	r7, #24
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	20000194 	.word	0x20000194
 8003524:	20000174 	.word	0x20000174
 8003528:	20000098 	.word	0x20000098
 800352c:	2000012c 	.word	0x2000012c
 8003530:	20000094 	.word	0x20000094
 8003534:	20000180 	.word	0x20000180

08003538 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003540:	4b06      	ldr	r3, [pc, #24]	; (800355c <vTaskInternalSetTimeOutState+0x24>)
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003548:	4b05      	ldr	r3, [pc, #20]	; (8003560 <vTaskInternalSetTimeOutState+0x28>)
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	605a      	str	r2, [r3, #4]
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	20000184 	.word	0x20000184
 8003560:	20000170 	.word	0x20000170

08003564 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b088      	sub	sp, #32
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10a      	bne.n	800358a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003578:	f383 8811 	msr	BASEPRI, r3
 800357c:	f3bf 8f6f 	isb	sy
 8003580:	f3bf 8f4f 	dsb	sy
 8003584:	613b      	str	r3, [r7, #16]
    }
 8003586:	bf00      	nop
 8003588:	e7fe      	b.n	8003588 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10a      	bne.n	80035a6 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003594:	f383 8811 	msr	BASEPRI, r3
 8003598:	f3bf 8f6f 	isb	sy
 800359c:	f3bf 8f4f 	dsb	sy
 80035a0:	60fb      	str	r3, [r7, #12]
    }
 80035a2:	bf00      	nop
 80035a4:	e7fe      	b.n	80035a4 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80035a6:	f000 fed5 	bl	8004354 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80035aa:	4b1f      	ldr	r3, [pc, #124]	; (8003628 <xTaskCheckForTimeOut+0xc4>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c2:	d102      	bne.n	80035ca <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80035c4:	2300      	movs	r3, #0
 80035c6:	61fb      	str	r3, [r7, #28]
 80035c8:	e026      	b.n	8003618 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	4b17      	ldr	r3, [pc, #92]	; (800362c <xTaskCheckForTimeOut+0xc8>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d00a      	beq.n	80035ec <xTaskCheckForTimeOut+0x88>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d305      	bcc.n	80035ec <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80035e0:	2301      	movs	r3, #1
 80035e2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]
 80035ea:	e015      	b.n	8003618 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d20b      	bcs.n	800360e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	1ad2      	subs	r2, r2, r3
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7ff ff98 	bl	8003538 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003608:	2300      	movs	r3, #0
 800360a:	61fb      	str	r3, [r7, #28]
 800360c:	e004      	b.n	8003618 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003614:	2301      	movs	r3, #1
 8003616:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003618:	f000 fecc 	bl	80043b4 <vPortExitCritical>

    return xReturn;
 800361c:	69fb      	ldr	r3, [r7, #28]
}
 800361e:	4618      	mov	r0, r3
 8003620:	3720      	adds	r7, #32
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	20000170 	.word	0x20000170
 800362c:	20000184 	.word	0x20000184

08003630 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003634:	4b03      	ldr	r3, [pc, #12]	; (8003644 <vTaskMissedYield+0x14>)
 8003636:	2201      	movs	r2, #1
 8003638:	601a      	str	r2, [r3, #0]
}
 800363a:	bf00      	nop
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	20000180 	.word	0x20000180

08003648 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003650:	f000 f852 	bl	80036f8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003654:	4b06      	ldr	r3, [pc, #24]	; (8003670 <prvIdleTask+0x28>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d9f9      	bls.n	8003650 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800365c:	4b05      	ldr	r3, [pc, #20]	; (8003674 <prvIdleTask+0x2c>)
 800365e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	f3bf 8f4f 	dsb	sy
 8003668:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800366c:	e7f0      	b.n	8003650 <prvIdleTask+0x8>
 800366e:	bf00      	nop
 8003670:	20000098 	.word	0x20000098
 8003674:	e000ed04 	.word	0xe000ed04

08003678 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800367e:	2300      	movs	r3, #0
 8003680:	607b      	str	r3, [r7, #4]
 8003682:	e00c      	b.n	800369e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	4613      	mov	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4413      	add	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4a12      	ldr	r2, [pc, #72]	; (80036d8 <prvInitialiseTaskLists+0x60>)
 8003690:	4413      	add	r3, r2
 8003692:	4618      	mov	r0, r3
 8003694:	f7fe fcce 	bl	8002034 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3301      	adds	r3, #1
 800369c:	607b      	str	r3, [r7, #4]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b04      	cmp	r3, #4
 80036a2:	d9ef      	bls.n	8003684 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80036a4:	480d      	ldr	r0, [pc, #52]	; (80036dc <prvInitialiseTaskLists+0x64>)
 80036a6:	f7fe fcc5 	bl	8002034 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80036aa:	480d      	ldr	r0, [pc, #52]	; (80036e0 <prvInitialiseTaskLists+0x68>)
 80036ac:	f7fe fcc2 	bl	8002034 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80036b0:	480c      	ldr	r0, [pc, #48]	; (80036e4 <prvInitialiseTaskLists+0x6c>)
 80036b2:	f7fe fcbf 	bl	8002034 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80036b6:	480c      	ldr	r0, [pc, #48]	; (80036e8 <prvInitialiseTaskLists+0x70>)
 80036b8:	f7fe fcbc 	bl	8002034 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80036bc:	480b      	ldr	r0, [pc, #44]	; (80036ec <prvInitialiseTaskLists+0x74>)
 80036be:	f7fe fcb9 	bl	8002034 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80036c2:	4b0b      	ldr	r3, [pc, #44]	; (80036f0 <prvInitialiseTaskLists+0x78>)
 80036c4:	4a05      	ldr	r2, [pc, #20]	; (80036dc <prvInitialiseTaskLists+0x64>)
 80036c6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80036c8:	4b0a      	ldr	r3, [pc, #40]	; (80036f4 <prvInitialiseTaskLists+0x7c>)
 80036ca:	4a05      	ldr	r2, [pc, #20]	; (80036e0 <prvInitialiseTaskLists+0x68>)
 80036cc:	601a      	str	r2, [r3, #0]
}
 80036ce:	bf00      	nop
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	20000098 	.word	0x20000098
 80036dc:	200000fc 	.word	0x200000fc
 80036e0:	20000110 	.word	0x20000110
 80036e4:	2000012c 	.word	0x2000012c
 80036e8:	20000140 	.word	0x20000140
 80036ec:	20000158 	.word	0x20000158
 80036f0:	20000124 	.word	0x20000124
 80036f4:	20000128 	.word	0x20000128

080036f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036fe:	e019      	b.n	8003734 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003700:	f000 fe28 	bl	8004354 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003704:	4b10      	ldr	r3, [pc, #64]	; (8003748 <prvCheckTasksWaitingTermination+0x50>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3304      	adds	r3, #4
 8003710:	4618      	mov	r0, r3
 8003712:	f7fe fd19 	bl	8002148 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003716:	4b0d      	ldr	r3, [pc, #52]	; (800374c <prvCheckTasksWaitingTermination+0x54>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	3b01      	subs	r3, #1
 800371c:	4a0b      	ldr	r2, [pc, #44]	; (800374c <prvCheckTasksWaitingTermination+0x54>)
 800371e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003720:	4b0b      	ldr	r3, [pc, #44]	; (8003750 <prvCheckTasksWaitingTermination+0x58>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	3b01      	subs	r3, #1
 8003726:	4a0a      	ldr	r2, [pc, #40]	; (8003750 <prvCheckTasksWaitingTermination+0x58>)
 8003728:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800372a:	f000 fe43 	bl	80043b4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f810 	bl	8003754 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003734:	4b06      	ldr	r3, [pc, #24]	; (8003750 <prvCheckTasksWaitingTermination+0x58>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1e1      	bne.n	8003700 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800373c:	bf00      	nop
 800373e:	bf00      	nop
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	20000140 	.word	0x20000140
 800374c:	2000016c 	.word	0x2000016c
 8003750:	20000154 	.word	0x20000154

08003754 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003760:	4618      	mov	r0, r3
 8003762:	f001 f803 	bl	800476c <vPortFree>
                vPortFree( pxTCB );
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f001 f800 	bl	800476c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800376c:	bf00      	nop
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003778:	4b0a      	ldr	r3, [pc, #40]	; (80037a4 <prvResetNextTaskUnblockTime+0x30>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d104      	bne.n	800378c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003782:	4b09      	ldr	r3, [pc, #36]	; (80037a8 <prvResetNextTaskUnblockTime+0x34>)
 8003784:	f04f 32ff 	mov.w	r2, #4294967295
 8003788:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800378a:	e005      	b.n	8003798 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800378c:	4b05      	ldr	r3, [pc, #20]	; (80037a4 <prvResetNextTaskUnblockTime+0x30>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a04      	ldr	r2, [pc, #16]	; (80037a8 <prvResetNextTaskUnblockTime+0x34>)
 8003796:	6013      	str	r3, [r2, #0]
}
 8003798:	bf00      	nop
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	20000124 	.word	0x20000124
 80037a8:	2000018c 	.word	0x2000018c

080037ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80037b2:	4b0b      	ldr	r3, [pc, #44]	; (80037e0 <xTaskGetSchedulerState+0x34>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d102      	bne.n	80037c0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80037ba:	2301      	movs	r3, #1
 80037bc:	607b      	str	r3, [r7, #4]
 80037be:	e008      	b.n	80037d2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037c0:	4b08      	ldr	r3, [pc, #32]	; (80037e4 <xTaskGetSchedulerState+0x38>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d102      	bne.n	80037ce <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80037c8:	2302      	movs	r3, #2
 80037ca:	607b      	str	r3, [r7, #4]
 80037cc:	e001      	b.n	80037d2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80037ce:	2300      	movs	r3, #0
 80037d0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80037d2:	687b      	ldr	r3, [r7, #4]
    }
 80037d4:	4618      	mov	r0, r3
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	20000178 	.word	0x20000178
 80037e4:	20000194 	.word	0x20000194

080037e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80037f4:	2300      	movs	r3, #0
 80037f6:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d068      	beq.n	80038d0 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80037fe:	4b37      	ldr	r3, [pc, #220]	; (80038dc <xTaskPriorityDisinherit+0xf4>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	429a      	cmp	r2, r3
 8003806:	d00a      	beq.n	800381e <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380c:	f383 8811 	msr	BASEPRI, r3
 8003810:	f3bf 8f6f 	isb	sy
 8003814:	f3bf 8f4f 	dsb	sy
 8003818:	60fb      	str	r3, [r7, #12]
    }
 800381a:	bf00      	nop
 800381c:	e7fe      	b.n	800381c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10a      	bne.n	800383c <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382a:	f383 8811 	msr	BASEPRI, r3
 800382e:	f3bf 8f6f 	isb	sy
 8003832:	f3bf 8f4f 	dsb	sy
 8003836:	60bb      	str	r3, [r7, #8]
    }
 8003838:	bf00      	nop
 800383a:	e7fe      	b.n	800383a <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003840:	1e5a      	subs	r2, r3, #1
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800384e:	429a      	cmp	r2, r3
 8003850:	d03e      	beq.n	80038d0 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003856:	2b00      	cmp	r3, #0
 8003858:	d13a      	bne.n	80038d0 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	3304      	adds	r3, #4
 800385e:	4618      	mov	r0, r3
 8003860:	f7fe fc72 	bl	8002148 <uxListRemove>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10a      	bne.n	8003880 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386e:	2201      	movs	r2, #1
 8003870:	fa02 f303 	lsl.w	r3, r2, r3
 8003874:	43da      	mvns	r2, r3
 8003876:	4b1a      	ldr	r3, [pc, #104]	; (80038e0 <xTaskPriorityDisinherit+0xf8>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4013      	ands	r3, r2
 800387c:	4a18      	ldr	r2, [pc, #96]	; (80038e0 <xTaskPriorityDisinherit+0xf8>)
 800387e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4619      	mov	r1, r3
 8003884:	204a      	movs	r0, #74	; 0x4a
 8003886:	f001 ff67 	bl	8005758 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003896:	f1c3 0205 	rsb	r2, r3, #5
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a2:	2201      	movs	r2, #1
 80038a4:	409a      	lsls	r2, r3
 80038a6:	4b0e      	ldr	r3, [pc, #56]	; (80038e0 <xTaskPriorityDisinherit+0xf8>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	4a0c      	ldr	r2, [pc, #48]	; (80038e0 <xTaskPriorityDisinherit+0xf8>)
 80038ae:	6013      	str	r3, [r2, #0]
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b4:	4613      	mov	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4a09      	ldr	r2, [pc, #36]	; (80038e4 <xTaskPriorityDisinherit+0xfc>)
 80038be:	441a      	add	r2, r3
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	3304      	adds	r3, #4
 80038c4:	4619      	mov	r1, r3
 80038c6:	4610      	mov	r0, r2
 80038c8:	f7fe fbe1 	bl	800208e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80038cc:	2301      	movs	r3, #1
 80038ce:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80038d0:	697b      	ldr	r3, [r7, #20]
    }
 80038d2:	4618      	mov	r0, r3
 80038d4:	3718      	adds	r7, #24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	20000094 	.word	0x20000094
 80038e0:	20000174 	.word	0x20000174
 80038e4:	20000098 	.word	0x20000098

080038e8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80038f2:	4b32      	ldr	r3, [pc, #200]	; (80039bc <prvAddCurrentTaskToDelayedList+0xd4>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038f8:	4b31      	ldr	r3, [pc, #196]	; (80039c0 <prvAddCurrentTaskToDelayedList+0xd8>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	3304      	adds	r3, #4
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fe fc22 	bl	8002148 <uxListRemove>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10b      	bne.n	8003922 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800390a:	4b2d      	ldr	r3, [pc, #180]	; (80039c0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003910:	2201      	movs	r2, #1
 8003912:	fa02 f303 	lsl.w	r3, r2, r3
 8003916:	43da      	mvns	r2, r3
 8003918:	4b2a      	ldr	r3, [pc, #168]	; (80039c4 <prvAddCurrentTaskToDelayedList+0xdc>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4013      	ands	r3, r2
 800391e:	4a29      	ldr	r2, [pc, #164]	; (80039c4 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003920:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003928:	d110      	bne.n	800394c <prvAddCurrentTaskToDelayedList+0x64>
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00d      	beq.n	800394c <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003930:	4b23      	ldr	r3, [pc, #140]	; (80039c0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	211b      	movs	r1, #27
 8003936:	4618      	mov	r0, r3
 8003938:	f002 fcd0 	bl	80062dc <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800393c:	4b20      	ldr	r3, [pc, #128]	; (80039c0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	3304      	adds	r3, #4
 8003942:	4619      	mov	r1, r3
 8003944:	4820      	ldr	r0, [pc, #128]	; (80039c8 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003946:	f7fe fba2 	bl	800208e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800394a:	e032      	b.n	80039b2 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4413      	add	r3, r2
 8003952:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003954:	4b1a      	ldr	r3, [pc, #104]	; (80039c0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	429a      	cmp	r2, r3
 8003962:	d20f      	bcs.n	8003984 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003964:	4b16      	ldr	r3, [pc, #88]	; (80039c0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2104      	movs	r1, #4
 800396a:	4618      	mov	r0, r3
 800396c:	f002 fcb6 	bl	80062dc <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003970:	4b16      	ldr	r3, [pc, #88]	; (80039cc <prvAddCurrentTaskToDelayedList+0xe4>)
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	4b12      	ldr	r3, [pc, #72]	; (80039c0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	3304      	adds	r3, #4
 800397a:	4619      	mov	r1, r3
 800397c:	4610      	mov	r0, r2
 800397e:	f7fe fbaa 	bl	80020d6 <vListInsert>
}
 8003982:	e016      	b.n	80039b2 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003984:	4b0e      	ldr	r3, [pc, #56]	; (80039c0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2104      	movs	r1, #4
 800398a:	4618      	mov	r0, r3
 800398c:	f002 fca6 	bl	80062dc <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003990:	4b0f      	ldr	r3, [pc, #60]	; (80039d0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	4b0a      	ldr	r3, [pc, #40]	; (80039c0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	3304      	adds	r3, #4
 800399a:	4619      	mov	r1, r3
 800399c:	4610      	mov	r0, r2
 800399e:	f7fe fb9a 	bl	80020d6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80039a2:	4b0c      	ldr	r3, [pc, #48]	; (80039d4 <prvAddCurrentTaskToDelayedList+0xec>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68ba      	ldr	r2, [r7, #8]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d202      	bcs.n	80039b2 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80039ac:	4a09      	ldr	r2, [pc, #36]	; (80039d4 <prvAddCurrentTaskToDelayedList+0xec>)
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	6013      	str	r3, [r2, #0]
}
 80039b2:	bf00      	nop
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	20000170 	.word	0x20000170
 80039c0:	20000094 	.word	0x20000094
 80039c4:	20000174 	.word	0x20000174
 80039c8:	20000158 	.word	0x20000158
 80039cc:	20000128 	.word	0x20000128
 80039d0:	20000124 	.word	0x20000124
 80039d4:	2000018c 	.word	0x2000018c

080039d8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80039de:	2300      	movs	r3, #0
 80039e0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80039e2:	f000 fad5 	bl	8003f90 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80039e6:	4b11      	ldr	r3, [pc, #68]	; (8003a2c <xTimerCreateTimerTask+0x54>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00b      	beq.n	8003a06 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80039ee:	4b10      	ldr	r3, [pc, #64]	; (8003a30 <xTimerCreateTimerTask+0x58>)
 80039f0:	9301      	str	r3, [sp, #4]
 80039f2:	2302      	movs	r3, #2
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	2300      	movs	r3, #0
 80039f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80039fc:	490d      	ldr	r1, [pc, #52]	; (8003a34 <xTimerCreateTimerTask+0x5c>)
 80039fe:	480e      	ldr	r0, [pc, #56]	; (8003a38 <xTimerCreateTimerTask+0x60>)
 8003a00:	f7ff f926 	bl	8002c50 <xTaskCreate>
 8003a04:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10a      	bne.n	8003a22 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a10:	f383 8811 	msr	BASEPRI, r3
 8003a14:	f3bf 8f6f 	isb	sy
 8003a18:	f3bf 8f4f 	dsb	sy
 8003a1c:	603b      	str	r3, [r7, #0]
    }
 8003a1e:	bf00      	nop
 8003a20:	e7fe      	b.n	8003a20 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003a22:	687b      	ldr	r3, [r7, #4]
    }
 8003a24:	4618      	mov	r0, r3
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	200001c8 	.word	0x200001c8
 8003a30:	200001cc 	.word	0x200001cc
 8003a34:	080070ec 	.word	0x080070ec
 8003a38:	08003b71 	.word	0x08003b71

08003a3c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b08a      	sub	sp, #40	; 0x28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
 8003a48:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10a      	bne.n	8003a6a <xTimerGenericCommand+0x2e>
        __asm volatile
 8003a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a58:	f383 8811 	msr	BASEPRI, r3
 8003a5c:	f3bf 8f6f 	isb	sy
 8003a60:	f3bf 8f4f 	dsb	sy
 8003a64:	623b      	str	r3, [r7, #32]
    }
 8003a66:	bf00      	nop
 8003a68:	e7fe      	b.n	8003a68 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003a6a:	4b1a      	ldr	r3, [pc, #104]	; (8003ad4 <xTimerGenericCommand+0x98>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d02a      	beq.n	8003ac8 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	2b05      	cmp	r3, #5
 8003a82:	dc18      	bgt.n	8003ab6 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003a84:	f7ff fe92 	bl	80037ac <xTaskGetSchedulerState>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d109      	bne.n	8003aa2 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003a8e:	4b11      	ldr	r3, [pc, #68]	; (8003ad4 <xTimerGenericCommand+0x98>)
 8003a90:	6818      	ldr	r0, [r3, #0]
 8003a92:	f107 0114 	add.w	r1, r7, #20
 8003a96:	2300      	movs	r3, #0
 8003a98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a9a:	f7fe fc6f 	bl	800237c <xQueueGenericSend>
 8003a9e:	6278      	str	r0, [r7, #36]	; 0x24
 8003aa0:	e012      	b.n	8003ac8 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003aa2:	4b0c      	ldr	r3, [pc, #48]	; (8003ad4 <xTimerGenericCommand+0x98>)
 8003aa4:	6818      	ldr	r0, [r3, #0]
 8003aa6:	f107 0114 	add.w	r1, r7, #20
 8003aaa:	2300      	movs	r3, #0
 8003aac:	2200      	movs	r2, #0
 8003aae:	f7fe fc65 	bl	800237c <xQueueGenericSend>
 8003ab2:	6278      	str	r0, [r7, #36]	; 0x24
 8003ab4:	e008      	b.n	8003ac8 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003ab6:	4b07      	ldr	r3, [pc, #28]	; (8003ad4 <xTimerGenericCommand+0x98>)
 8003ab8:	6818      	ldr	r0, [r3, #0]
 8003aba:	f107 0114 	add.w	r1, r7, #20
 8003abe:	2300      	movs	r3, #0
 8003ac0:	683a      	ldr	r2, [r7, #0]
 8003ac2:	f7fe fd81 	bl	80025c8 <xQueueGenericSendFromISR>
 8003ac6:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003aca:	4618      	mov	r0, r3
 8003acc:	3728      	adds	r7, #40	; 0x28
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	200001c8 	.word	0x200001c8

08003ad8 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b088      	sub	sp, #32
 8003adc:	af02      	add	r7, sp, #8
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ae2:	4b22      	ldr	r3, [pc, #136]	; (8003b6c <prvProcessExpiredTimer+0x94>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	3304      	adds	r3, #4
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7fe fb29 	bl	8002148 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d022      	beq.n	8003b4a <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	699a      	ldr	r2, [r3, #24]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	18d1      	adds	r1, r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	683a      	ldr	r2, [r7, #0]
 8003b10:	6978      	ldr	r0, [r7, #20]
 8003b12:	f000 f8d1 	bl	8003cb8 <prvInsertTimerInActiveList>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d01f      	beq.n	8003b5c <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	2300      	movs	r3, #0
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	2100      	movs	r1, #0
 8003b26:	6978      	ldr	r0, [r7, #20]
 8003b28:	f7ff ff88 	bl	8003a3c <xTimerGenericCommand>
 8003b2c:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d113      	bne.n	8003b5c <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b38:	f383 8811 	msr	BASEPRI, r3
 8003b3c:	f3bf 8f6f 	isb	sy
 8003b40:	f3bf 8f4f 	dsb	sy
 8003b44:	60fb      	str	r3, [r7, #12]
    }
 8003b46:	bf00      	nop
 8003b48:	e7fe      	b.n	8003b48 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b50:	f023 0301 	bic.w	r3, r3, #1
 8003b54:	b2da      	uxtb	r2, r3
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	6978      	ldr	r0, [r7, #20]
 8003b62:	4798      	blx	r3
    }
 8003b64:	bf00      	nop
 8003b66:	3718      	adds	r7, #24
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	200001c0 	.word	0x200001c0

08003b70 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b78:	f107 0308 	add.w	r3, r7, #8
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f000 f857 	bl	8003c30 <prvGetNextExpireTime>
 8003b82:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	4619      	mov	r1, r3
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f000 f803 	bl	8003b94 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003b8e:	f000 f8d5 	bl	8003d3c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b92:	e7f1      	b.n	8003b78 <prvTimerTask+0x8>

08003b94 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003b9e:	f7ff fa1d 	bl	8002fdc <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ba2:	f107 0308 	add.w	r3, r7, #8
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 f866 	bl	8003c78 <prvSampleTimeNow>
 8003bac:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d130      	bne.n	8003c16 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10a      	bne.n	8003bd0 <prvProcessTimerOrBlockTask+0x3c>
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d806      	bhi.n	8003bd0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003bc2:	f7ff fa19 	bl	8002ff8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003bc6:	68f9      	ldr	r1, [r7, #12]
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f7ff ff85 	bl	8003ad8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003bce:	e024      	b.n	8003c1a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d008      	beq.n	8003be8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003bd6:	4b13      	ldr	r3, [pc, #76]	; (8003c24 <prvProcessTimerOrBlockTask+0x90>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d101      	bne.n	8003be4 <prvProcessTimerOrBlockTask+0x50>
 8003be0:	2301      	movs	r3, #1
 8003be2:	e000      	b.n	8003be6 <prvProcessTimerOrBlockTask+0x52>
 8003be4:	2300      	movs	r3, #0
 8003be6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003be8:	4b0f      	ldr	r3, [pc, #60]	; (8003c28 <prvProcessTimerOrBlockTask+0x94>)
 8003bea:	6818      	ldr	r0, [r3, #0]
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	f7fe fff7 	bl	8002be8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003bfa:	f7ff f9fd 	bl	8002ff8 <xTaskResumeAll>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10a      	bne.n	8003c1a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003c04:	4b09      	ldr	r3, [pc, #36]	; (8003c2c <prvProcessTimerOrBlockTask+0x98>)
 8003c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	f3bf 8f4f 	dsb	sy
 8003c10:	f3bf 8f6f 	isb	sy
    }
 8003c14:	e001      	b.n	8003c1a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003c16:	f7ff f9ef 	bl	8002ff8 <xTaskResumeAll>
    }
 8003c1a:	bf00      	nop
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	200001c4 	.word	0x200001c4
 8003c28:	200001c8 	.word	0x200001c8
 8003c2c:	e000ed04 	.word	0xe000ed04

08003c30 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003c38:	4b0e      	ldr	r3, [pc, #56]	; (8003c74 <prvGetNextExpireTime+0x44>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <prvGetNextExpireTime+0x16>
 8003c42:	2201      	movs	r2, #1
 8003c44:	e000      	b.n	8003c48 <prvGetNextExpireTime+0x18>
 8003c46:	2200      	movs	r2, #0
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d105      	bne.n	8003c60 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c54:	4b07      	ldr	r3, [pc, #28]	; (8003c74 <prvGetNextExpireTime+0x44>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	60fb      	str	r3, [r7, #12]
 8003c5e:	e001      	b.n	8003c64 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003c60:	2300      	movs	r3, #0
 8003c62:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003c64:	68fb      	ldr	r3, [r7, #12]
    }
 8003c66:	4618      	mov	r0, r3
 8003c68:	3714      	adds	r7, #20
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	200001c0 	.word	0x200001c0

08003c78 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003c80:	f7ff fa5a 	bl	8003138 <xTaskGetTickCount>
 8003c84:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003c86:	4b0b      	ldr	r3, [pc, #44]	; (8003cb4 <prvSampleTimeNow+0x3c>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d205      	bcs.n	8003c9c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003c90:	f000 f91a 	bl	8003ec8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	e002      	b.n	8003ca2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003ca2:	4a04      	ldr	r2, [pc, #16]	; (8003cb4 <prvSampleTimeNow+0x3c>)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
    }
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	200001d0 	.word	0x200001d0

08003cb8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
 8003cc4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d812      	bhi.n	8003d04 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	1ad2      	subs	r2, r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d302      	bcc.n	8003cf2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003cec:	2301      	movs	r3, #1
 8003cee:	617b      	str	r3, [r7, #20]
 8003cf0:	e01b      	b.n	8003d2a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003cf2:	4b10      	ldr	r3, [pc, #64]	; (8003d34 <prvInsertTimerInActiveList+0x7c>)
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	4610      	mov	r0, r2
 8003cfe:	f7fe f9ea 	bl	80020d6 <vListInsert>
 8003d02:	e012      	b.n	8003d2a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d206      	bcs.n	8003d1a <prvInsertTimerInActiveList+0x62>
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d302      	bcc.n	8003d1a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003d14:	2301      	movs	r3, #1
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	e007      	b.n	8003d2a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d1a:	4b07      	ldr	r3, [pc, #28]	; (8003d38 <prvInsertTimerInActiveList+0x80>)
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	3304      	adds	r3, #4
 8003d22:	4619      	mov	r1, r3
 8003d24:	4610      	mov	r0, r2
 8003d26:	f7fe f9d6 	bl	80020d6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003d2a:	697b      	ldr	r3, [r7, #20]
    }
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3718      	adds	r7, #24
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	200001c4 	.word	0x200001c4
 8003d38:	200001c0 	.word	0x200001c0

08003d3c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b08c      	sub	sp, #48	; 0x30
 8003d40:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d42:	e0ae      	b.n	8003ea2 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f2c0 80aa 	blt.w	8003ea0 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d004      	beq.n	8003d62 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5a:	3304      	adds	r3, #4
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7fe f9f3 	bl	8002148 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d62:	1d3b      	adds	r3, r7, #4
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7ff ff87 	bl	8003c78 <prvSampleTimeNow>
 8003d6a:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	2b09      	cmp	r3, #9
 8003d70:	f200 8097 	bhi.w	8003ea2 <prvProcessReceivedCommands+0x166>
 8003d74:	a201      	add	r2, pc, #4	; (adr r2, 8003d7c <prvProcessReceivedCommands+0x40>)
 8003d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7a:	bf00      	nop
 8003d7c:	08003da5 	.word	0x08003da5
 8003d80:	08003da5 	.word	0x08003da5
 8003d84:	08003da5 	.word	0x08003da5
 8003d88:	08003e19 	.word	0x08003e19
 8003d8c:	08003e2d 	.word	0x08003e2d
 8003d90:	08003e77 	.word	0x08003e77
 8003d94:	08003da5 	.word	0x08003da5
 8003d98:	08003da5 	.word	0x08003da5
 8003d9c:	08003e19 	.word	0x08003e19
 8003da0:	08003e2d 	.word	0x08003e2d
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003daa:	f043 0301 	orr.w	r3, r3, #1
 8003dae:	b2da      	uxtb	r2, r3
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	18d1      	adds	r1, r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6a3a      	ldr	r2, [r7, #32]
 8003dc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003dc4:	f7ff ff78 	bl	8003cb8 <prvInsertTimerInActiveList>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d069      	beq.n	8003ea2 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003dd4:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d05e      	beq.n	8003ea2 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	441a      	add	r2, r3
 8003dec:	2300      	movs	r3, #0
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	2300      	movs	r3, #0
 8003df2:	2100      	movs	r1, #0
 8003df4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003df6:	f7ff fe21 	bl	8003a3c <xTimerGenericCommand>
 8003dfa:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d14f      	bne.n	8003ea2 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8003e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e06:	f383 8811 	msr	BASEPRI, r3
 8003e0a:	f3bf 8f6f 	isb	sy
 8003e0e:	f3bf 8f4f 	dsb	sy
 8003e12:	61bb      	str	r3, [r7, #24]
    }
 8003e14:	bf00      	nop
 8003e16:	e7fe      	b.n	8003e16 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e1e:	f023 0301 	bic.w	r3, r3, #1
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003e2a:	e03a      	b.n	8003ea2 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e32:	f043 0301 	orr.w	r3, r3, #1
 8003e36:	b2da      	uxtb	r2, r3
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10a      	bne.n	8003e62 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8003e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e50:	f383 8811 	msr	BASEPRI, r3
 8003e54:	f3bf 8f6f 	isb	sy
 8003e58:	f3bf 8f4f 	dsb	sy
 8003e5c:	617b      	str	r3, [r7, #20]
    }
 8003e5e:	bf00      	nop
 8003e60:	e7fe      	b.n	8003e60 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	699a      	ldr	r2, [r3, #24]
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	18d1      	adds	r1, r2, r3
 8003e6a:	6a3b      	ldr	r3, [r7, #32]
 8003e6c:	6a3a      	ldr	r2, [r7, #32]
 8003e6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e70:	f7ff ff22 	bl	8003cb8 <prvInsertTimerInActiveList>
                        break;
 8003e74:	e015      	b.n	8003ea2 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d103      	bne.n	8003e8c <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8003e84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e86:	f000 fc71 	bl	800476c <vPortFree>
 8003e8a:	e00a      	b.n	8003ea2 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e92:	f023 0301 	bic.w	r3, r3, #1
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003e9e:	e000      	b.n	8003ea2 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003ea0:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ea2:	4b08      	ldr	r3, [pc, #32]	; (8003ec4 <prvProcessReceivedCommands+0x188>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f107 0108 	add.w	r1, r7, #8
 8003eaa:	2200      	movs	r2, #0
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7fe fc49 	bl	8002744 <xQueueReceive>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f47f af45 	bne.w	8003d44 <prvProcessReceivedCommands+0x8>
        }
    }
 8003eba:	bf00      	nop
 8003ebc:	bf00      	nop
 8003ebe:	3728      	adds	r7, #40	; 0x28
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	200001c8 	.word	0x200001c8

08003ec8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b088      	sub	sp, #32
 8003ecc:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ece:	e048      	b.n	8003f62 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ed0:	4b2d      	ldr	r3, [pc, #180]	; (8003f88 <prvSwitchTimerLists+0xc0>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eda:	4b2b      	ldr	r3, [pc, #172]	; (8003f88 <prvSwitchTimerLists+0xc0>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	3304      	adds	r3, #4
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7fe f92d 	bl	8002148 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003efc:	f003 0304 	and.w	r3, r3, #4
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d02e      	beq.n	8003f62 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d90e      	bls.n	8003f34 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	68ba      	ldr	r2, [r7, #8]
 8003f1a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f22:	4b19      	ldr	r3, [pc, #100]	; (8003f88 <prvSwitchTimerLists+0xc0>)
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	3304      	adds	r3, #4
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	4610      	mov	r0, r2
 8003f2e:	f7fe f8d2 	bl	80020d6 <vListInsert>
 8003f32:	e016      	b.n	8003f62 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f34:	2300      	movs	r3, #0
 8003f36:	9300      	str	r3, [sp, #0]
 8003f38:	2300      	movs	r3, #0
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f7ff fd7c 	bl	8003a3c <xTimerGenericCommand>
 8003f44:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10a      	bne.n	8003f62 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8003f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f50:	f383 8811 	msr	BASEPRI, r3
 8003f54:	f3bf 8f6f 	isb	sy
 8003f58:	f3bf 8f4f 	dsb	sy
 8003f5c:	603b      	str	r3, [r7, #0]
    }
 8003f5e:	bf00      	nop
 8003f60:	e7fe      	b.n	8003f60 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f62:	4b09      	ldr	r3, [pc, #36]	; (8003f88 <prvSwitchTimerLists+0xc0>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1b1      	bne.n	8003ed0 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003f6c:	4b06      	ldr	r3, [pc, #24]	; (8003f88 <prvSwitchTimerLists+0xc0>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003f72:	4b06      	ldr	r3, [pc, #24]	; (8003f8c <prvSwitchTimerLists+0xc4>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a04      	ldr	r2, [pc, #16]	; (8003f88 <prvSwitchTimerLists+0xc0>)
 8003f78:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003f7a:	4a04      	ldr	r2, [pc, #16]	; (8003f8c <prvSwitchTimerLists+0xc4>)
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	6013      	str	r3, [r2, #0]
    }
 8003f80:	bf00      	nop
 8003f82:	3718      	adds	r7, #24
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	200001c0 	.word	0x200001c0
 8003f8c:	200001c4 	.word	0x200001c4

08003f90 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003f94:	f000 f9de 	bl	8004354 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003f98:	4b12      	ldr	r3, [pc, #72]	; (8003fe4 <prvCheckForValidListAndQueue+0x54>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d11d      	bne.n	8003fdc <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003fa0:	4811      	ldr	r0, [pc, #68]	; (8003fe8 <prvCheckForValidListAndQueue+0x58>)
 8003fa2:	f7fe f847 	bl	8002034 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003fa6:	4811      	ldr	r0, [pc, #68]	; (8003fec <prvCheckForValidListAndQueue+0x5c>)
 8003fa8:	f7fe f844 	bl	8002034 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003fac:	4b10      	ldr	r3, [pc, #64]	; (8003ff0 <prvCheckForValidListAndQueue+0x60>)
 8003fae:	4a0e      	ldr	r2, [pc, #56]	; (8003fe8 <prvCheckForValidListAndQueue+0x58>)
 8003fb0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003fb2:	4b10      	ldr	r3, [pc, #64]	; (8003ff4 <prvCheckForValidListAndQueue+0x64>)
 8003fb4:	4a0d      	ldr	r2, [pc, #52]	; (8003fec <prvCheckForValidListAndQueue+0x5c>)
 8003fb6:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003fb8:	2200      	movs	r2, #0
 8003fba:	210c      	movs	r1, #12
 8003fbc:	200a      	movs	r0, #10
 8003fbe:	f7fe f955 	bl	800226c <xQueueGenericCreate>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	4a07      	ldr	r2, [pc, #28]	; (8003fe4 <prvCheckForValidListAndQueue+0x54>)
 8003fc6:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003fc8:	4b06      	ldr	r3, [pc, #24]	; (8003fe4 <prvCheckForValidListAndQueue+0x54>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d005      	beq.n	8003fdc <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003fd0:	4b04      	ldr	r3, [pc, #16]	; (8003fe4 <prvCheckForValidListAndQueue+0x54>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4908      	ldr	r1, [pc, #32]	; (8003ff8 <prvCheckForValidListAndQueue+0x68>)
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7fe fdd4 	bl	8002b84 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003fdc:	f000 f9ea 	bl	80043b4 <vPortExitCritical>
    }
 8003fe0:	bf00      	nop
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	200001c8 	.word	0x200001c8
 8003fe8:	20000198 	.word	0x20000198
 8003fec:	200001ac 	.word	0x200001ac
 8003ff0:	200001c0 	.word	0x200001c0
 8003ff4:	200001c4 	.word	0x200001c4
 8003ff8:	080070f4 	.word	0x080070f4

08003ffc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	3b04      	subs	r3, #4
 800400c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004014:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	3b04      	subs	r3, #4
 800401a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	f023 0201 	bic.w	r2, r3, #1
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	3b04      	subs	r3, #4
 800402a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800402c:	4a0c      	ldr	r2, [pc, #48]	; (8004060 <pxPortInitialiseStack+0x64>)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	3b14      	subs	r3, #20
 8004036:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	3b04      	subs	r3, #4
 8004042:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f06f 0202 	mvn.w	r2, #2
 800404a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	3b20      	subs	r3, #32
 8004050:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004052:	68fb      	ldr	r3, [r7, #12]
}
 8004054:	4618      	mov	r0, r3
 8004056:	3714      	adds	r7, #20
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	08004065 	.word	0x08004065

08004064 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800406a:	2300      	movs	r3, #0
 800406c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800406e:	4b12      	ldr	r3, [pc, #72]	; (80040b8 <prvTaskExitError+0x54>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004076:	d00a      	beq.n	800408e <prvTaskExitError+0x2a>
        __asm volatile
 8004078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407c:	f383 8811 	msr	BASEPRI, r3
 8004080:	f3bf 8f6f 	isb	sy
 8004084:	f3bf 8f4f 	dsb	sy
 8004088:	60fb      	str	r3, [r7, #12]
    }
 800408a:	bf00      	nop
 800408c:	e7fe      	b.n	800408c <prvTaskExitError+0x28>
        __asm volatile
 800408e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004092:	f383 8811 	msr	BASEPRI, r3
 8004096:	f3bf 8f6f 	isb	sy
 800409a:	f3bf 8f4f 	dsb	sy
 800409e:	60bb      	str	r3, [r7, #8]
    }
 80040a0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80040a2:	bf00      	nop
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0fc      	beq.n	80040a4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80040aa:	bf00      	nop
 80040ac:	bf00      	nop
 80040ae:	3714      	adds	r7, #20
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr
 80040b8:	20000010 	.word	0x20000010
 80040bc:	00000000 	.word	0x00000000

080040c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80040c0:	4b07      	ldr	r3, [pc, #28]	; (80040e0 <pxCurrentTCBConst2>)
 80040c2:	6819      	ldr	r1, [r3, #0]
 80040c4:	6808      	ldr	r0, [r1, #0]
 80040c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ca:	f380 8809 	msr	PSP, r0
 80040ce:	f3bf 8f6f 	isb	sy
 80040d2:	f04f 0000 	mov.w	r0, #0
 80040d6:	f380 8811 	msr	BASEPRI, r0
 80040da:	4770      	bx	lr
 80040dc:	f3af 8000 	nop.w

080040e0 <pxCurrentTCBConst2>:
 80040e0:	20000094 	.word	0x20000094
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80040e4:	bf00      	nop
 80040e6:	bf00      	nop

080040e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80040e8:	4808      	ldr	r0, [pc, #32]	; (800410c <prvPortStartFirstTask+0x24>)
 80040ea:	6800      	ldr	r0, [r0, #0]
 80040ec:	6800      	ldr	r0, [r0, #0]
 80040ee:	f380 8808 	msr	MSP, r0
 80040f2:	f04f 0000 	mov.w	r0, #0
 80040f6:	f380 8814 	msr	CONTROL, r0
 80040fa:	b662      	cpsie	i
 80040fc:	b661      	cpsie	f
 80040fe:	f3bf 8f4f 	dsb	sy
 8004102:	f3bf 8f6f 	isb	sy
 8004106:	df00      	svc	0
 8004108:	bf00      	nop
 800410a:	0000      	.short	0x0000
 800410c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004110:	bf00      	nop
 8004112:	bf00      	nop

08004114 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800411a:	4b46      	ldr	r3, [pc, #280]	; (8004234 <xPortStartScheduler+0x120>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a46      	ldr	r2, [pc, #280]	; (8004238 <xPortStartScheduler+0x124>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d10a      	bne.n	800413a <xPortStartScheduler+0x26>
        __asm volatile
 8004124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004128:	f383 8811 	msr	BASEPRI, r3
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	f3bf 8f4f 	dsb	sy
 8004134:	613b      	str	r3, [r7, #16]
    }
 8004136:	bf00      	nop
 8004138:	e7fe      	b.n	8004138 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800413a:	4b3e      	ldr	r3, [pc, #248]	; (8004234 <xPortStartScheduler+0x120>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a3f      	ldr	r2, [pc, #252]	; (800423c <xPortStartScheduler+0x128>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d10a      	bne.n	800415a <xPortStartScheduler+0x46>
        __asm volatile
 8004144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004148:	f383 8811 	msr	BASEPRI, r3
 800414c:	f3bf 8f6f 	isb	sy
 8004150:	f3bf 8f4f 	dsb	sy
 8004154:	60fb      	str	r3, [r7, #12]
    }
 8004156:	bf00      	nop
 8004158:	e7fe      	b.n	8004158 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800415a:	4b39      	ldr	r3, [pc, #228]	; (8004240 <xPortStartScheduler+0x12c>)
 800415c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	b2db      	uxtb	r3, r3
 8004164:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	22ff      	movs	r2, #255	; 0xff
 800416a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	b2db      	uxtb	r3, r3
 8004172:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004174:	78fb      	ldrb	r3, [r7, #3]
 8004176:	b2db      	uxtb	r3, r3
 8004178:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800417c:	b2da      	uxtb	r2, r3
 800417e:	4b31      	ldr	r3, [pc, #196]	; (8004244 <xPortStartScheduler+0x130>)
 8004180:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004182:	4b31      	ldr	r3, [pc, #196]	; (8004248 <xPortStartScheduler+0x134>)
 8004184:	2207      	movs	r2, #7
 8004186:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004188:	e009      	b.n	800419e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800418a:	4b2f      	ldr	r3, [pc, #188]	; (8004248 <xPortStartScheduler+0x134>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	3b01      	subs	r3, #1
 8004190:	4a2d      	ldr	r2, [pc, #180]	; (8004248 <xPortStartScheduler+0x134>)
 8004192:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004194:	78fb      	ldrb	r3, [r7, #3]
 8004196:	b2db      	uxtb	r3, r3
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	b2db      	uxtb	r3, r3
 800419c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800419e:	78fb      	ldrb	r3, [r7, #3]
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a6:	2b80      	cmp	r3, #128	; 0x80
 80041a8:	d0ef      	beq.n	800418a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80041aa:	4b27      	ldr	r3, [pc, #156]	; (8004248 <xPortStartScheduler+0x134>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f1c3 0307 	rsb	r3, r3, #7
 80041b2:	2b04      	cmp	r3, #4
 80041b4:	d00a      	beq.n	80041cc <xPortStartScheduler+0xb8>
        __asm volatile
 80041b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ba:	f383 8811 	msr	BASEPRI, r3
 80041be:	f3bf 8f6f 	isb	sy
 80041c2:	f3bf 8f4f 	dsb	sy
 80041c6:	60bb      	str	r3, [r7, #8]
    }
 80041c8:	bf00      	nop
 80041ca:	e7fe      	b.n	80041ca <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80041cc:	4b1e      	ldr	r3, [pc, #120]	; (8004248 <xPortStartScheduler+0x134>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	021b      	lsls	r3, r3, #8
 80041d2:	4a1d      	ldr	r2, [pc, #116]	; (8004248 <xPortStartScheduler+0x134>)
 80041d4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80041d6:	4b1c      	ldr	r3, [pc, #112]	; (8004248 <xPortStartScheduler+0x134>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041de:	4a1a      	ldr	r2, [pc, #104]	; (8004248 <xPortStartScheduler+0x134>)
 80041e0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80041ea:	4b18      	ldr	r3, [pc, #96]	; (800424c <xPortStartScheduler+0x138>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a17      	ldr	r2, [pc, #92]	; (800424c <xPortStartScheduler+0x138>)
 80041f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041f4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80041f6:	4b15      	ldr	r3, [pc, #84]	; (800424c <xPortStartScheduler+0x138>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a14      	ldr	r2, [pc, #80]	; (800424c <xPortStartScheduler+0x138>)
 80041fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004200:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004202:	f000 f963 	bl	80044cc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004206:	4b12      	ldr	r3, [pc, #72]	; (8004250 <xPortStartScheduler+0x13c>)
 8004208:	2200      	movs	r2, #0
 800420a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800420c:	f000 f982 	bl	8004514 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004210:	4b10      	ldr	r3, [pc, #64]	; (8004254 <xPortStartScheduler+0x140>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a0f      	ldr	r2, [pc, #60]	; (8004254 <xPortStartScheduler+0x140>)
 8004216:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800421a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800421c:	f7ff ff64 	bl	80040e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004220:	f7ff f868 	bl	80032f4 <vTaskSwitchContext>
    prvTaskExitError();
 8004224:	f7ff ff1e 	bl	8004064 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3718      	adds	r7, #24
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	e000ed00 	.word	0xe000ed00
 8004238:	410fc271 	.word	0x410fc271
 800423c:	410fc270 	.word	0x410fc270
 8004240:	e000e400 	.word	0xe000e400
 8004244:	200001d4 	.word	0x200001d4
 8004248:	200001d8 	.word	0x200001d8
 800424c:	e000ed20 	.word	0xe000ed20
 8004250:	20000010 	.word	0x20000010
 8004254:	e000ef34 	.word	0xe000ef34

08004258 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004258:	b480      	push	{r7}
 800425a:	b087      	sub	sp, #28
 800425c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800425e:	4b37      	ldr	r3, [pc, #220]	; (800433c <vInitPrioGroupValue+0xe4>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a37      	ldr	r2, [pc, #220]	; (8004340 <vInitPrioGroupValue+0xe8>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d10a      	bne.n	800427e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426c:	f383 8811 	msr	BASEPRI, r3
 8004270:	f3bf 8f6f 	isb	sy
 8004274:	f3bf 8f4f 	dsb	sy
 8004278:	613b      	str	r3, [r7, #16]
    }
 800427a:	bf00      	nop
 800427c:	e7fe      	b.n	800427c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800427e:	4b2f      	ldr	r3, [pc, #188]	; (800433c <vInitPrioGroupValue+0xe4>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a30      	ldr	r2, [pc, #192]	; (8004344 <vInitPrioGroupValue+0xec>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d10a      	bne.n	800429e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428c:	f383 8811 	msr	BASEPRI, r3
 8004290:	f3bf 8f6f 	isb	sy
 8004294:	f3bf 8f4f 	dsb	sy
 8004298:	60fb      	str	r3, [r7, #12]
    }
 800429a:	bf00      	nop
 800429c:	e7fe      	b.n	800429c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800429e:	4b2a      	ldr	r3, [pc, #168]	; (8004348 <vInitPrioGroupValue+0xf0>)
 80042a0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	22ff      	movs	r2, #255	; 0xff
 80042ae:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80042b8:	78fb      	ldrb	r3, [r7, #3]
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80042c0:	b2da      	uxtb	r2, r3
 80042c2:	4b22      	ldr	r3, [pc, #136]	; (800434c <vInitPrioGroupValue+0xf4>)
 80042c4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80042c6:	4b22      	ldr	r3, [pc, #136]	; (8004350 <vInitPrioGroupValue+0xf8>)
 80042c8:	2207      	movs	r2, #7
 80042ca:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042cc:	e009      	b.n	80042e2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80042ce:	4b20      	ldr	r3, [pc, #128]	; (8004350 <vInitPrioGroupValue+0xf8>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	3b01      	subs	r3, #1
 80042d4:	4a1e      	ldr	r2, [pc, #120]	; (8004350 <vInitPrioGroupValue+0xf8>)
 80042d6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80042d8:	78fb      	ldrb	r3, [r7, #3]
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042e2:	78fb      	ldrb	r3, [r7, #3]
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ea:	2b80      	cmp	r3, #128	; 0x80
 80042ec:	d0ef      	beq.n	80042ce <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80042ee:	4b18      	ldr	r3, [pc, #96]	; (8004350 <vInitPrioGroupValue+0xf8>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f1c3 0307 	rsb	r3, r3, #7
 80042f6:	2b04      	cmp	r3, #4
 80042f8:	d00a      	beq.n	8004310 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80042fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fe:	f383 8811 	msr	BASEPRI, r3
 8004302:	f3bf 8f6f 	isb	sy
 8004306:	f3bf 8f4f 	dsb	sy
 800430a:	60bb      	str	r3, [r7, #8]
    }
 800430c:	bf00      	nop
 800430e:	e7fe      	b.n	800430e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004310:	4b0f      	ldr	r3, [pc, #60]	; (8004350 <vInitPrioGroupValue+0xf8>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	021b      	lsls	r3, r3, #8
 8004316:	4a0e      	ldr	r2, [pc, #56]	; (8004350 <vInitPrioGroupValue+0xf8>)
 8004318:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800431a:	4b0d      	ldr	r3, [pc, #52]	; (8004350 <vInitPrioGroupValue+0xf8>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004322:	4a0b      	ldr	r2, [pc, #44]	; (8004350 <vInitPrioGroupValue+0xf8>)
 8004324:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	b2da      	uxtb	r2, r3
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800432e:	bf00      	nop
 8004330:	371c      	adds	r7, #28
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	e000ed00 	.word	0xe000ed00
 8004340:	410fc271 	.word	0x410fc271
 8004344:	410fc270 	.word	0x410fc270
 8004348:	e000e400 	.word	0xe000e400
 800434c:	200001d4 	.word	0x200001d4
 8004350:	200001d8 	.word	0x200001d8

08004354 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
        __asm volatile
 800435a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435e:	f383 8811 	msr	BASEPRI, r3
 8004362:	f3bf 8f6f 	isb	sy
 8004366:	f3bf 8f4f 	dsb	sy
 800436a:	607b      	str	r3, [r7, #4]
    }
 800436c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800436e:	4b0f      	ldr	r3, [pc, #60]	; (80043ac <vPortEnterCritical+0x58>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	3301      	adds	r3, #1
 8004374:	4a0d      	ldr	r2, [pc, #52]	; (80043ac <vPortEnterCritical+0x58>)
 8004376:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004378:	4b0c      	ldr	r3, [pc, #48]	; (80043ac <vPortEnterCritical+0x58>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d10f      	bne.n	80043a0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004380:	4b0b      	ldr	r3, [pc, #44]	; (80043b0 <vPortEnterCritical+0x5c>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00a      	beq.n	80043a0 <vPortEnterCritical+0x4c>
        __asm volatile
 800438a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	603b      	str	r3, [r7, #0]
    }
 800439c:	bf00      	nop
 800439e:	e7fe      	b.n	800439e <vPortEnterCritical+0x4a>
    }
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr
 80043ac:	20000010 	.word	0x20000010
 80043b0:	e000ed04 	.word	0xe000ed04

080043b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80043ba:	4b12      	ldr	r3, [pc, #72]	; (8004404 <vPortExitCritical+0x50>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10a      	bne.n	80043d8 <vPortExitCritical+0x24>
        __asm volatile
 80043c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c6:	f383 8811 	msr	BASEPRI, r3
 80043ca:	f3bf 8f6f 	isb	sy
 80043ce:	f3bf 8f4f 	dsb	sy
 80043d2:	607b      	str	r3, [r7, #4]
    }
 80043d4:	bf00      	nop
 80043d6:	e7fe      	b.n	80043d6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80043d8:	4b0a      	ldr	r3, [pc, #40]	; (8004404 <vPortExitCritical+0x50>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	3b01      	subs	r3, #1
 80043de:	4a09      	ldr	r2, [pc, #36]	; (8004404 <vPortExitCritical+0x50>)
 80043e0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80043e2:	4b08      	ldr	r3, [pc, #32]	; (8004404 <vPortExitCritical+0x50>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d105      	bne.n	80043f6 <vPortExitCritical+0x42>
 80043ea:	2300      	movs	r3, #0
 80043ec:	603b      	str	r3, [r7, #0]
        __asm volatile
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	f383 8811 	msr	BASEPRI, r3
    }
 80043f4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80043f6:	bf00      	nop
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	20000010 	.word	0x20000010
	...

08004410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004410:	f3ef 8009 	mrs	r0, PSP
 8004414:	f3bf 8f6f 	isb	sy
 8004418:	4b15      	ldr	r3, [pc, #84]	; (8004470 <pxCurrentTCBConst>)
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	f01e 0f10 	tst.w	lr, #16
 8004420:	bf08      	it	eq
 8004422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800442a:	6010      	str	r0, [r2, #0]
 800442c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004430:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004434:	f380 8811 	msr	BASEPRI, r0
 8004438:	f3bf 8f4f 	dsb	sy
 800443c:	f3bf 8f6f 	isb	sy
 8004440:	f7fe ff58 	bl	80032f4 <vTaskSwitchContext>
 8004444:	f04f 0000 	mov.w	r0, #0
 8004448:	f380 8811 	msr	BASEPRI, r0
 800444c:	bc09      	pop	{r0, r3}
 800444e:	6819      	ldr	r1, [r3, #0]
 8004450:	6808      	ldr	r0, [r1, #0]
 8004452:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004456:	f01e 0f10 	tst.w	lr, #16
 800445a:	bf08      	it	eq
 800445c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004460:	f380 8809 	msr	PSP, r0
 8004464:	f3bf 8f6f 	isb	sy
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	f3af 8000 	nop.w

08004470 <pxCurrentTCBConst>:
 8004470:	20000094 	.word	0x20000094
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004474:	bf00      	nop
 8004476:	bf00      	nop

08004478 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
        __asm volatile
 800447e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004482:	f383 8811 	msr	BASEPRI, r3
 8004486:	f3bf 8f6f 	isb	sy
 800448a:	f3bf 8f4f 	dsb	sy
 800448e:	607b      	str	r3, [r7, #4]
    }
 8004490:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004492:	f001 fdc7 	bl	8006024 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004496:	f7fe fe71 	bl	800317c <xTaskIncrementTick>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d006      	beq.n	80044ae <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80044a0:	f001 fe1e 	bl	80060e0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80044a4:	4b08      	ldr	r3, [pc, #32]	; (80044c8 <SysTick_Handler+0x50>)
 80044a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	e001      	b.n	80044b2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80044ae:	f001 fdfb 	bl	80060a8 <SEGGER_SYSVIEW_RecordExitISR>
 80044b2:	2300      	movs	r3, #0
 80044b4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	f383 8811 	msr	BASEPRI, r3
    }
 80044bc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80044be:	bf00      	nop
 80044c0:	3708      	adds	r7, #8
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	e000ed04 	.word	0xe000ed04

080044cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80044d0:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <vPortSetupTimerInterrupt+0x34>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80044d6:	4b0b      	ldr	r3, [pc, #44]	; (8004504 <vPortSetupTimerInterrupt+0x38>)
 80044d8:	2200      	movs	r2, #0
 80044da:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80044dc:	4b0a      	ldr	r3, [pc, #40]	; (8004508 <vPortSetupTimerInterrupt+0x3c>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a0a      	ldr	r2, [pc, #40]	; (800450c <vPortSetupTimerInterrupt+0x40>)
 80044e2:	fba2 2303 	umull	r2, r3, r2, r3
 80044e6:	099b      	lsrs	r3, r3, #6
 80044e8:	4a09      	ldr	r2, [pc, #36]	; (8004510 <vPortSetupTimerInterrupt+0x44>)
 80044ea:	3b01      	subs	r3, #1
 80044ec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80044ee:	4b04      	ldr	r3, [pc, #16]	; (8004500 <vPortSetupTimerInterrupt+0x34>)
 80044f0:	2207      	movs	r2, #7
 80044f2:	601a      	str	r2, [r3, #0]
}
 80044f4:	bf00      	nop
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	e000e010 	.word	0xe000e010
 8004504:	e000e018 	.word	0xe000e018
 8004508:	20000000 	.word	0x20000000
 800450c:	10624dd3 	.word	0x10624dd3
 8004510:	e000e014 	.word	0xe000e014

08004514 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004514:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004524 <vPortEnableVFP+0x10>
 8004518:	6801      	ldr	r1, [r0, #0]
 800451a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800451e:	6001      	str	r1, [r0, #0]
 8004520:	4770      	bx	lr
 8004522:	0000      	.short	0x0000
 8004524:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004528:	bf00      	nop
 800452a:	bf00      	nop

0800452c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004532:	f3ef 8305 	mrs	r3, IPSR
 8004536:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2b0f      	cmp	r3, #15
 800453c:	d914      	bls.n	8004568 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800453e:	4a17      	ldr	r2, [pc, #92]	; (800459c <vPortValidateInterruptPriority+0x70>)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	4413      	add	r3, r2
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004548:	4b15      	ldr	r3, [pc, #84]	; (80045a0 <vPortValidateInterruptPriority+0x74>)
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	7afa      	ldrb	r2, [r7, #11]
 800454e:	429a      	cmp	r2, r3
 8004550:	d20a      	bcs.n	8004568 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004556:	f383 8811 	msr	BASEPRI, r3
 800455a:	f3bf 8f6f 	isb	sy
 800455e:	f3bf 8f4f 	dsb	sy
 8004562:	607b      	str	r3, [r7, #4]
    }
 8004564:	bf00      	nop
 8004566:	e7fe      	b.n	8004566 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004568:	4b0e      	ldr	r3, [pc, #56]	; (80045a4 <vPortValidateInterruptPriority+0x78>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004570:	4b0d      	ldr	r3, [pc, #52]	; (80045a8 <vPortValidateInterruptPriority+0x7c>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	429a      	cmp	r2, r3
 8004576:	d90a      	bls.n	800458e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457c:	f383 8811 	msr	BASEPRI, r3
 8004580:	f3bf 8f6f 	isb	sy
 8004584:	f3bf 8f4f 	dsb	sy
 8004588:	603b      	str	r3, [r7, #0]
    }
 800458a:	bf00      	nop
 800458c:	e7fe      	b.n	800458c <vPortValidateInterruptPriority+0x60>
    }
 800458e:	bf00      	nop
 8004590:	3714      	adds	r7, #20
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	e000e3f0 	.word	0xe000e3f0
 80045a0:	200001d4 	.word	0x200001d4
 80045a4:	e000ed0c 	.word	0xe000ed0c
 80045a8:	200001d8 	.word	0x200001d8

080045ac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b08a      	sub	sp, #40	; 0x28
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80045b4:	2300      	movs	r3, #0
 80045b6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80045b8:	f7fe fd10 	bl	8002fdc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80045bc:	4b65      	ldr	r3, [pc, #404]	; (8004754 <pvPortMalloc+0x1a8>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d101      	bne.n	80045c8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80045c4:	f000 f934 	bl	8004830 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80045c8:	4b63      	ldr	r3, [pc, #396]	; (8004758 <pvPortMalloc+0x1ac>)
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4013      	ands	r3, r2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f040 80a7 	bne.w	8004724 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d02d      	beq.n	8004638 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80045dc:	2208      	movs	r2, #8
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d227      	bcs.n	8004638 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80045e8:	2208      	movs	r2, #8
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4413      	add	r3, r2
 80045ee:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f003 0307 	and.w	r3, r3, #7
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d021      	beq.n	800463e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f023 0307 	bic.w	r3, r3, #7
 8004600:	3308      	adds	r3, #8
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	429a      	cmp	r2, r3
 8004606:	d214      	bcs.n	8004632 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f023 0307 	bic.w	r3, r3, #7
 800460e:	3308      	adds	r3, #8
 8004610:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f003 0307 	and.w	r3, r3, #7
 8004618:	2b00      	cmp	r3, #0
 800461a:	d010      	beq.n	800463e <pvPortMalloc+0x92>
        __asm volatile
 800461c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004620:	f383 8811 	msr	BASEPRI, r3
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	f3bf 8f4f 	dsb	sy
 800462c:	617b      	str	r3, [r7, #20]
    }
 800462e:	bf00      	nop
 8004630:	e7fe      	b.n	8004630 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004632:	2300      	movs	r3, #0
 8004634:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004636:	e002      	b.n	800463e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004638:	2300      	movs	r3, #0
 800463a:	607b      	str	r3, [r7, #4]
 800463c:	e000      	b.n	8004640 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800463e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d06e      	beq.n	8004724 <pvPortMalloc+0x178>
 8004646:	4b45      	ldr	r3, [pc, #276]	; (800475c <pvPortMalloc+0x1b0>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	429a      	cmp	r2, r3
 800464e:	d869      	bhi.n	8004724 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004650:	4b43      	ldr	r3, [pc, #268]	; (8004760 <pvPortMalloc+0x1b4>)
 8004652:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004654:	4b42      	ldr	r3, [pc, #264]	; (8004760 <pvPortMalloc+0x1b4>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800465a:	e004      	b.n	8004666 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	429a      	cmp	r2, r3
 800466e:	d903      	bls.n	8004678 <pvPortMalloc+0xcc>
 8004670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1f1      	bne.n	800465c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004678:	4b36      	ldr	r3, [pc, #216]	; (8004754 <pvPortMalloc+0x1a8>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800467e:	429a      	cmp	r2, r3
 8004680:	d050      	beq.n	8004724 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2208      	movs	r2, #8
 8004688:	4413      	add	r3, r2
 800468a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800468c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	6a3b      	ldr	r3, [r7, #32]
 8004692:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	1ad2      	subs	r2, r2, r3
 800469c:	2308      	movs	r3, #8
 800469e:	005b      	lsls	r3, r3, #1
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d91f      	bls.n	80046e4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80046a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4413      	add	r3, r2
 80046aa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	f003 0307 	and.w	r3, r3, #7
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00a      	beq.n	80046cc <pvPortMalloc+0x120>
        __asm volatile
 80046b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ba:	f383 8811 	msr	BASEPRI, r3
 80046be:	f3bf 8f6f 	isb	sy
 80046c2:	f3bf 8f4f 	dsb	sy
 80046c6:	613b      	str	r3, [r7, #16]
    }
 80046c8:	bf00      	nop
 80046ca:	e7fe      	b.n	80046ca <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80046cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ce:	685a      	ldr	r2, [r3, #4]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	1ad2      	subs	r2, r2, r3
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80046de:	69b8      	ldr	r0, [r7, #24]
 80046e0:	f000 f908 	bl	80048f4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80046e4:	4b1d      	ldr	r3, [pc, #116]	; (800475c <pvPortMalloc+0x1b0>)
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	4a1b      	ldr	r2, [pc, #108]	; (800475c <pvPortMalloc+0x1b0>)
 80046f0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80046f2:	4b1a      	ldr	r3, [pc, #104]	; (800475c <pvPortMalloc+0x1b0>)
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	4b1b      	ldr	r3, [pc, #108]	; (8004764 <pvPortMalloc+0x1b8>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d203      	bcs.n	8004706 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80046fe:	4b17      	ldr	r3, [pc, #92]	; (800475c <pvPortMalloc+0x1b0>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a18      	ldr	r2, [pc, #96]	; (8004764 <pvPortMalloc+0x1b8>)
 8004704:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	4b13      	ldr	r3, [pc, #76]	; (8004758 <pvPortMalloc+0x1ac>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	431a      	orrs	r2, r3
 8004710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004712:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004716:	2200      	movs	r2, #0
 8004718:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800471a:	4b13      	ldr	r3, [pc, #76]	; (8004768 <pvPortMalloc+0x1bc>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	3301      	adds	r3, #1
 8004720:	4a11      	ldr	r2, [pc, #68]	; (8004768 <pvPortMalloc+0x1bc>)
 8004722:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004724:	f7fe fc68 	bl	8002ff8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	f003 0307 	and.w	r3, r3, #7
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00a      	beq.n	8004748 <pvPortMalloc+0x19c>
        __asm volatile
 8004732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004736:	f383 8811 	msr	BASEPRI, r3
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	60fb      	str	r3, [r7, #12]
    }
 8004744:	bf00      	nop
 8004746:	e7fe      	b.n	8004746 <pvPortMalloc+0x19a>
    return pvReturn;
 8004748:	69fb      	ldr	r3, [r7, #28]
}
 800474a:	4618      	mov	r0, r3
 800474c:	3728      	adds	r7, #40	; 0x28
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	20012de4 	.word	0x20012de4
 8004758:	20012df8 	.word	0x20012df8
 800475c:	20012de8 	.word	0x20012de8
 8004760:	20012ddc 	.word	0x20012ddc
 8004764:	20012dec 	.word	0x20012dec
 8004768:	20012df0 	.word	0x20012df0

0800476c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d04d      	beq.n	800481a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800477e:	2308      	movs	r3, #8
 8004780:	425b      	negs	r3, r3
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	4413      	add	r3, r2
 8004786:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	685a      	ldr	r2, [r3, #4]
 8004790:	4b24      	ldr	r3, [pc, #144]	; (8004824 <vPortFree+0xb8>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4013      	ands	r3, r2
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10a      	bne.n	80047b0 <vPortFree+0x44>
        __asm volatile
 800479a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479e:	f383 8811 	msr	BASEPRI, r3
 80047a2:	f3bf 8f6f 	isb	sy
 80047a6:	f3bf 8f4f 	dsb	sy
 80047aa:	60fb      	str	r3, [r7, #12]
    }
 80047ac:	bf00      	nop
 80047ae:	e7fe      	b.n	80047ae <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00a      	beq.n	80047ce <vPortFree+0x62>
        __asm volatile
 80047b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047bc:	f383 8811 	msr	BASEPRI, r3
 80047c0:	f3bf 8f6f 	isb	sy
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	60bb      	str	r3, [r7, #8]
    }
 80047ca:	bf00      	nop
 80047cc:	e7fe      	b.n	80047cc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	4b14      	ldr	r3, [pc, #80]	; (8004824 <vPortFree+0xb8>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4013      	ands	r3, r2
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d01e      	beq.n	800481a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d11a      	bne.n	800481a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	685a      	ldr	r2, [r3, #4]
 80047e8:	4b0e      	ldr	r3, [pc, #56]	; (8004824 <vPortFree+0xb8>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	43db      	mvns	r3, r3
 80047ee:	401a      	ands	r2, r3
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80047f4:	f7fe fbf2 	bl	8002fdc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	4b0a      	ldr	r3, [pc, #40]	; (8004828 <vPortFree+0xbc>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4413      	add	r3, r2
 8004802:	4a09      	ldr	r2, [pc, #36]	; (8004828 <vPortFree+0xbc>)
 8004804:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004806:	6938      	ldr	r0, [r7, #16]
 8004808:	f000 f874 	bl	80048f4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800480c:	4b07      	ldr	r3, [pc, #28]	; (800482c <vPortFree+0xc0>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	3301      	adds	r3, #1
 8004812:	4a06      	ldr	r2, [pc, #24]	; (800482c <vPortFree+0xc0>)
 8004814:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004816:	f7fe fbef 	bl	8002ff8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800481a:	bf00      	nop
 800481c:	3718      	adds	r7, #24
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	20012df8 	.word	0x20012df8
 8004828:	20012de8 	.word	0x20012de8
 800482c:	20012df4 	.word	0x20012df4

08004830 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004836:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800483a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800483c:	4b27      	ldr	r3, [pc, #156]	; (80048dc <prvHeapInit+0xac>)
 800483e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f003 0307 	and.w	r3, r3, #7
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00c      	beq.n	8004864 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	3307      	adds	r3, #7
 800484e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f023 0307 	bic.w	r3, r3, #7
 8004856:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	4a1f      	ldr	r2, [pc, #124]	; (80048dc <prvHeapInit+0xac>)
 8004860:	4413      	add	r3, r2
 8004862:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004868:	4a1d      	ldr	r2, [pc, #116]	; (80048e0 <prvHeapInit+0xb0>)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800486e:	4b1c      	ldr	r3, [pc, #112]	; (80048e0 <prvHeapInit+0xb0>)
 8004870:	2200      	movs	r2, #0
 8004872:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	4413      	add	r3, r2
 800487a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800487c:	2208      	movs	r2, #8
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	1a9b      	subs	r3, r3, r2
 8004882:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f023 0307 	bic.w	r3, r3, #7
 800488a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	4a15      	ldr	r2, [pc, #84]	; (80048e4 <prvHeapInit+0xb4>)
 8004890:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004892:	4b14      	ldr	r3, [pc, #80]	; (80048e4 <prvHeapInit+0xb4>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2200      	movs	r2, #0
 8004898:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800489a:	4b12      	ldr	r3, [pc, #72]	; (80048e4 <prvHeapInit+0xb4>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2200      	movs	r2, #0
 80048a0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	1ad2      	subs	r2, r2, r3
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80048b0:	4b0c      	ldr	r3, [pc, #48]	; (80048e4 <prvHeapInit+0xb4>)
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	4a0a      	ldr	r2, [pc, #40]	; (80048e8 <prvHeapInit+0xb8>)
 80048be:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	4a09      	ldr	r2, [pc, #36]	; (80048ec <prvHeapInit+0xbc>)
 80048c6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80048c8:	4b09      	ldr	r3, [pc, #36]	; (80048f0 <prvHeapInit+0xc0>)
 80048ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80048ce:	601a      	str	r2, [r3, #0]
}
 80048d0:	bf00      	nop
 80048d2:	3714      	adds	r7, #20
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr
 80048dc:	200001dc 	.word	0x200001dc
 80048e0:	20012ddc 	.word	0x20012ddc
 80048e4:	20012de4 	.word	0x20012de4
 80048e8:	20012dec 	.word	0x20012dec
 80048ec:	20012de8 	.word	0x20012de8
 80048f0:	20012df8 	.word	0x20012df8

080048f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80048fc:	4b28      	ldr	r3, [pc, #160]	; (80049a0 <prvInsertBlockIntoFreeList+0xac>)
 80048fe:	60fb      	str	r3, [r7, #12]
 8004900:	e002      	b.n	8004908 <prvInsertBlockIntoFreeList+0x14>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	60fb      	str	r3, [r7, #12]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	429a      	cmp	r2, r3
 8004910:	d8f7      	bhi.n	8004902 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	4413      	add	r3, r2
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	429a      	cmp	r2, r3
 8004922:	d108      	bne.n	8004936 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	685a      	ldr	r2, [r3, #4]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	441a      	add	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	441a      	add	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	429a      	cmp	r2, r3
 8004948:	d118      	bne.n	800497c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	4b15      	ldr	r3, [pc, #84]	; (80049a4 <prvInsertBlockIntoFreeList+0xb0>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	429a      	cmp	r2, r3
 8004954:	d00d      	beq.n	8004972 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685a      	ldr	r2, [r3, #4]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	441a      	add	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	e008      	b.n	8004984 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004972:	4b0c      	ldr	r3, [pc, #48]	; (80049a4 <prvInsertBlockIntoFreeList+0xb0>)
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	e003      	b.n	8004984 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	429a      	cmp	r2, r3
 800498a:	d002      	beq.n	8004992 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004992:	bf00      	nop
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	20012ddc 	.word	0x20012ddc
 80049a4:	20012de4 	.word	0x20012de4

080049a8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80049ac:	4803      	ldr	r0, [pc, #12]	; (80049bc <_cbSendSystemDesc+0x14>)
 80049ae:	f001 fae3 	bl	8005f78 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80049b2:	4803      	ldr	r0, [pc, #12]	; (80049c0 <_cbSendSystemDesc+0x18>)
 80049b4:	f001 fae0 	bl	8005f78 <SEGGER_SYSVIEW_SendSysDesc>
}
 80049b8:	bf00      	nop
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	080070fc 	.word	0x080070fc
 80049c0:	08007138 	.word	0x08007138

080049c4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80049c4:	b580      	push	{r7, lr}
 80049c6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80049c8:	4b06      	ldr	r3, [pc, #24]	; (80049e4 <SEGGER_SYSVIEW_Conf+0x20>)
 80049ca:	6818      	ldr	r0, [r3, #0]
 80049cc:	4b05      	ldr	r3, [pc, #20]	; (80049e4 <SEGGER_SYSVIEW_Conf+0x20>)
 80049ce:	6819      	ldr	r1, [r3, #0]
 80049d0:	4b05      	ldr	r3, [pc, #20]	; (80049e8 <SEGGER_SYSVIEW_Conf+0x24>)
 80049d2:	4a06      	ldr	r2, [pc, #24]	; (80049ec <SEGGER_SYSVIEW_Conf+0x28>)
 80049d4:	f000 fe4e 	bl	8005674 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80049d8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80049dc:	f000 fe8e 	bl	80056fc <SEGGER_SYSVIEW_SetRAMBase>
}
 80049e0:	bf00      	nop
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	20000000 	.word	0x20000000
 80049e8:	080049a9 	.word	0x080049a9
 80049ec:	080071d8 	.word	0x080071d8

080049f0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80049f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80049f6:	2300      	movs	r3, #0
 80049f8:	607b      	str	r3, [r7, #4]
 80049fa:	e033      	b.n	8004a64 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80049fc:	491e      	ldr	r1, [pc, #120]	; (8004a78 <_cbSendTaskList+0x88>)
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	4613      	mov	r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	4413      	add	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	440b      	add	r3, r1
 8004a0a:	6818      	ldr	r0, [r3, #0]
 8004a0c:	491a      	ldr	r1, [pc, #104]	; (8004a78 <_cbSendTaskList+0x88>)
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	4613      	mov	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4413      	add	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	440b      	add	r3, r1
 8004a1a:	3304      	adds	r3, #4
 8004a1c:	6819      	ldr	r1, [r3, #0]
 8004a1e:	4c16      	ldr	r4, [pc, #88]	; (8004a78 <_cbSendTaskList+0x88>)
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	4613      	mov	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4413      	add	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	4423      	add	r3, r4
 8004a2c:	3308      	adds	r3, #8
 8004a2e:	681c      	ldr	r4, [r3, #0]
 8004a30:	4d11      	ldr	r5, [pc, #68]	; (8004a78 <_cbSendTaskList+0x88>)
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	4613      	mov	r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	4413      	add	r3, r2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	442b      	add	r3, r5
 8004a3e:	330c      	adds	r3, #12
 8004a40:	681d      	ldr	r5, [r3, #0]
 8004a42:	4e0d      	ldr	r6, [pc, #52]	; (8004a78 <_cbSendTaskList+0x88>)
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	4613      	mov	r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4413      	add	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4433      	add	r3, r6
 8004a50:	3310      	adds	r3, #16
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	462b      	mov	r3, r5
 8004a58:	4622      	mov	r2, r4
 8004a5a:	f000 f8b5 	bl	8004bc8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	3301      	adds	r3, #1
 8004a62:	607b      	str	r3, [r7, #4]
 8004a64:	4b05      	ldr	r3, [pc, #20]	; (8004a7c <_cbSendTaskList+0x8c>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d3c6      	bcc.n	80049fc <_cbSendTaskList+0xc>
  }
}
 8004a6e:	bf00      	nop
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a78:	20012dfc 	.word	0x20012dfc
 8004a7c:	20012e9c 	.word	0x20012e9c

08004a80 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004a80:	b5b0      	push	{r4, r5, r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004a86:	f7fe fb67 	bl	8003158 <xTaskGetTickCountFromISR>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	f04f 0300 	mov.w	r3, #0
 8004a92:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004a96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	f04f 0400 	mov.w	r4, #0
 8004aa2:	f04f 0500 	mov.w	r5, #0
 8004aa6:	015d      	lsls	r5, r3, #5
 8004aa8:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8004aac:	0154      	lsls	r4, r2, #5
 8004aae:	4622      	mov	r2, r4
 8004ab0:	462b      	mov	r3, r5
 8004ab2:	1a12      	subs	r2, r2, r0
 8004ab4:	eb63 0301 	sbc.w	r3, r3, r1
 8004ab8:	f04f 0400 	mov.w	r4, #0
 8004abc:	f04f 0500 	mov.w	r5, #0
 8004ac0:	009d      	lsls	r5, r3, #2
 8004ac2:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8004ac6:	0094      	lsls	r4, r2, #2
 8004ac8:	4622      	mov	r2, r4
 8004aca:	462b      	mov	r3, r5
 8004acc:	1812      	adds	r2, r2, r0
 8004ace:	eb41 0303 	adc.w	r3, r1, r3
 8004ad2:	f04f 0000 	mov.w	r0, #0
 8004ad6:	f04f 0100 	mov.w	r1, #0
 8004ada:	00d9      	lsls	r1, r3, #3
 8004adc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ae0:	00d0      	lsls	r0, r2, #3
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8004aea:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004aee:	4610      	mov	r0, r2
 8004af0:	4619      	mov	r1, r3
 8004af2:	3708      	adds	r7, #8
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bdb0      	pop	{r4, r5, r7, pc}

08004af8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af02      	add	r7, sp, #8
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
 8004b04:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004b06:	2205      	movs	r2, #5
 8004b08:	492b      	ldr	r1, [pc, #172]	; (8004bb8 <SYSVIEW_AddTask+0xc0>)
 8004b0a:	68b8      	ldr	r0, [r7, #8]
 8004b0c:	f001 fdc4 	bl	8006698 <memcmp>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d04b      	beq.n	8004bae <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004b16:	4b29      	ldr	r3, [pc, #164]	; (8004bbc <SYSVIEW_AddTask+0xc4>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2b07      	cmp	r3, #7
 8004b1c:	d903      	bls.n	8004b26 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004b1e:	4828      	ldr	r0, [pc, #160]	; (8004bc0 <SYSVIEW_AddTask+0xc8>)
 8004b20:	f001 fd28 	bl	8006574 <SEGGER_SYSVIEW_Warn>
    return;
 8004b24:	e044      	b.n	8004bb0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004b26:	4b25      	ldr	r3, [pc, #148]	; (8004bbc <SYSVIEW_AddTask+0xc4>)
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	4926      	ldr	r1, [pc, #152]	; (8004bc4 <SYSVIEW_AddTask+0xcc>)
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4413      	add	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	440b      	add	r3, r1
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004b3a:	4b20      	ldr	r3, [pc, #128]	; (8004bbc <SYSVIEW_AddTask+0xc4>)
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	4921      	ldr	r1, [pc, #132]	; (8004bc4 <SYSVIEW_AddTask+0xcc>)
 8004b40:	4613      	mov	r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4413      	add	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	440b      	add	r3, r1
 8004b4a:	3304      	adds	r3, #4
 8004b4c:	68ba      	ldr	r2, [r7, #8]
 8004b4e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004b50:	4b1a      	ldr	r3, [pc, #104]	; (8004bbc <SYSVIEW_AddTask+0xc4>)
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	491b      	ldr	r1, [pc, #108]	; (8004bc4 <SYSVIEW_AddTask+0xcc>)
 8004b56:	4613      	mov	r3, r2
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	4413      	add	r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	440b      	add	r3, r1
 8004b60:	3308      	adds	r3, #8
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004b66:	4b15      	ldr	r3, [pc, #84]	; (8004bbc <SYSVIEW_AddTask+0xc4>)
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	4916      	ldr	r1, [pc, #88]	; (8004bc4 <SYSVIEW_AddTask+0xcc>)
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4413      	add	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	440b      	add	r3, r1
 8004b76:	330c      	adds	r3, #12
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004b7c:	4b0f      	ldr	r3, [pc, #60]	; (8004bbc <SYSVIEW_AddTask+0xc4>)
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	4910      	ldr	r1, [pc, #64]	; (8004bc4 <SYSVIEW_AddTask+0xcc>)
 8004b82:	4613      	mov	r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4413      	add	r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	440b      	add	r3, r1
 8004b8c:	3310      	adds	r3, #16
 8004b8e:	69ba      	ldr	r2, [r7, #24]
 8004b90:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004b92:	4b0a      	ldr	r3, [pc, #40]	; (8004bbc <SYSVIEW_AddTask+0xc4>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	3301      	adds	r3, #1
 8004b98:	4a08      	ldr	r2, [pc, #32]	; (8004bbc <SYSVIEW_AddTask+0xc4>)
 8004b9a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	68b9      	ldr	r1, [r7, #8]
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f000 f80e 	bl	8004bc8 <SYSVIEW_SendTaskInfo>
 8004bac:	e000      	b.n	8004bb0 <SYSVIEW_AddTask+0xb8>
    return;
 8004bae:	bf00      	nop

}
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	08007148 	.word	0x08007148
 8004bbc:	20012e9c 	.word	0x20012e9c
 8004bc0:	08007150 	.word	0x08007150
 8004bc4:	20012dfc 	.word	0x20012dfc

08004bc8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b08a      	sub	sp, #40	; 0x28
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
 8004bd4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004bd6:	f107 0314 	add.w	r3, r7, #20
 8004bda:	2214      	movs	r2, #20
 8004bdc:	2100      	movs	r1, #0
 8004bde:	4618      	mov	r0, r3
 8004be0:	f001 fd76 	bl	80066d0 <memset>
  TaskInfo.TaskID     = TaskID;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004bf8:	f107 0314 	add.w	r3, r7, #20
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f001 f8c3 	bl	8005d88 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004c02:	bf00      	nop
 8004c04:	3728      	adds	r7, #40	; 0x28
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
	...

08004c0c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004c12:	4b24      	ldr	r3, [pc, #144]	; (8004ca4 <_DoInit+0x98>)
 8004c14:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2203      	movs	r2, #3
 8004c1a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2203      	movs	r2, #3
 8004c20:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a20      	ldr	r2, [pc, #128]	; (8004ca8 <_DoInit+0x9c>)
 8004c26:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a20      	ldr	r2, [pc, #128]	; (8004cac <_DoInit+0xa0>)
 8004c2c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c34:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a17      	ldr	r2, [pc, #92]	; (8004ca8 <_DoInit+0x9c>)
 8004c4c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a17      	ldr	r2, [pc, #92]	; (8004cb0 <_DoInit+0xa4>)
 8004c52:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2210      	movs	r2, #16
 8004c58:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	3307      	adds	r3, #7
 8004c70:	4a10      	ldr	r2, [pc, #64]	; (8004cb4 <_DoInit+0xa8>)
 8004c72:	6810      	ldr	r0, [r2, #0]
 8004c74:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004c76:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a0e      	ldr	r2, [pc, #56]	; (8004cb8 <_DoInit+0xac>)
 8004c7e:	6810      	ldr	r0, [r2, #0]
 8004c80:	6018      	str	r0, [r3, #0]
 8004c82:	8891      	ldrh	r1, [r2, #4]
 8004c84:	7992      	ldrb	r2, [r2, #6]
 8004c86:	8099      	strh	r1, [r3, #4]
 8004c88:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004c8a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2220      	movs	r2, #32
 8004c92:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004c94:	f3bf 8f5f 	dmb	sy
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr
 8004ca4:	20014464 	.word	0x20014464
 8004ca8:	080071a0 	.word	0x080071a0
 8004cac:	20012ea0 	.word	0x20012ea0
 8004cb0:	200132a0 	.word	0x200132a0
 8004cb4:	080071ac 	.word	0x080071ac
 8004cb8:	080071b0 	.word	0x080071b0

08004cbc <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b08a      	sub	sp, #40	; 0x28
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d905      	bls.n	8004cec <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004ce0:	69ba      	ldr	r2, [r7, #24]
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8004cea:	e007      	b.n	8004cfc <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	689a      	ldr	r2, [r3, #8]
 8004cf0:	69b9      	ldr	r1, [r7, #24]
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	1acb      	subs	r3, r1, r3
 8004cf6:	4413      	add	r3, r2
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	689a      	ldr	r2, [r3, #8]
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d06:	4293      	cmp	r3, r2
 8004d08:	bf28      	it	cs
 8004d0a:	4613      	movcs	r3, r2
 8004d0c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4293      	cmp	r3, r2
 8004d14:	bf28      	it	cs
 8004d16:	4613      	movcs	r3, r2
 8004d18:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	4413      	add	r3, r2
 8004d22:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d26:	68b9      	ldr	r1, [r7, #8]
 8004d28:	6978      	ldr	r0, [r7, #20]
 8004d2a:	f001 fcc3 	bl	80066b4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004d2e:	6a3a      	ldr	r2, [r7, #32]
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	4413      	add	r3, r2
 8004d34:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004d36:	68ba      	ldr	r2, [r7, #8]
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3a:	4413      	add	r3, r2
 8004d3c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004d46:	69fa      	ldr	r2, [r7, #28]
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	4413      	add	r3, r2
 8004d4c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	69fa      	ldr	r2, [r7, #28]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d101      	bne.n	8004d5c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004d5c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	69fa      	ldr	r2, [r7, #28]
 8004d64:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1b2      	bne.n	8004cd2 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004d6c:	6a3b      	ldr	r3, [r7, #32]
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3728      	adds	r7, #40	; 0x28
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b088      	sub	sp, #32
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	60f8      	str	r0, [r7, #12]
 8004d7e:	60b9      	str	r1, [r7, #8]
 8004d80:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	689a      	ldr	r2, [r3, #8]
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004d92:	69ba      	ldr	r2, [r7, #24]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d911      	bls.n	8004dbe <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	4413      	add	r3, r2
 8004da2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	68b9      	ldr	r1, [r7, #8]
 8004da8:	6938      	ldr	r0, [r7, #16]
 8004daa:	f001 fc83 	bl	80066b4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004dae:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004db2:	69fa      	ldr	r2, [r7, #28]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	441a      	add	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004dbc:	e01f      	b.n	8004dfe <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	4413      	add	r3, r2
 8004dca:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	68b9      	ldr	r1, [r7, #8]
 8004dd0:	6938      	ldr	r0, [r7, #16]
 8004dd2:	f001 fc6f 	bl	80066b4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	4413      	add	r3, r2
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	4619      	mov	r1, r3
 8004dee:	6938      	ldr	r0, [r7, #16]
 8004df0:	f001 fc60 	bl	80066b4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004df4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	60da      	str	r2, [r3, #12]
}
 8004dfe:	bf00      	nop
 8004e00:	3720      	adds	r7, #32
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004e06:	b480      	push	{r7}
 8004e08:	b087      	sub	sp, #28
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d808      	bhi.n	8004e34 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	689a      	ldr	r2, [r3, #8]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	1ad2      	subs	r2, r2, r3
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	617b      	str	r3, [r7, #20]
 8004e32:	e004      	b.n	8004e3e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004e3e:	697b      	ldr	r3, [r7, #20]
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	371c      	adds	r7, #28
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b08c      	sub	sp, #48	; 0x30
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004e58:	4b3e      	ldr	r3, [pc, #248]	; (8004f54 <SEGGER_RTT_ReadNoLock+0x108>)
 8004e5a:	623b      	str	r3, [r7, #32]
 8004e5c:	6a3b      	ldr	r3, [r7, #32]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <SEGGER_RTT_ReadNoLock+0x1e>
 8004e66:	f7ff fed1 	bl	8004c0c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	4413      	add	r3, r2
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	3360      	adds	r3, #96	; 0x60
 8004e76:	4a37      	ldr	r2, [pc, #220]	; (8004f54 <SEGGER_RTT_ReadNoLock+0x108>)
 8004e78:	4413      	add	r3, r2
 8004e7a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004e90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d92b      	bls.n	8004ef0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	bf28      	it	cs
 8004eaa:	4613      	movcs	r3, r2
 8004eac:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	685a      	ldr	r2, [r3, #4]
 8004eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb4:	4413      	add	r3, r2
 8004eb6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	6939      	ldr	r1, [r7, #16]
 8004ebc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ebe:	f001 fbf9 	bl	80066b4 <memcpy>
    NumBytesRead += NumBytesRem;
 8004ec2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	4413      	add	r3, r2
 8004ed0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004eda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	4413      	add	r3, r2
 8004ee0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d101      	bne.n	8004ef0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004eec:	2300      	movs	r3, #0
 8004eee:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004ef0:	69ba      	ldr	r2, [r7, #24]
 8004ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4293      	cmp	r3, r2
 8004efe:	bf28      	it	cs
 8004f00:	4613      	movcs	r3, r2
 8004f02:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d019      	beq.n	8004f3e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	685a      	ldr	r2, [r3, #4]
 8004f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f10:	4413      	add	r3, r2
 8004f12:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	6939      	ldr	r1, [r7, #16]
 8004f18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f1a:	f001 fbcb 	bl	80066b4 <memcpy>
    NumBytesRead += NumBytesRem;
 8004f1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	4413      	add	r3, r2
 8004f24:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004f36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d002      	beq.n	8004f4a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f48:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3730      	adds	r7, #48	; 0x30
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	20014464 	.word	0x20014464

08004f58 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b088      	sub	sp, #32
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	1c5a      	adds	r2, r3, #1
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	005b      	lsls	r3, r3, #1
 8004f70:	4413      	add	r3, r2
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	4a1f      	ldr	r2, [pc, #124]	; (8004ff4 <SEGGER_RTT_WriteNoLock+0x9c>)
 8004f76:	4413      	add	r3, r2
 8004f78:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d029      	beq.n	8004fd6 <SEGGER_RTT_WriteNoLock+0x7e>
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d82e      	bhi.n	8004fe4 <SEGGER_RTT_WriteNoLock+0x8c>
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d002      	beq.n	8004f90 <SEGGER_RTT_WriteNoLock+0x38>
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d013      	beq.n	8004fb6 <SEGGER_RTT_WriteNoLock+0x5e>
 8004f8e:	e029      	b.n	8004fe4 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004f90:	6978      	ldr	r0, [r7, #20]
 8004f92:	f7ff ff38 	bl	8004e06 <_GetAvailWriteSpace>
 8004f96:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d202      	bcs.n	8004fa6 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004fa4:	e021      	b.n	8004fea <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	69b9      	ldr	r1, [r7, #24]
 8004fae:	6978      	ldr	r0, [r7, #20]
 8004fb0:	f7ff fee1 	bl	8004d76 <_WriteNoCheck>
    break;
 8004fb4:	e019      	b.n	8004fea <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004fb6:	6978      	ldr	r0, [r7, #20]
 8004fb8:	f7ff ff25 	bl	8004e06 <_GetAvailWriteSpace>
 8004fbc:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	bf28      	it	cs
 8004fc6:	4613      	movcs	r3, r2
 8004fc8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8004fca:	69fa      	ldr	r2, [r7, #28]
 8004fcc:	69b9      	ldr	r1, [r7, #24]
 8004fce:	6978      	ldr	r0, [r7, #20]
 8004fd0:	f7ff fed1 	bl	8004d76 <_WriteNoCheck>
    break;
 8004fd4:	e009      	b.n	8004fea <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	69b9      	ldr	r1, [r7, #24]
 8004fda:	6978      	ldr	r0, [r7, #20]
 8004fdc:	f7ff fe6e 	bl	8004cbc <_WriteBlocking>
 8004fe0:	61f8      	str	r0, [r7, #28]
    break;
 8004fe2:	e002      	b.n	8004fea <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	61fb      	str	r3, [r7, #28]
    break;
 8004fe8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8004fea:	69fb      	ldr	r3, [r7, #28]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3720      	adds	r7, #32
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	20014464 	.word	0x20014464

08004ff8 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b088      	sub	sp, #32
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005004:	4b0e      	ldr	r3, [pc, #56]	; (8005040 <SEGGER_RTT_Write+0x48>)
 8005006:	61fb      	str	r3, [r7, #28]
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	b2db      	uxtb	r3, r3
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <SEGGER_RTT_Write+0x1e>
 8005012:	f7ff fdfb 	bl	8004c0c <_DoInit>
  SEGGER_RTT_LOCK();
 8005016:	f3ef 8311 	mrs	r3, BASEPRI
 800501a:	f04f 0120 	mov.w	r1, #32
 800501e:	f381 8811 	msr	BASEPRI, r1
 8005022:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	68b9      	ldr	r1, [r7, #8]
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f7ff ff95 	bl	8004f58 <SEGGER_RTT_WriteNoLock>
 800502e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005036:	697b      	ldr	r3, [r7, #20]
}
 8005038:	4618      	mov	r0, r3
 800503a:	3720      	adds	r7, #32
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	20014464 	.word	0x20014464

08005044 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005044:	b580      	push	{r7, lr}
 8005046:	b088      	sub	sp, #32
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
 8005050:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005052:	4b3d      	ldr	r3, [pc, #244]	; (8005148 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005054:	61bb      	str	r3, [r7, #24]
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005060:	f7ff fdd4 	bl	8004c0c <_DoInit>
  SEGGER_RTT_LOCK();
 8005064:	f3ef 8311 	mrs	r3, BASEPRI
 8005068:	f04f 0120 	mov.w	r1, #32
 800506c:	f381 8811 	msr	BASEPRI, r1
 8005070:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005072:	4b35      	ldr	r3, [pc, #212]	; (8005148 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005074:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005076:	2300      	movs	r3, #0
 8005078:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800507a:	6939      	ldr	r1, [r7, #16]
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	1c5a      	adds	r2, r3, #1
 8005080:	4613      	mov	r3, r2
 8005082:	005b      	lsls	r3, r3, #1
 8005084:	4413      	add	r3, r2
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	440b      	add	r3, r1
 800508a:	3304      	adds	r3, #4
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d008      	beq.n	80050a4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	3301      	adds	r3, #1
 8005096:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	69fa      	ldr	r2, [r7, #28]
 800509e:	429a      	cmp	r2, r3
 80050a0:	dbeb      	blt.n	800507a <SEGGER_RTT_AllocUpBuffer+0x36>
 80050a2:	e000      	b.n	80050a6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80050a4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	69fa      	ldr	r2, [r7, #28]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	da3f      	bge.n	8005130 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80050b0:	6939      	ldr	r1, [r7, #16]
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	1c5a      	adds	r2, r3, #1
 80050b6:	4613      	mov	r3, r2
 80050b8:	005b      	lsls	r3, r3, #1
 80050ba:	4413      	add	r3, r2
 80050bc:	00db      	lsls	r3, r3, #3
 80050be:	440b      	add	r3, r1
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80050c4:	6939      	ldr	r1, [r7, #16]
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	1c5a      	adds	r2, r3, #1
 80050ca:	4613      	mov	r3, r2
 80050cc:	005b      	lsls	r3, r3, #1
 80050ce:	4413      	add	r3, r2
 80050d0:	00db      	lsls	r3, r3, #3
 80050d2:	440b      	add	r3, r1
 80050d4:	3304      	adds	r3, #4
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80050da:	6939      	ldr	r1, [r7, #16]
 80050dc:	69fa      	ldr	r2, [r7, #28]
 80050de:	4613      	mov	r3, r2
 80050e0:	005b      	lsls	r3, r3, #1
 80050e2:	4413      	add	r3, r2
 80050e4:	00db      	lsls	r3, r3, #3
 80050e6:	440b      	add	r3, r1
 80050e8:	3320      	adds	r3, #32
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80050ee:	6939      	ldr	r1, [r7, #16]
 80050f0:	69fa      	ldr	r2, [r7, #28]
 80050f2:	4613      	mov	r3, r2
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	4413      	add	r3, r2
 80050f8:	00db      	lsls	r3, r3, #3
 80050fa:	440b      	add	r3, r1
 80050fc:	3328      	adds	r3, #40	; 0x28
 80050fe:	2200      	movs	r2, #0
 8005100:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005102:	6939      	ldr	r1, [r7, #16]
 8005104:	69fa      	ldr	r2, [r7, #28]
 8005106:	4613      	mov	r3, r2
 8005108:	005b      	lsls	r3, r3, #1
 800510a:	4413      	add	r3, r2
 800510c:	00db      	lsls	r3, r3, #3
 800510e:	440b      	add	r3, r1
 8005110:	3324      	adds	r3, #36	; 0x24
 8005112:	2200      	movs	r2, #0
 8005114:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005116:	6939      	ldr	r1, [r7, #16]
 8005118:	69fa      	ldr	r2, [r7, #28]
 800511a:	4613      	mov	r3, r2
 800511c:	005b      	lsls	r3, r3, #1
 800511e:	4413      	add	r3, r2
 8005120:	00db      	lsls	r3, r3, #3
 8005122:	440b      	add	r3, r1
 8005124:	332c      	adds	r3, #44	; 0x2c
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800512a:	f3bf 8f5f 	dmb	sy
 800512e:	e002      	b.n	8005136 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005130:	f04f 33ff 	mov.w	r3, #4294967295
 8005134:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800513c:	69fb      	ldr	r3, [r7, #28]
}
 800513e:	4618      	mov	r0, r3
 8005140:	3720      	adds	r7, #32
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	20014464 	.word	0x20014464

0800514c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800514c:	b580      	push	{r7, lr}
 800514e:	b088      	sub	sp, #32
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
 8005158:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800515a:	4b33      	ldr	r3, [pc, #204]	; (8005228 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800515c:	61bb      	str	r3, [r7, #24]
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	b2db      	uxtb	r3, r3
 8005164:	2b00      	cmp	r3, #0
 8005166:	d101      	bne.n	800516c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005168:	f7ff fd50 	bl	8004c0c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800516c:	4b2e      	ldr	r3, [pc, #184]	; (8005228 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800516e:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	461a      	mov	r2, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	4293      	cmp	r3, r2
 800517a:	d24d      	bcs.n	8005218 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 800517c:	f3ef 8311 	mrs	r3, BASEPRI
 8005180:	f04f 0120 	mov.w	r1, #32
 8005184:	f381 8811 	msr	BASEPRI, r1
 8005188:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d031      	beq.n	80051f4 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005190:	6979      	ldr	r1, [r7, #20]
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	4613      	mov	r3, r2
 8005196:	005b      	lsls	r3, r3, #1
 8005198:	4413      	add	r3, r2
 800519a:	00db      	lsls	r3, r3, #3
 800519c:	440b      	add	r3, r1
 800519e:	3360      	adds	r3, #96	; 0x60
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80051a4:	6979      	ldr	r1, [r7, #20]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	4613      	mov	r3, r2
 80051aa:	005b      	lsls	r3, r3, #1
 80051ac:	4413      	add	r3, r2
 80051ae:	00db      	lsls	r3, r3, #3
 80051b0:	440b      	add	r3, r1
 80051b2:	3364      	adds	r3, #100	; 0x64
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80051b8:	6979      	ldr	r1, [r7, #20]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	4613      	mov	r3, r2
 80051be:	005b      	lsls	r3, r3, #1
 80051c0:	4413      	add	r3, r2
 80051c2:	00db      	lsls	r3, r3, #3
 80051c4:	440b      	add	r3, r1
 80051c6:	3368      	adds	r3, #104	; 0x68
 80051c8:	683a      	ldr	r2, [r7, #0]
 80051ca:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80051cc:	6979      	ldr	r1, [r7, #20]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	4613      	mov	r3, r2
 80051d2:	005b      	lsls	r3, r3, #1
 80051d4:	4413      	add	r3, r2
 80051d6:	00db      	lsls	r3, r3, #3
 80051d8:	440b      	add	r3, r1
 80051da:	3370      	adds	r3, #112	; 0x70
 80051dc:	2200      	movs	r2, #0
 80051de:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 80051e0:	6979      	ldr	r1, [r7, #20]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	4613      	mov	r3, r2
 80051e6:	005b      	lsls	r3, r3, #1
 80051e8:	4413      	add	r3, r2
 80051ea:	00db      	lsls	r3, r3, #3
 80051ec:	440b      	add	r3, r1
 80051ee:	336c      	adds	r3, #108	; 0x6c
 80051f0:	2200      	movs	r2, #0
 80051f2:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 80051f4:	6979      	ldr	r1, [r7, #20]
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	4613      	mov	r3, r2
 80051fa:	005b      	lsls	r3, r3, #1
 80051fc:	4413      	add	r3, r2
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	440b      	add	r3, r1
 8005202:	3374      	adds	r3, #116	; 0x74
 8005204:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005206:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005208:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005212:	2300      	movs	r3, #0
 8005214:	61fb      	str	r3, [r7, #28]
 8005216:	e002      	b.n	800521e <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005218:	f04f 33ff 	mov.w	r3, #4294967295
 800521c:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800521e:	69fb      	ldr	r3, [r7, #28]
}
 8005220:	4618      	mov	r0, r3
 8005222:	3720      	adds	r7, #32
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	20014464 	.word	0x20014464

0800522c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800522c:	b480      	push	{r7}
 800522e:	b087      	sub	sp, #28
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005238:	2300      	movs	r3, #0
 800523a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800523c:	e002      	b.n	8005244 <_EncodeStr+0x18>
    Len++;
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	3301      	adds	r3, #1
 8005242:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	4413      	add	r3, r2
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1f6      	bne.n	800523e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005250:	693a      	ldr	r2, [r7, #16]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	429a      	cmp	r2, r3
 8005256:	d901      	bls.n	800525c <_EncodeStr+0x30>
    Len = Limit;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	2bfe      	cmp	r3, #254	; 0xfe
 8005260:	d806      	bhi.n	8005270 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	1c5a      	adds	r2, r3, #1
 8005266:	60fa      	str	r2, [r7, #12]
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	b2d2      	uxtb	r2, r2
 800526c:	701a      	strb	r2, [r3, #0]
 800526e:	e011      	b.n	8005294 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	1c5a      	adds	r2, r3, #1
 8005274:	60fa      	str	r2, [r7, #12]
 8005276:	22ff      	movs	r2, #255	; 0xff
 8005278:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	1c5a      	adds	r2, r3, #1
 800527e:	60fa      	str	r2, [r7, #12]
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	b2d2      	uxtb	r2, r2
 8005284:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	0a19      	lsrs	r1, r3, #8
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	1c5a      	adds	r2, r3, #1
 800528e:	60fa      	str	r2, [r7, #12]
 8005290:	b2ca      	uxtb	r2, r1
 8005292:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005294:	2300      	movs	r3, #0
 8005296:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005298:	e00a      	b.n	80052b0 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800529a:	68ba      	ldr	r2, [r7, #8]
 800529c:	1c53      	adds	r3, r2, #1
 800529e:	60bb      	str	r3, [r7, #8]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	1c59      	adds	r1, r3, #1
 80052a4:	60f9      	str	r1, [r7, #12]
 80052a6:	7812      	ldrb	r2, [r2, #0]
 80052a8:	701a      	strb	r2, [r3, #0]
    n++;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	3301      	adds	r3, #1
 80052ae:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d3f0      	bcc.n	800529a <_EncodeStr+0x6e>
  }
  return pPayload;
 80052b8:	68fb      	ldr	r3, [r7, #12]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	371c      	adds	r7, #28
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr

080052c6 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80052c6:	b480      	push	{r7}
 80052c8:	b083      	sub	sp, #12
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	3304      	adds	r3, #4
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
	...

080052e0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80052e6:	4b36      	ldr	r3, [pc, #216]	; (80053c0 <_HandleIncomingPacket+0xe0>)
 80052e8:	7e1b      	ldrb	r3, [r3, #24]
 80052ea:	4618      	mov	r0, r3
 80052ec:	1cfb      	adds	r3, r7, #3
 80052ee:	2201      	movs	r2, #1
 80052f0:	4619      	mov	r1, r3
 80052f2:	f7ff fdab 	bl	8004e4c <SEGGER_RTT_ReadNoLock>
 80052f6:	4603      	mov	r3, r0
 80052f8:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	dd54      	ble.n	80053aa <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8005300:	78fb      	ldrb	r3, [r7, #3]
 8005302:	2b80      	cmp	r3, #128	; 0x80
 8005304:	d032      	beq.n	800536c <_HandleIncomingPacket+0x8c>
 8005306:	2b80      	cmp	r3, #128	; 0x80
 8005308:	dc42      	bgt.n	8005390 <_HandleIncomingPacket+0xb0>
 800530a:	2b07      	cmp	r3, #7
 800530c:	dc16      	bgt.n	800533c <_HandleIncomingPacket+0x5c>
 800530e:	2b00      	cmp	r3, #0
 8005310:	dd3e      	ble.n	8005390 <_HandleIncomingPacket+0xb0>
 8005312:	3b01      	subs	r3, #1
 8005314:	2b06      	cmp	r3, #6
 8005316:	d83b      	bhi.n	8005390 <_HandleIncomingPacket+0xb0>
 8005318:	a201      	add	r2, pc, #4	; (adr r2, 8005320 <_HandleIncomingPacket+0x40>)
 800531a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800531e:	bf00      	nop
 8005320:	08005343 	.word	0x08005343
 8005324:	08005349 	.word	0x08005349
 8005328:	0800534f 	.word	0x0800534f
 800532c:	08005355 	.word	0x08005355
 8005330:	0800535b 	.word	0x0800535b
 8005334:	08005361 	.word	0x08005361
 8005338:	08005367 	.word	0x08005367
 800533c:	2b7f      	cmp	r3, #127	; 0x7f
 800533e:	d036      	beq.n	80053ae <_HandleIncomingPacket+0xce>
 8005340:	e026      	b.n	8005390 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005342:	f000 fba7 	bl	8005a94 <SEGGER_SYSVIEW_Start>
      break;
 8005346:	e037      	b.n	80053b8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005348:	f000 fc5e 	bl	8005c08 <SEGGER_SYSVIEW_Stop>
      break;
 800534c:	e034      	b.n	80053b8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800534e:	f000 fe37 	bl	8005fc0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005352:	e031      	b.n	80053b8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005354:	f000 fdfc 	bl	8005f50 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005358:	e02e      	b.n	80053b8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800535a:	f000 fc7b 	bl	8005c54 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800535e:	e02b      	b.n	80053b8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005360:	f001 f8ca 	bl	80064f8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005364:	e028      	b.n	80053b8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005366:	f001 f8a9 	bl	80064bc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800536a:	e025      	b.n	80053b8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800536c:	4b14      	ldr	r3, [pc, #80]	; (80053c0 <_HandleIncomingPacket+0xe0>)
 800536e:	7e1b      	ldrb	r3, [r3, #24]
 8005370:	4618      	mov	r0, r3
 8005372:	1cfb      	adds	r3, r7, #3
 8005374:	2201      	movs	r2, #1
 8005376:	4619      	mov	r1, r3
 8005378:	f7ff fd68 	bl	8004e4c <SEGGER_RTT_ReadNoLock>
 800537c:	4603      	mov	r3, r0
 800537e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	dd15      	ble.n	80053b2 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005386:	78fb      	ldrb	r3, [r7, #3]
 8005388:	4618      	mov	r0, r3
 800538a:	f001 f817 	bl	80063bc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800538e:	e010      	b.n	80053b2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005390:	78fb      	ldrb	r3, [r7, #3]
 8005392:	b25b      	sxtb	r3, r3
 8005394:	2b00      	cmp	r3, #0
 8005396:	da0e      	bge.n	80053b6 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005398:	4b09      	ldr	r3, [pc, #36]	; (80053c0 <_HandleIncomingPacket+0xe0>)
 800539a:	7e1b      	ldrb	r3, [r3, #24]
 800539c:	4618      	mov	r0, r3
 800539e:	1cfb      	adds	r3, r7, #3
 80053a0:	2201      	movs	r2, #1
 80053a2:	4619      	mov	r1, r3
 80053a4:	f7ff fd52 	bl	8004e4c <SEGGER_RTT_ReadNoLock>
      }
      break;
 80053a8:	e005      	b.n	80053b6 <_HandleIncomingPacket+0xd6>
    }
  }
 80053aa:	bf00      	nop
 80053ac:	e004      	b.n	80053b8 <_HandleIncomingPacket+0xd8>
      break;
 80053ae:	bf00      	nop
 80053b0:	e002      	b.n	80053b8 <_HandleIncomingPacket+0xd8>
      break;
 80053b2:	bf00      	nop
 80053b4:	e000      	b.n	80053b8 <_HandleIncomingPacket+0xd8>
      break;
 80053b6:	bf00      	nop
}
 80053b8:	bf00      	nop
 80053ba:	3708      	adds	r7, #8
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	200142b8 	.word	0x200142b8

080053c4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b08c      	sub	sp, #48	; 0x30
 80053c8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80053ca:	2301      	movs	r3, #1
 80053cc:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80053ce:	1d3b      	adds	r3, r7, #4
 80053d0:	3301      	adds	r3, #1
 80053d2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053d8:	4b31      	ldr	r3, [pc, #196]	; (80054a0 <_TrySendOverflowPacket+0xdc>)
 80053da:	695b      	ldr	r3, [r3, #20]
 80053dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80053de:	e00b      	b.n	80053f8 <_TrySendOverflowPacket+0x34>
 80053e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e2:	b2da      	uxtb	r2, r3
 80053e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e6:	1c59      	adds	r1, r3, #1
 80053e8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80053ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053ee:	b2d2      	uxtb	r2, r2
 80053f0:	701a      	strb	r2, [r3, #0]
 80053f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f4:	09db      	lsrs	r3, r3, #7
 80053f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80053f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fa:	2b7f      	cmp	r3, #127	; 0x7f
 80053fc:	d8f0      	bhi.n	80053e0 <_TrySendOverflowPacket+0x1c>
 80053fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005400:	1c5a      	adds	r2, r3, #1
 8005402:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005404:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005406:	b2d2      	uxtb	r2, r2
 8005408:	701a      	strb	r2, [r3, #0]
 800540a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800540e:	4b25      	ldr	r3, [pc, #148]	; (80054a4 <_TrySendOverflowPacket+0xe0>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005414:	4b22      	ldr	r3, [pc, #136]	; (80054a0 <_TrySendOverflowPacket+0xdc>)
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	69ba      	ldr	r2, [r7, #24]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	627b      	str	r3, [r7, #36]	; 0x24
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	623b      	str	r3, [r7, #32]
 8005426:	e00b      	b.n	8005440 <_TrySendOverflowPacket+0x7c>
 8005428:	6a3b      	ldr	r3, [r7, #32]
 800542a:	b2da      	uxtb	r2, r3
 800542c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542e:	1c59      	adds	r1, r3, #1
 8005430:	6279      	str	r1, [r7, #36]	; 0x24
 8005432:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005436:	b2d2      	uxtb	r2, r2
 8005438:	701a      	strb	r2, [r3, #0]
 800543a:	6a3b      	ldr	r3, [r7, #32]
 800543c:	09db      	lsrs	r3, r3, #7
 800543e:	623b      	str	r3, [r7, #32]
 8005440:	6a3b      	ldr	r3, [r7, #32]
 8005442:	2b7f      	cmp	r3, #127	; 0x7f
 8005444:	d8f0      	bhi.n	8005428 <_TrySendOverflowPacket+0x64>
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	1c5a      	adds	r2, r3, #1
 800544a:	627a      	str	r2, [r7, #36]	; 0x24
 800544c:	6a3a      	ldr	r2, [r7, #32]
 800544e:	b2d2      	uxtb	r2, r2
 8005450:	701a      	strb	r2, [r3, #0]
 8005452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005454:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005456:	4b12      	ldr	r3, [pc, #72]	; (80054a0 <_TrySendOverflowPacket+0xdc>)
 8005458:	785b      	ldrb	r3, [r3, #1]
 800545a:	4618      	mov	r0, r3
 800545c:	1d3b      	adds	r3, r7, #4
 800545e:	69fa      	ldr	r2, [r7, #28]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	461a      	mov	r2, r3
 8005464:	1d3b      	adds	r3, r7, #4
 8005466:	4619      	mov	r1, r3
 8005468:	f7fa feba 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800546c:	4603      	mov	r3, r0
 800546e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d009      	beq.n	800548a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005476:	4a0a      	ldr	r2, [pc, #40]	; (80054a0 <_TrySendOverflowPacket+0xdc>)
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800547c:	4b08      	ldr	r3, [pc, #32]	; (80054a0 <_TrySendOverflowPacket+0xdc>)
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	3b01      	subs	r3, #1
 8005482:	b2da      	uxtb	r2, r3
 8005484:	4b06      	ldr	r3, [pc, #24]	; (80054a0 <_TrySendOverflowPacket+0xdc>)
 8005486:	701a      	strb	r2, [r3, #0]
 8005488:	e004      	b.n	8005494 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800548a:	4b05      	ldr	r3, [pc, #20]	; (80054a0 <_TrySendOverflowPacket+0xdc>)
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	3301      	adds	r3, #1
 8005490:	4a03      	ldr	r2, [pc, #12]	; (80054a0 <_TrySendOverflowPacket+0xdc>)
 8005492:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005494:	693b      	ldr	r3, [r7, #16]
}
 8005496:	4618      	mov	r0, r3
 8005498:	3730      	adds	r7, #48	; 0x30
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	200142b8 	.word	0x200142b8
 80054a4:	e0001004 	.word	0xe0001004

080054a8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b08a      	sub	sp, #40	; 0x28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80054b4:	4b6c      	ldr	r3, [pc, #432]	; (8005668 <_SendPacket+0x1c0>)
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d010      	beq.n	80054de <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80054bc:	4b6a      	ldr	r3, [pc, #424]	; (8005668 <_SendPacket+0x1c0>)
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f000 80a3 	beq.w	800560c <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80054c6:	4b68      	ldr	r3, [pc, #416]	; (8005668 <_SendPacket+0x1c0>)
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d109      	bne.n	80054e2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80054ce:	f7ff ff79 	bl	80053c4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80054d2:	4b65      	ldr	r3, [pc, #404]	; (8005668 <_SendPacket+0x1c0>)
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	f040 809a 	bne.w	8005610 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 80054dc:	e001      	b.n	80054e2 <_SendPacket+0x3a>
    goto Send;
 80054de:	bf00      	nop
 80054e0:	e000      	b.n	80054e4 <_SendPacket+0x3c>
Send:
 80054e2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b1f      	cmp	r3, #31
 80054e8:	d809      	bhi.n	80054fe <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80054ea:	4b5f      	ldr	r3, [pc, #380]	; (8005668 <_SendPacket+0x1c0>)
 80054ec:	69da      	ldr	r2, [r3, #28]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	fa22 f303 	lsr.w	r3, r2, r3
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f040 808b 	bne.w	8005614 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2b17      	cmp	r3, #23
 8005502:	d807      	bhi.n	8005514 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	3b01      	subs	r3, #1
 8005508:	60fb      	str	r3, [r7, #12]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	b2da      	uxtb	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	701a      	strb	r2, [r3, #0]
 8005512:	e03d      	b.n	8005590 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005514:	68ba      	ldr	r2, [r7, #8]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	2b7f      	cmp	r3, #127	; 0x7f
 8005520:	d912      	bls.n	8005548 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	09da      	lsrs	r2, r3, #7
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	3b01      	subs	r3, #1
 800552a:	60fb      	str	r3, [r7, #12]
 800552c:	b2d2      	uxtb	r2, r2
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	b2db      	uxtb	r3, r3
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	3a01      	subs	r2, #1
 800553a:	60fa      	str	r2, [r7, #12]
 800553c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005540:	b2da      	uxtb	r2, r3
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	701a      	strb	r2, [r3, #0]
 8005546:	e006      	b.n	8005556 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	3b01      	subs	r3, #1
 800554c:	60fb      	str	r3, [r7, #12]
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	b2da      	uxtb	r2, r3
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2b7f      	cmp	r3, #127	; 0x7f
 800555a:	d912      	bls.n	8005582 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	09da      	lsrs	r2, r3, #7
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	3b01      	subs	r3, #1
 8005564:	60fb      	str	r3, [r7, #12]
 8005566:	b2d2      	uxtb	r2, r2
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	b2db      	uxtb	r3, r3
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	3a01      	subs	r2, #1
 8005574:	60fa      	str	r2, [r7, #12]
 8005576:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800557a:	b2da      	uxtb	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	701a      	strb	r2, [r3, #0]
 8005580:	e006      	b.n	8005590 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	3b01      	subs	r3, #1
 8005586:	60fb      	str	r3, [r7, #12]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	b2da      	uxtb	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005590:	4b36      	ldr	r3, [pc, #216]	; (800566c <_SendPacket+0x1c4>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005596:	4b34      	ldr	r3, [pc, #208]	; (8005668 <_SendPacket+0x1c0>)
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	69ba      	ldr	r2, [r7, #24]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	627b      	str	r3, [r7, #36]	; 0x24
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	623b      	str	r3, [r7, #32]
 80055a8:	e00b      	b.n	80055c2 <_SendPacket+0x11a>
 80055aa:	6a3b      	ldr	r3, [r7, #32]
 80055ac:	b2da      	uxtb	r2, r3
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	1c59      	adds	r1, r3, #1
 80055b2:	6279      	str	r1, [r7, #36]	; 0x24
 80055b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055b8:	b2d2      	uxtb	r2, r2
 80055ba:	701a      	strb	r2, [r3, #0]
 80055bc:	6a3b      	ldr	r3, [r7, #32]
 80055be:	09db      	lsrs	r3, r3, #7
 80055c0:	623b      	str	r3, [r7, #32]
 80055c2:	6a3b      	ldr	r3, [r7, #32]
 80055c4:	2b7f      	cmp	r3, #127	; 0x7f
 80055c6:	d8f0      	bhi.n	80055aa <_SendPacket+0x102>
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ca:	1c5a      	adds	r2, r3, #1
 80055cc:	627a      	str	r2, [r7, #36]	; 0x24
 80055ce:	6a3a      	ldr	r2, [r7, #32]
 80055d0:	b2d2      	uxtb	r2, r2
 80055d2:	701a      	strb	r2, [r3, #0]
 80055d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80055d8:	4b23      	ldr	r3, [pc, #140]	; (8005668 <_SendPacket+0x1c0>)
 80055da:	785b      	ldrb	r3, [r3, #1]
 80055dc:	4618      	mov	r0, r3
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	461a      	mov	r2, r3
 80055e6:	68f9      	ldr	r1, [r7, #12]
 80055e8:	f7fa fdfa 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80055ec:	4603      	mov	r3, r0
 80055ee:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d003      	beq.n	80055fe <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80055f6:	4a1c      	ldr	r2, [pc, #112]	; (8005668 <_SendPacket+0x1c0>)
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	60d3      	str	r3, [r2, #12]
 80055fc:	e00b      	b.n	8005616 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80055fe:	4b1a      	ldr	r3, [pc, #104]	; (8005668 <_SendPacket+0x1c0>)
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	3301      	adds	r3, #1
 8005604:	b2da      	uxtb	r2, r3
 8005606:	4b18      	ldr	r3, [pc, #96]	; (8005668 <_SendPacket+0x1c0>)
 8005608:	701a      	strb	r2, [r3, #0]
 800560a:	e004      	b.n	8005616 <_SendPacket+0x16e>
    goto SendDone;
 800560c:	bf00      	nop
 800560e:	e002      	b.n	8005616 <_SendPacket+0x16e>
      goto SendDone;
 8005610:	bf00      	nop
 8005612:	e000      	b.n	8005616 <_SendPacket+0x16e>
      goto SendDone;
 8005614:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005616:	4b14      	ldr	r3, [pc, #80]	; (8005668 <_SendPacket+0x1c0>)
 8005618:	7e1b      	ldrb	r3, [r3, #24]
 800561a:	4619      	mov	r1, r3
 800561c:	4a14      	ldr	r2, [pc, #80]	; (8005670 <_SendPacket+0x1c8>)
 800561e:	460b      	mov	r3, r1
 8005620:	005b      	lsls	r3, r3, #1
 8005622:	440b      	add	r3, r1
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	4413      	add	r3, r2
 8005628:	336c      	adds	r3, #108	; 0x6c
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	4b0e      	ldr	r3, [pc, #56]	; (8005668 <_SendPacket+0x1c0>)
 800562e:	7e1b      	ldrb	r3, [r3, #24]
 8005630:	4618      	mov	r0, r3
 8005632:	490f      	ldr	r1, [pc, #60]	; (8005670 <_SendPacket+0x1c8>)
 8005634:	4603      	mov	r3, r0
 8005636:	005b      	lsls	r3, r3, #1
 8005638:	4403      	add	r3, r0
 800563a:	00db      	lsls	r3, r3, #3
 800563c:	440b      	add	r3, r1
 800563e:	3370      	adds	r3, #112	; 0x70
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	429a      	cmp	r2, r3
 8005644:	d00b      	beq.n	800565e <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005646:	4b08      	ldr	r3, [pc, #32]	; (8005668 <_SendPacket+0x1c0>)
 8005648:	789b      	ldrb	r3, [r3, #2]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d107      	bne.n	800565e <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800564e:	4b06      	ldr	r3, [pc, #24]	; (8005668 <_SendPacket+0x1c0>)
 8005650:	2201      	movs	r2, #1
 8005652:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005654:	f7ff fe44 	bl	80052e0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005658:	4b03      	ldr	r3, [pc, #12]	; (8005668 <_SendPacket+0x1c0>)
 800565a:	2200      	movs	r2, #0
 800565c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800565e:	bf00      	nop
 8005660:	3728      	adds	r7, #40	; 0x28
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	200142b8 	.word	0x200142b8
 800566c:	e0001004 	.word	0xe0001004
 8005670:	20014464 	.word	0x20014464

08005674 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005674:	b580      	push	{r7, lr}
 8005676:	b086      	sub	sp, #24
 8005678:	af02      	add	r7, sp, #8
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
 8005680:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005682:	2300      	movs	r3, #0
 8005684:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005688:	4917      	ldr	r1, [pc, #92]	; (80056e8 <SEGGER_SYSVIEW_Init+0x74>)
 800568a:	4818      	ldr	r0, [pc, #96]	; (80056ec <SEGGER_SYSVIEW_Init+0x78>)
 800568c:	f7ff fcda 	bl	8005044 <SEGGER_RTT_AllocUpBuffer>
 8005690:	4603      	mov	r3, r0
 8005692:	b2da      	uxtb	r2, r3
 8005694:	4b16      	ldr	r3, [pc, #88]	; (80056f0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005696:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005698:	4b15      	ldr	r3, [pc, #84]	; (80056f0 <SEGGER_SYSVIEW_Init+0x7c>)
 800569a:	785a      	ldrb	r2, [r3, #1]
 800569c:	4b14      	ldr	r3, [pc, #80]	; (80056f0 <SEGGER_SYSVIEW_Init+0x7c>)
 800569e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80056a0:	4b13      	ldr	r3, [pc, #76]	; (80056f0 <SEGGER_SYSVIEW_Init+0x7c>)
 80056a2:	7e1b      	ldrb	r3, [r3, #24]
 80056a4:	4618      	mov	r0, r3
 80056a6:	2300      	movs	r3, #0
 80056a8:	9300      	str	r3, [sp, #0]
 80056aa:	2308      	movs	r3, #8
 80056ac:	4a11      	ldr	r2, [pc, #68]	; (80056f4 <SEGGER_SYSVIEW_Init+0x80>)
 80056ae:	490f      	ldr	r1, [pc, #60]	; (80056ec <SEGGER_SYSVIEW_Init+0x78>)
 80056b0:	f7ff fd4c 	bl	800514c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80056b4:	4b0e      	ldr	r3, [pc, #56]	; (80056f0 <SEGGER_SYSVIEW_Init+0x7c>)
 80056b6:	2200      	movs	r2, #0
 80056b8:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80056ba:	4b0f      	ldr	r3, [pc, #60]	; (80056f8 <SEGGER_SYSVIEW_Init+0x84>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a0c      	ldr	r2, [pc, #48]	; (80056f0 <SEGGER_SYSVIEW_Init+0x7c>)
 80056c0:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80056c2:	4a0b      	ldr	r2, [pc, #44]	; (80056f0 <SEGGER_SYSVIEW_Init+0x7c>)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80056c8:	4a09      	ldr	r2, [pc, #36]	; (80056f0 <SEGGER_SYSVIEW_Init+0x7c>)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80056ce:	4a08      	ldr	r2, [pc, #32]	; (80056f0 <SEGGER_SYSVIEW_Init+0x7c>)
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80056d4:	4a06      	ldr	r2, [pc, #24]	; (80056f0 <SEGGER_SYSVIEW_Init+0x7c>)
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80056da:	4b05      	ldr	r3, [pc, #20]	; (80056f0 <SEGGER_SYSVIEW_Init+0x7c>)
 80056dc:	2200      	movs	r2, #0
 80056de:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80056e0:	bf00      	nop
 80056e2:	3710      	adds	r7, #16
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	200132b0 	.word	0x200132b0
 80056ec:	080071b8 	.word	0x080071b8
 80056f0:	200142b8 	.word	0x200142b8
 80056f4:	200142b0 	.word	0x200142b0
 80056f8:	e0001004 	.word	0xe0001004

080056fc <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005704:	4a04      	ldr	r2, [pc, #16]	; (8005718 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6113      	str	r3, [r2, #16]
}
 800570a:	bf00      	nop
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	200142b8 	.word	0x200142b8

0800571c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005724:	f3ef 8311 	mrs	r3, BASEPRI
 8005728:	f04f 0120 	mov.w	r1, #32
 800572c:	f381 8811 	msr	BASEPRI, r1
 8005730:	60fb      	str	r3, [r7, #12]
 8005732:	4808      	ldr	r0, [pc, #32]	; (8005754 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005734:	f7ff fdc7 	bl	80052c6 <_PreparePacket>
 8005738:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	68b9      	ldr	r1, [r7, #8]
 800573e:	68b8      	ldr	r0, [r7, #8]
 8005740:	f7ff feb2 	bl	80054a8 <_SendPacket>
  RECORD_END();
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f383 8811 	msr	BASEPRI, r3
}
 800574a:	bf00      	nop
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	200142e8 	.word	0x200142e8

08005758 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005758:	b580      	push	{r7, lr}
 800575a:	b088      	sub	sp, #32
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005762:	f3ef 8311 	mrs	r3, BASEPRI
 8005766:	f04f 0120 	mov.w	r1, #32
 800576a:	f381 8811 	msr	BASEPRI, r1
 800576e:	617b      	str	r3, [r7, #20]
 8005770:	4816      	ldr	r0, [pc, #88]	; (80057cc <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005772:	f7ff fda8 	bl	80052c6 <_PreparePacket>
 8005776:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	61fb      	str	r3, [r7, #28]
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	61bb      	str	r3, [r7, #24]
 8005784:	e00b      	b.n	800579e <SEGGER_SYSVIEW_RecordU32+0x46>
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	b2da      	uxtb	r2, r3
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	1c59      	adds	r1, r3, #1
 800578e:	61f9      	str	r1, [r7, #28]
 8005790:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005794:	b2d2      	uxtb	r2, r2
 8005796:	701a      	strb	r2, [r3, #0]
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	09db      	lsrs	r3, r3, #7
 800579c:	61bb      	str	r3, [r7, #24]
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	2b7f      	cmp	r3, #127	; 0x7f
 80057a2:	d8f0      	bhi.n	8005786 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	1c5a      	adds	r2, r3, #1
 80057a8:	61fa      	str	r2, [r7, #28]
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	b2d2      	uxtb	r2, r2
 80057ae:	701a      	strb	r2, [r3, #0]
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	68f9      	ldr	r1, [r7, #12]
 80057b8:	6938      	ldr	r0, [r7, #16]
 80057ba:	f7ff fe75 	bl	80054a8 <_SendPacket>
  RECORD_END();
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f383 8811 	msr	BASEPRI, r3
}
 80057c4:	bf00      	nop
 80057c6:	3720      	adds	r7, #32
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	200142e8 	.word	0x200142e8

080057d0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b08c      	sub	sp, #48	; 0x30
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80057dc:	f3ef 8311 	mrs	r3, BASEPRI
 80057e0:	f04f 0120 	mov.w	r1, #32
 80057e4:	f381 8811 	msr	BASEPRI, r1
 80057e8:	61fb      	str	r3, [r7, #28]
 80057ea:	4825      	ldr	r0, [pc, #148]	; (8005880 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80057ec:	f7ff fd6b 	bl	80052c6 <_PreparePacket>
 80057f0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80057fe:	e00b      	b.n	8005818 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005802:	b2da      	uxtb	r2, r3
 8005804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005806:	1c59      	adds	r1, r3, #1
 8005808:	62f9      	str	r1, [r7, #44]	; 0x2c
 800580a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800580e:	b2d2      	uxtb	r2, r2
 8005810:	701a      	strb	r2, [r3, #0]
 8005812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005814:	09db      	lsrs	r3, r3, #7
 8005816:	62bb      	str	r3, [r7, #40]	; 0x28
 8005818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581a:	2b7f      	cmp	r3, #127	; 0x7f
 800581c:	d8f0      	bhi.n	8005800 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800581e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005820:	1c5a      	adds	r2, r3, #1
 8005822:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005824:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005826:	b2d2      	uxtb	r2, r2
 8005828:	701a      	strb	r2, [r3, #0]
 800582a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	627b      	str	r3, [r7, #36]	; 0x24
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	623b      	str	r3, [r7, #32]
 8005836:	e00b      	b.n	8005850 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005838:	6a3b      	ldr	r3, [r7, #32]
 800583a:	b2da      	uxtb	r2, r3
 800583c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583e:	1c59      	adds	r1, r3, #1
 8005840:	6279      	str	r1, [r7, #36]	; 0x24
 8005842:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005846:	b2d2      	uxtb	r2, r2
 8005848:	701a      	strb	r2, [r3, #0]
 800584a:	6a3b      	ldr	r3, [r7, #32]
 800584c:	09db      	lsrs	r3, r3, #7
 800584e:	623b      	str	r3, [r7, #32]
 8005850:	6a3b      	ldr	r3, [r7, #32]
 8005852:	2b7f      	cmp	r3, #127	; 0x7f
 8005854:	d8f0      	bhi.n	8005838 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005858:	1c5a      	adds	r2, r3, #1
 800585a:	627a      	str	r2, [r7, #36]	; 0x24
 800585c:	6a3a      	ldr	r2, [r7, #32]
 800585e:	b2d2      	uxtb	r2, r2
 8005860:	701a      	strb	r2, [r3, #0]
 8005862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005864:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	6979      	ldr	r1, [r7, #20]
 800586a:	69b8      	ldr	r0, [r7, #24]
 800586c:	f7ff fe1c 	bl	80054a8 <_SendPacket>
  RECORD_END();
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	f383 8811 	msr	BASEPRI, r3
}
 8005876:	bf00      	nop
 8005878:	3730      	adds	r7, #48	; 0x30
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	200142e8 	.word	0x200142e8

08005884 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005884:	b580      	push	{r7, lr}
 8005886:	b08e      	sub	sp, #56	; 0x38
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
 8005890:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005892:	f3ef 8311 	mrs	r3, BASEPRI
 8005896:	f04f 0120 	mov.w	r1, #32
 800589a:	f381 8811 	msr	BASEPRI, r1
 800589e:	61fb      	str	r3, [r7, #28]
 80058a0:	4832      	ldr	r0, [pc, #200]	; (800596c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80058a2:	f7ff fd10 	bl	80052c6 <_PreparePacket>
 80058a6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	637b      	str	r3, [r7, #52]	; 0x34
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	633b      	str	r3, [r7, #48]	; 0x30
 80058b4:	e00b      	b.n	80058ce <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80058b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b8:	b2da      	uxtb	r2, r3
 80058ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058bc:	1c59      	adds	r1, r3, #1
 80058be:	6379      	str	r1, [r7, #52]	; 0x34
 80058c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058c4:	b2d2      	uxtb	r2, r2
 80058c6:	701a      	strb	r2, [r3, #0]
 80058c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ca:	09db      	lsrs	r3, r3, #7
 80058cc:	633b      	str	r3, [r7, #48]	; 0x30
 80058ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d0:	2b7f      	cmp	r3, #127	; 0x7f
 80058d2:	d8f0      	bhi.n	80058b6 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80058d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058d6:	1c5a      	adds	r2, r3, #1
 80058d8:	637a      	str	r2, [r7, #52]	; 0x34
 80058da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058dc:	b2d2      	uxtb	r2, r2
 80058de:	701a      	strb	r2, [r3, #0]
 80058e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80058ec:	e00b      	b.n	8005906 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80058ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f0:	b2da      	uxtb	r2, r3
 80058f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f4:	1c59      	adds	r1, r3, #1
 80058f6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80058f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058fc:	b2d2      	uxtb	r2, r2
 80058fe:	701a      	strb	r2, [r3, #0]
 8005900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005902:	09db      	lsrs	r3, r3, #7
 8005904:	62bb      	str	r3, [r7, #40]	; 0x28
 8005906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005908:	2b7f      	cmp	r3, #127	; 0x7f
 800590a:	d8f0      	bhi.n	80058ee <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800590c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800590e:	1c5a      	adds	r2, r3, #1
 8005910:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005912:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005914:	b2d2      	uxtb	r2, r2
 8005916:	701a      	strb	r2, [r3, #0]
 8005918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	627b      	str	r3, [r7, #36]	; 0x24
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	623b      	str	r3, [r7, #32]
 8005924:	e00b      	b.n	800593e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005926:	6a3b      	ldr	r3, [r7, #32]
 8005928:	b2da      	uxtb	r2, r3
 800592a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592c:	1c59      	adds	r1, r3, #1
 800592e:	6279      	str	r1, [r7, #36]	; 0x24
 8005930:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005934:	b2d2      	uxtb	r2, r2
 8005936:	701a      	strb	r2, [r3, #0]
 8005938:	6a3b      	ldr	r3, [r7, #32]
 800593a:	09db      	lsrs	r3, r3, #7
 800593c:	623b      	str	r3, [r7, #32]
 800593e:	6a3b      	ldr	r3, [r7, #32]
 8005940:	2b7f      	cmp	r3, #127	; 0x7f
 8005942:	d8f0      	bhi.n	8005926 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005946:	1c5a      	adds	r2, r3, #1
 8005948:	627a      	str	r2, [r7, #36]	; 0x24
 800594a:	6a3a      	ldr	r2, [r7, #32]
 800594c:	b2d2      	uxtb	r2, r2
 800594e:	701a      	strb	r2, [r3, #0]
 8005950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005952:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	6979      	ldr	r1, [r7, #20]
 8005958:	69b8      	ldr	r0, [r7, #24]
 800595a:	f7ff fda5 	bl	80054a8 <_SendPacket>
  RECORD_END();
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	f383 8811 	msr	BASEPRI, r3
}
 8005964:	bf00      	nop
 8005966:	3738      	adds	r7, #56	; 0x38
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	200142e8 	.word	0x200142e8

08005970 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005970:	b580      	push	{r7, lr}
 8005972:	b090      	sub	sp, #64	; 0x40
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
 800597c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800597e:	f3ef 8311 	mrs	r3, BASEPRI
 8005982:	f04f 0120 	mov.w	r1, #32
 8005986:	f381 8811 	msr	BASEPRI, r1
 800598a:	61fb      	str	r3, [r7, #28]
 800598c:	4840      	ldr	r0, [pc, #256]	; (8005a90 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800598e:	f7ff fc9a 	bl	80052c6 <_PreparePacket>
 8005992:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	63bb      	str	r3, [r7, #56]	; 0x38
 80059a0:	e00b      	b.n	80059ba <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80059a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a4:	b2da      	uxtb	r2, r3
 80059a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059a8:	1c59      	adds	r1, r3, #1
 80059aa:	63f9      	str	r1, [r7, #60]	; 0x3c
 80059ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059b0:	b2d2      	uxtb	r2, r2
 80059b2:	701a      	strb	r2, [r3, #0]
 80059b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b6:	09db      	lsrs	r3, r3, #7
 80059b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80059ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059bc:	2b7f      	cmp	r3, #127	; 0x7f
 80059be:	d8f0      	bhi.n	80059a2 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80059c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059c2:	1c5a      	adds	r2, r3, #1
 80059c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80059c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059c8:	b2d2      	uxtb	r2, r2
 80059ca:	701a      	strb	r2, [r3, #0]
 80059cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ce:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	637b      	str	r3, [r7, #52]	; 0x34
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	633b      	str	r3, [r7, #48]	; 0x30
 80059d8:	e00b      	b.n	80059f2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80059da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059dc:	b2da      	uxtb	r2, r3
 80059de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e0:	1c59      	adds	r1, r3, #1
 80059e2:	6379      	str	r1, [r7, #52]	; 0x34
 80059e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059e8:	b2d2      	uxtb	r2, r2
 80059ea:	701a      	strb	r2, [r3, #0]
 80059ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ee:	09db      	lsrs	r3, r3, #7
 80059f0:	633b      	str	r3, [r7, #48]	; 0x30
 80059f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f4:	2b7f      	cmp	r3, #127	; 0x7f
 80059f6:	d8f0      	bhi.n	80059da <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80059f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059fa:	1c5a      	adds	r2, r3, #1
 80059fc:	637a      	str	r2, [r7, #52]	; 0x34
 80059fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a00:	b2d2      	uxtb	r2, r2
 8005a02:	701a      	strb	r2, [r3, #0]
 8005a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a06:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a10:	e00b      	b.n	8005a2a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a14:	b2da      	uxtb	r2, r3
 8005a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a18:	1c59      	adds	r1, r3, #1
 8005a1a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005a1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a20:	b2d2      	uxtb	r2, r2
 8005a22:	701a      	strb	r2, [r3, #0]
 8005a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a26:	09db      	lsrs	r3, r3, #7
 8005a28:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2c:	2b7f      	cmp	r3, #127	; 0x7f
 8005a2e:	d8f0      	bhi.n	8005a12 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a32:	1c5a      	adds	r2, r3, #1
 8005a34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a38:	b2d2      	uxtb	r2, r2
 8005a3a:	701a      	strb	r2, [r3, #0]
 8005a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	627b      	str	r3, [r7, #36]	; 0x24
 8005a44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a46:	623b      	str	r3, [r7, #32]
 8005a48:	e00b      	b.n	8005a62 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005a4a:	6a3b      	ldr	r3, [r7, #32]
 8005a4c:	b2da      	uxtb	r2, r3
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a50:	1c59      	adds	r1, r3, #1
 8005a52:	6279      	str	r1, [r7, #36]	; 0x24
 8005a54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a58:	b2d2      	uxtb	r2, r2
 8005a5a:	701a      	strb	r2, [r3, #0]
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	09db      	lsrs	r3, r3, #7
 8005a60:	623b      	str	r3, [r7, #32]
 8005a62:	6a3b      	ldr	r3, [r7, #32]
 8005a64:	2b7f      	cmp	r3, #127	; 0x7f
 8005a66:	d8f0      	bhi.n	8005a4a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6a:	1c5a      	adds	r2, r3, #1
 8005a6c:	627a      	str	r2, [r7, #36]	; 0x24
 8005a6e:	6a3a      	ldr	r2, [r7, #32]
 8005a70:	b2d2      	uxtb	r2, r2
 8005a72:	701a      	strb	r2, [r3, #0]
 8005a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a76:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	6979      	ldr	r1, [r7, #20]
 8005a7c:	69b8      	ldr	r0, [r7, #24]
 8005a7e:	f7ff fd13 	bl	80054a8 <_SendPacket>
  RECORD_END();
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	f383 8811 	msr	BASEPRI, r3
}
 8005a88:	bf00      	nop
 8005a8a:	3740      	adds	r7, #64	; 0x40
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	200142e8 	.word	0x200142e8

08005a94 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b08c      	sub	sp, #48	; 0x30
 8005a98:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005a9a:	4b58      	ldr	r3, [pc, #352]	; (8005bfc <SEGGER_SYSVIEW_Start+0x168>)
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005aa0:	f3ef 8311 	mrs	r3, BASEPRI
 8005aa4:	f04f 0120 	mov.w	r1, #32
 8005aa8:	f381 8811 	msr	BASEPRI, r1
 8005aac:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005aae:	4b53      	ldr	r3, [pc, #332]	; (8005bfc <SEGGER_SYSVIEW_Start+0x168>)
 8005ab0:	785b      	ldrb	r3, [r3, #1]
 8005ab2:	220a      	movs	r2, #10
 8005ab4:	4952      	ldr	r1, [pc, #328]	; (8005c00 <SEGGER_SYSVIEW_Start+0x16c>)
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7fa fb92 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005ac2:	200a      	movs	r0, #10
 8005ac4:	f7ff fe2a 	bl	800571c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005ac8:	f3ef 8311 	mrs	r3, BASEPRI
 8005acc:	f04f 0120 	mov.w	r1, #32
 8005ad0:	f381 8811 	msr	BASEPRI, r1
 8005ad4:	60bb      	str	r3, [r7, #8]
 8005ad6:	484b      	ldr	r0, [pc, #300]	; (8005c04 <SEGGER_SYSVIEW_Start+0x170>)
 8005ad8:	f7ff fbf5 	bl	80052c6 <_PreparePacket>
 8005adc:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ae6:	4b45      	ldr	r3, [pc, #276]	; (8005bfc <SEGGER_SYSVIEW_Start+0x168>)
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aec:	e00b      	b.n	8005b06 <SEGGER_SYSVIEW_Start+0x72>
 8005aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af0:	b2da      	uxtb	r2, r3
 8005af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af4:	1c59      	adds	r1, r3, #1
 8005af6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005af8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005afc:	b2d2      	uxtb	r2, r2
 8005afe:	701a      	strb	r2, [r3, #0]
 8005b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b02:	09db      	lsrs	r3, r3, #7
 8005b04:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b08:	2b7f      	cmp	r3, #127	; 0x7f
 8005b0a:	d8f0      	bhi.n	8005aee <SEGGER_SYSVIEW_Start+0x5a>
 8005b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b0e:	1c5a      	adds	r2, r3, #1
 8005b10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b14:	b2d2      	uxtb	r2, r2
 8005b16:	701a      	strb	r2, [r3, #0]
 8005b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b1a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b20:	4b36      	ldr	r3, [pc, #216]	; (8005bfc <SEGGER_SYSVIEW_Start+0x168>)
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	623b      	str	r3, [r7, #32]
 8005b26:	e00b      	b.n	8005b40 <SEGGER_SYSVIEW_Start+0xac>
 8005b28:	6a3b      	ldr	r3, [r7, #32]
 8005b2a:	b2da      	uxtb	r2, r3
 8005b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2e:	1c59      	adds	r1, r3, #1
 8005b30:	6279      	str	r1, [r7, #36]	; 0x24
 8005b32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b36:	b2d2      	uxtb	r2, r2
 8005b38:	701a      	strb	r2, [r3, #0]
 8005b3a:	6a3b      	ldr	r3, [r7, #32]
 8005b3c:	09db      	lsrs	r3, r3, #7
 8005b3e:	623b      	str	r3, [r7, #32]
 8005b40:	6a3b      	ldr	r3, [r7, #32]
 8005b42:	2b7f      	cmp	r3, #127	; 0x7f
 8005b44:	d8f0      	bhi.n	8005b28 <SEGGER_SYSVIEW_Start+0x94>
 8005b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b48:	1c5a      	adds	r2, r3, #1
 8005b4a:	627a      	str	r2, [r7, #36]	; 0x24
 8005b4c:	6a3a      	ldr	r2, [r7, #32]
 8005b4e:	b2d2      	uxtb	r2, r2
 8005b50:	701a      	strb	r2, [r3, #0]
 8005b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b54:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	61fb      	str	r3, [r7, #28]
 8005b5a:	4b28      	ldr	r3, [pc, #160]	; (8005bfc <SEGGER_SYSVIEW_Start+0x168>)
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	61bb      	str	r3, [r7, #24]
 8005b60:	e00b      	b.n	8005b7a <SEGGER_SYSVIEW_Start+0xe6>
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	b2da      	uxtb	r2, r3
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	1c59      	adds	r1, r3, #1
 8005b6a:	61f9      	str	r1, [r7, #28]
 8005b6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b70:	b2d2      	uxtb	r2, r2
 8005b72:	701a      	strb	r2, [r3, #0]
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	09db      	lsrs	r3, r3, #7
 8005b78:	61bb      	str	r3, [r7, #24]
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	2b7f      	cmp	r3, #127	; 0x7f
 8005b7e:	d8f0      	bhi.n	8005b62 <SEGGER_SYSVIEW_Start+0xce>
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	1c5a      	adds	r2, r3, #1
 8005b84:	61fa      	str	r2, [r7, #28]
 8005b86:	69ba      	ldr	r2, [r7, #24]
 8005b88:	b2d2      	uxtb	r2, r2
 8005b8a:	701a      	strb	r2, [r3, #0]
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	617b      	str	r3, [r7, #20]
 8005b94:	2300      	movs	r3, #0
 8005b96:	613b      	str	r3, [r7, #16]
 8005b98:	e00b      	b.n	8005bb2 <SEGGER_SYSVIEW_Start+0x11e>
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	b2da      	uxtb	r2, r3
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	1c59      	adds	r1, r3, #1
 8005ba2:	6179      	str	r1, [r7, #20]
 8005ba4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ba8:	b2d2      	uxtb	r2, r2
 8005baa:	701a      	strb	r2, [r3, #0]
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	09db      	lsrs	r3, r3, #7
 8005bb0:	613b      	str	r3, [r7, #16]
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	2b7f      	cmp	r3, #127	; 0x7f
 8005bb6:	d8f0      	bhi.n	8005b9a <SEGGER_SYSVIEW_Start+0x106>
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	1c5a      	adds	r2, r3, #1
 8005bbc:	617a      	str	r2, [r7, #20]
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	b2d2      	uxtb	r2, r2
 8005bc2:	701a      	strb	r2, [r3, #0]
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005bc8:	2218      	movs	r2, #24
 8005bca:	6839      	ldr	r1, [r7, #0]
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f7ff fc6b 	bl	80054a8 <_SendPacket>
      RECORD_END();
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005bd8:	4b08      	ldr	r3, [pc, #32]	; (8005bfc <SEGGER_SYSVIEW_Start+0x168>)
 8005bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d002      	beq.n	8005be6 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005be0:	4b06      	ldr	r3, [pc, #24]	; (8005bfc <SEGGER_SYSVIEW_Start+0x168>)
 8005be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005be6:	f000 f9eb 	bl	8005fc0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005bea:	f000 f9b1 	bl	8005f50 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005bee:	f000 fc83 	bl	80064f8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005bf2:	bf00      	nop
 8005bf4:	3730      	adds	r7, #48	; 0x30
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	200142b8 	.word	0x200142b8
 8005c00:	080071e0 	.word	0x080071e0
 8005c04:	200142e8 	.word	0x200142e8

08005c08 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005c0e:	f3ef 8311 	mrs	r3, BASEPRI
 8005c12:	f04f 0120 	mov.w	r1, #32
 8005c16:	f381 8811 	msr	BASEPRI, r1
 8005c1a:	607b      	str	r3, [r7, #4]
 8005c1c:	480b      	ldr	r0, [pc, #44]	; (8005c4c <SEGGER_SYSVIEW_Stop+0x44>)
 8005c1e:	f7ff fb52 	bl	80052c6 <_PreparePacket>
 8005c22:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005c24:	4b0a      	ldr	r3, [pc, #40]	; (8005c50 <SEGGER_SYSVIEW_Stop+0x48>)
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d007      	beq.n	8005c3c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005c2c:	220b      	movs	r2, #11
 8005c2e:	6839      	ldr	r1, [r7, #0]
 8005c30:	6838      	ldr	r0, [r7, #0]
 8005c32:	f7ff fc39 	bl	80054a8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005c36:	4b06      	ldr	r3, [pc, #24]	; (8005c50 <SEGGER_SYSVIEW_Stop+0x48>)
 8005c38:	2200      	movs	r2, #0
 8005c3a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f383 8811 	msr	BASEPRI, r3
}
 8005c42:	bf00      	nop
 8005c44:	3708      	adds	r7, #8
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	200142e8 	.word	0x200142e8
 8005c50:	200142b8 	.word	0x200142b8

08005c54 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b08c      	sub	sp, #48	; 0x30
 8005c58:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005c5a:	f3ef 8311 	mrs	r3, BASEPRI
 8005c5e:	f04f 0120 	mov.w	r1, #32
 8005c62:	f381 8811 	msr	BASEPRI, r1
 8005c66:	60fb      	str	r3, [r7, #12]
 8005c68:	4845      	ldr	r0, [pc, #276]	; (8005d80 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005c6a:	f7ff fb2c 	bl	80052c6 <_PreparePacket>
 8005c6e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c78:	4b42      	ldr	r3, [pc, #264]	; (8005d84 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c7e:	e00b      	b.n	8005c98 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c82:	b2da      	uxtb	r2, r3
 8005c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c86:	1c59      	adds	r1, r3, #1
 8005c88:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005c8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c8e:	b2d2      	uxtb	r2, r2
 8005c90:	701a      	strb	r2, [r3, #0]
 8005c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c94:	09db      	lsrs	r3, r3, #7
 8005c96:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9a:	2b7f      	cmp	r3, #127	; 0x7f
 8005c9c:	d8f0      	bhi.n	8005c80 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca0:	1c5a      	adds	r2, r3, #1
 8005ca2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ca4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ca6:	b2d2      	uxtb	r2, r2
 8005ca8:	701a      	strb	r2, [r3, #0]
 8005caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cac:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8005cb2:	4b34      	ldr	r3, [pc, #208]	; (8005d84 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	623b      	str	r3, [r7, #32]
 8005cb8:	e00b      	b.n	8005cd2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005cba:	6a3b      	ldr	r3, [r7, #32]
 8005cbc:	b2da      	uxtb	r2, r3
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc0:	1c59      	adds	r1, r3, #1
 8005cc2:	6279      	str	r1, [r7, #36]	; 0x24
 8005cc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cc8:	b2d2      	uxtb	r2, r2
 8005cca:	701a      	strb	r2, [r3, #0]
 8005ccc:	6a3b      	ldr	r3, [r7, #32]
 8005cce:	09db      	lsrs	r3, r3, #7
 8005cd0:	623b      	str	r3, [r7, #32]
 8005cd2:	6a3b      	ldr	r3, [r7, #32]
 8005cd4:	2b7f      	cmp	r3, #127	; 0x7f
 8005cd6:	d8f0      	bhi.n	8005cba <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cda:	1c5a      	adds	r2, r3, #1
 8005cdc:	627a      	str	r2, [r7, #36]	; 0x24
 8005cde:	6a3a      	ldr	r2, [r7, #32]
 8005ce0:	b2d2      	uxtb	r2, r2
 8005ce2:	701a      	strb	r2, [r3, #0]
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	61fb      	str	r3, [r7, #28]
 8005cec:	4b25      	ldr	r3, [pc, #148]	; (8005d84 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	61bb      	str	r3, [r7, #24]
 8005cf2:	e00b      	b.n	8005d0c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	b2da      	uxtb	r2, r3
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	1c59      	adds	r1, r3, #1
 8005cfc:	61f9      	str	r1, [r7, #28]
 8005cfe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d02:	b2d2      	uxtb	r2, r2
 8005d04:	701a      	strb	r2, [r3, #0]
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	09db      	lsrs	r3, r3, #7
 8005d0a:	61bb      	str	r3, [r7, #24]
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	2b7f      	cmp	r3, #127	; 0x7f
 8005d10:	d8f0      	bhi.n	8005cf4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	1c5a      	adds	r2, r3, #1
 8005d16:	61fa      	str	r2, [r7, #28]
 8005d18:	69ba      	ldr	r2, [r7, #24]
 8005d1a:	b2d2      	uxtb	r2, r2
 8005d1c:	701a      	strb	r2, [r3, #0]
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	617b      	str	r3, [r7, #20]
 8005d26:	2300      	movs	r3, #0
 8005d28:	613b      	str	r3, [r7, #16]
 8005d2a:	e00b      	b.n	8005d44 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	b2da      	uxtb	r2, r3
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	1c59      	adds	r1, r3, #1
 8005d34:	6179      	str	r1, [r7, #20]
 8005d36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d3a:	b2d2      	uxtb	r2, r2
 8005d3c:	701a      	strb	r2, [r3, #0]
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	09db      	lsrs	r3, r3, #7
 8005d42:	613b      	str	r3, [r7, #16]
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	2b7f      	cmp	r3, #127	; 0x7f
 8005d48:	d8f0      	bhi.n	8005d2c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	1c5a      	adds	r2, r3, #1
 8005d4e:	617a      	str	r2, [r7, #20]
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	b2d2      	uxtb	r2, r2
 8005d54:	701a      	strb	r2, [r3, #0]
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005d5a:	2218      	movs	r2, #24
 8005d5c:	6879      	ldr	r1, [r7, #4]
 8005d5e:	68b8      	ldr	r0, [r7, #8]
 8005d60:	f7ff fba2 	bl	80054a8 <_SendPacket>
  RECORD_END();
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005d6a:	4b06      	ldr	r3, [pc, #24]	; (8005d84 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d002      	beq.n	8005d78 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005d72:	4b04      	ldr	r3, [pc, #16]	; (8005d84 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d76:	4798      	blx	r3
  }
}
 8005d78:	bf00      	nop
 8005d7a:	3730      	adds	r7, #48	; 0x30
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	200142e8 	.word	0x200142e8
 8005d84:	200142b8 	.word	0x200142b8

08005d88 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b092      	sub	sp, #72	; 0x48
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005d90:	f3ef 8311 	mrs	r3, BASEPRI
 8005d94:	f04f 0120 	mov.w	r1, #32
 8005d98:	f381 8811 	msr	BASEPRI, r1
 8005d9c:	617b      	str	r3, [r7, #20]
 8005d9e:	486a      	ldr	r0, [pc, #424]	; (8005f48 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005da0:	f7ff fa91 	bl	80052c6 <_PreparePacket>
 8005da4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	647b      	str	r3, [r7, #68]	; 0x44
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	4b66      	ldr	r3, [pc, #408]	; (8005f4c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	643b      	str	r3, [r7, #64]	; 0x40
 8005dba:	e00b      	b.n	8005dd4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dbe:	b2da      	uxtb	r2, r3
 8005dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dc2:	1c59      	adds	r1, r3, #1
 8005dc4:	6479      	str	r1, [r7, #68]	; 0x44
 8005dc6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dca:	b2d2      	uxtb	r2, r2
 8005dcc:	701a      	strb	r2, [r3, #0]
 8005dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dd0:	09db      	lsrs	r3, r3, #7
 8005dd2:	643b      	str	r3, [r7, #64]	; 0x40
 8005dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dd6:	2b7f      	cmp	r3, #127	; 0x7f
 8005dd8:	d8f0      	bhi.n	8005dbc <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005dda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ddc:	1c5a      	adds	r2, r3, #1
 8005dde:	647a      	str	r2, [r7, #68]	; 0x44
 8005de0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005de2:	b2d2      	uxtb	r2, r2
 8005de4:	701a      	strb	r2, [r3, #0]
 8005de6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005de8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005df4:	e00b      	b.n	8005e0e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df8:	b2da      	uxtb	r2, r3
 8005dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dfc:	1c59      	adds	r1, r3, #1
 8005dfe:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005e00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e04:	b2d2      	uxtb	r2, r2
 8005e06:	701a      	strb	r2, [r3, #0]
 8005e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e0a:	09db      	lsrs	r3, r3, #7
 8005e0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e10:	2b7f      	cmp	r3, #127	; 0x7f
 8005e12:	d8f0      	bhi.n	8005df6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e16:	1c5a      	adds	r2, r3, #1
 8005e18:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005e1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e1c:	b2d2      	uxtb	r2, r2
 8005e1e:	701a      	strb	r2, [r3, #0]
 8005e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e22:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	2220      	movs	r2, #32
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	68f8      	ldr	r0, [r7, #12]
 8005e2e:	f7ff f9fd 	bl	800522c <_EncodeStr>
 8005e32:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005e34:	2209      	movs	r2, #9
 8005e36:	68f9      	ldr	r1, [r7, #12]
 8005e38:	6938      	ldr	r0, [r7, #16]
 8005e3a:	f7ff fb35 	bl	80054a8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	637b      	str	r3, [r7, #52]	; 0x34
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	4b40      	ldr	r3, [pc, #256]	; (8005f4c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	633b      	str	r3, [r7, #48]	; 0x30
 8005e52:	e00b      	b.n	8005e6c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e56:	b2da      	uxtb	r2, r3
 8005e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e5a:	1c59      	adds	r1, r3, #1
 8005e5c:	6379      	str	r1, [r7, #52]	; 0x34
 8005e5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e62:	b2d2      	uxtb	r2, r2
 8005e64:	701a      	strb	r2, [r3, #0]
 8005e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e68:	09db      	lsrs	r3, r3, #7
 8005e6a:	633b      	str	r3, [r7, #48]	; 0x30
 8005e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6e:	2b7f      	cmp	r3, #127	; 0x7f
 8005e70:	d8f0      	bhi.n	8005e54 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e74:	1c5a      	adds	r2, r3, #1
 8005e76:	637a      	str	r2, [r7, #52]	; 0x34
 8005e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e7a:	b2d2      	uxtb	r2, r2
 8005e7c:	701a      	strb	r2, [r3, #0]
 8005e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e80:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e8c:	e00b      	b.n	8005ea6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e90:	b2da      	uxtb	r2, r3
 8005e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e94:	1c59      	adds	r1, r3, #1
 8005e96:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005e98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e9c:	b2d2      	uxtb	r2, r2
 8005e9e:	701a      	strb	r2, [r3, #0]
 8005ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea2:	09db      	lsrs	r3, r3, #7
 8005ea4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea8:	2b7f      	cmp	r3, #127	; 0x7f
 8005eaa:	d8f0      	bhi.n	8005e8e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eae:	1c5a      	adds	r2, r3, #1
 8005eb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005eb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005eb4:	b2d2      	uxtb	r2, r2
 8005eb6:	701a      	strb	r2, [r3, #0]
 8005eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eba:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	623b      	str	r3, [r7, #32]
 8005ec6:	e00b      	b.n	8005ee0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005ec8:	6a3b      	ldr	r3, [r7, #32]
 8005eca:	b2da      	uxtb	r2, r3
 8005ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ece:	1c59      	adds	r1, r3, #1
 8005ed0:	6279      	str	r1, [r7, #36]	; 0x24
 8005ed2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ed6:	b2d2      	uxtb	r2, r2
 8005ed8:	701a      	strb	r2, [r3, #0]
 8005eda:	6a3b      	ldr	r3, [r7, #32]
 8005edc:	09db      	lsrs	r3, r3, #7
 8005ede:	623b      	str	r3, [r7, #32]
 8005ee0:	6a3b      	ldr	r3, [r7, #32]
 8005ee2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ee4:	d8f0      	bhi.n	8005ec8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee8:	1c5a      	adds	r2, r3, #1
 8005eea:	627a      	str	r2, [r7, #36]	; 0x24
 8005eec:	6a3a      	ldr	r2, [r7, #32]
 8005eee:	b2d2      	uxtb	r2, r2
 8005ef0:	701a      	strb	r2, [r3, #0]
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	61fb      	str	r3, [r7, #28]
 8005efa:	2300      	movs	r3, #0
 8005efc:	61bb      	str	r3, [r7, #24]
 8005efe:	e00b      	b.n	8005f18 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	1c59      	adds	r1, r3, #1
 8005f08:	61f9      	str	r1, [r7, #28]
 8005f0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f0e:	b2d2      	uxtb	r2, r2
 8005f10:	701a      	strb	r2, [r3, #0]
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	09db      	lsrs	r3, r3, #7
 8005f16:	61bb      	str	r3, [r7, #24]
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	2b7f      	cmp	r3, #127	; 0x7f
 8005f1c:	d8f0      	bhi.n	8005f00 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	1c5a      	adds	r2, r3, #1
 8005f22:	61fa      	str	r2, [r7, #28]
 8005f24:	69ba      	ldr	r2, [r7, #24]
 8005f26:	b2d2      	uxtb	r2, r2
 8005f28:	701a      	strb	r2, [r3, #0]
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005f2e:	2215      	movs	r2, #21
 8005f30:	68f9      	ldr	r1, [r7, #12]
 8005f32:	6938      	ldr	r0, [r7, #16]
 8005f34:	f7ff fab8 	bl	80054a8 <_SendPacket>
  RECORD_END();
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	f383 8811 	msr	BASEPRI, r3
}
 8005f3e:	bf00      	nop
 8005f40:	3748      	adds	r7, #72	; 0x48
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	200142e8 	.word	0x200142e8
 8005f4c:	200142b8 	.word	0x200142b8

08005f50 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005f50:	b580      	push	{r7, lr}
 8005f52:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005f54:	4b07      	ldr	r3, [pc, #28]	; (8005f74 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005f56:	6a1b      	ldr	r3, [r3, #32]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d008      	beq.n	8005f6e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005f5c:	4b05      	ldr	r3, [pc, #20]	; (8005f74 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005f5e:	6a1b      	ldr	r3, [r3, #32]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d003      	beq.n	8005f6e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005f66:	4b03      	ldr	r3, [pc, #12]	; (8005f74 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	4798      	blx	r3
  }
}
 8005f6e:	bf00      	nop
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	200142b8 	.word	0x200142b8

08005f78 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b086      	sub	sp, #24
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005f80:	f3ef 8311 	mrs	r3, BASEPRI
 8005f84:	f04f 0120 	mov.w	r1, #32
 8005f88:	f381 8811 	msr	BASEPRI, r1
 8005f8c:	617b      	str	r3, [r7, #20]
 8005f8e:	480b      	ldr	r0, [pc, #44]	; (8005fbc <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005f90:	f7ff f999 	bl	80052c6 <_PreparePacket>
 8005f94:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005f96:	2280      	movs	r2, #128	; 0x80
 8005f98:	6879      	ldr	r1, [r7, #4]
 8005f9a:	6938      	ldr	r0, [r7, #16]
 8005f9c:	f7ff f946 	bl	800522c <_EncodeStr>
 8005fa0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005fa2:	220e      	movs	r2, #14
 8005fa4:	68f9      	ldr	r1, [r7, #12]
 8005fa6:	6938      	ldr	r0, [r7, #16]
 8005fa8:	f7ff fa7e 	bl	80054a8 <_SendPacket>
  RECORD_END();
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	f383 8811 	msr	BASEPRI, r3
}
 8005fb2:	bf00      	nop
 8005fb4:	3718      	adds	r7, #24
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	200142e8 	.word	0x200142e8

08005fc0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005fc0:	b590      	push	{r4, r7, lr}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005fc6:	4b15      	ldr	r3, [pc, #84]	; (800601c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d01a      	beq.n	8006004 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005fce:	4b13      	ldr	r3, [pc, #76]	; (800601c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d015      	beq.n	8006004 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005fd8:	4b10      	ldr	r3, [pc, #64]	; (800601c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005fda:	6a1b      	ldr	r3, [r3, #32]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4798      	blx	r3
 8005fe0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005fe4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005fe6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005fea:	f04f 0200 	mov.w	r2, #0
 8005fee:	f04f 0300 	mov.w	r3, #0
 8005ff2:	000a      	movs	r2, r1
 8005ff4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005ff6:	4613      	mov	r3, r2
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	4621      	mov	r1, r4
 8005ffc:	200d      	movs	r0, #13
 8005ffe:	f7ff fbe7 	bl	80057d0 <SEGGER_SYSVIEW_RecordU32x2>
 8006002:	e006      	b.n	8006012 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006004:	4b06      	ldr	r3, [pc, #24]	; (8006020 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4619      	mov	r1, r3
 800600a:	200c      	movs	r0, #12
 800600c:	f7ff fba4 	bl	8005758 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006010:	bf00      	nop
 8006012:	bf00      	nop
 8006014:	370c      	adds	r7, #12
 8006016:	46bd      	mov	sp, r7
 8006018:	bd90      	pop	{r4, r7, pc}
 800601a:	bf00      	nop
 800601c:	200142b8 	.word	0x200142b8
 8006020:	e0001004 	.word	0xe0001004

08006024 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006024:	b580      	push	{r7, lr}
 8006026:	b086      	sub	sp, #24
 8006028:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800602a:	f3ef 8311 	mrs	r3, BASEPRI
 800602e:	f04f 0120 	mov.w	r1, #32
 8006032:	f381 8811 	msr	BASEPRI, r1
 8006036:	60fb      	str	r3, [r7, #12]
 8006038:	4819      	ldr	r0, [pc, #100]	; (80060a0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800603a:	f7ff f944 	bl	80052c6 <_PreparePacket>
 800603e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006044:	4b17      	ldr	r3, [pc, #92]	; (80060a4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800604c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	617b      	str	r3, [r7, #20]
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	613b      	str	r3, [r7, #16]
 8006056:	e00b      	b.n	8006070 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	b2da      	uxtb	r2, r3
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	1c59      	adds	r1, r3, #1
 8006060:	6179      	str	r1, [r7, #20]
 8006062:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006066:	b2d2      	uxtb	r2, r2
 8006068:	701a      	strb	r2, [r3, #0]
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	09db      	lsrs	r3, r3, #7
 800606e:	613b      	str	r3, [r7, #16]
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	2b7f      	cmp	r3, #127	; 0x7f
 8006074:	d8f0      	bhi.n	8006058 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	1c5a      	adds	r2, r3, #1
 800607a:	617a      	str	r2, [r7, #20]
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	b2d2      	uxtb	r2, r2
 8006080:	701a      	strb	r2, [r3, #0]
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006086:	2202      	movs	r2, #2
 8006088:	6879      	ldr	r1, [r7, #4]
 800608a:	68b8      	ldr	r0, [r7, #8]
 800608c:	f7ff fa0c 	bl	80054a8 <_SendPacket>
  RECORD_END();
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f383 8811 	msr	BASEPRI, r3
}
 8006096:	bf00      	nop
 8006098:	3718      	adds	r7, #24
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	200142e8 	.word	0x200142e8
 80060a4:	e000ed04 	.word	0xe000ed04

080060a8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80060ae:	f3ef 8311 	mrs	r3, BASEPRI
 80060b2:	f04f 0120 	mov.w	r1, #32
 80060b6:	f381 8811 	msr	BASEPRI, r1
 80060ba:	607b      	str	r3, [r7, #4]
 80060bc:	4807      	ldr	r0, [pc, #28]	; (80060dc <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80060be:	f7ff f902 	bl	80052c6 <_PreparePacket>
 80060c2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80060c4:	2203      	movs	r2, #3
 80060c6:	6839      	ldr	r1, [r7, #0]
 80060c8:	6838      	ldr	r0, [r7, #0]
 80060ca:	f7ff f9ed 	bl	80054a8 <_SendPacket>
  RECORD_END();
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f383 8811 	msr	BASEPRI, r3
}
 80060d4:	bf00      	nop
 80060d6:	3708      	adds	r7, #8
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	200142e8 	.word	0x200142e8

080060e0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80060e6:	f3ef 8311 	mrs	r3, BASEPRI
 80060ea:	f04f 0120 	mov.w	r1, #32
 80060ee:	f381 8811 	msr	BASEPRI, r1
 80060f2:	607b      	str	r3, [r7, #4]
 80060f4:	4807      	ldr	r0, [pc, #28]	; (8006114 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80060f6:	f7ff f8e6 	bl	80052c6 <_PreparePacket>
 80060fa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80060fc:	2212      	movs	r2, #18
 80060fe:	6839      	ldr	r1, [r7, #0]
 8006100:	6838      	ldr	r0, [r7, #0]
 8006102:	f7ff f9d1 	bl	80054a8 <_SendPacket>
  RECORD_END();
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f383 8811 	msr	BASEPRI, r3
}
 800610c:	bf00      	nop
 800610e:	3708      	adds	r7, #8
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	200142e8 	.word	0x200142e8

08006118 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800611e:	f3ef 8311 	mrs	r3, BASEPRI
 8006122:	f04f 0120 	mov.w	r1, #32
 8006126:	f381 8811 	msr	BASEPRI, r1
 800612a:	607b      	str	r3, [r7, #4]
 800612c:	4807      	ldr	r0, [pc, #28]	; (800614c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800612e:	f7ff f8ca 	bl	80052c6 <_PreparePacket>
 8006132:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006134:	2211      	movs	r2, #17
 8006136:	6839      	ldr	r1, [r7, #0]
 8006138:	6838      	ldr	r0, [r7, #0]
 800613a:	f7ff f9b5 	bl	80054a8 <_SendPacket>
  RECORD_END();
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f383 8811 	msr	BASEPRI, r3
}
 8006144:	bf00      	nop
 8006146:	3708      	adds	r7, #8
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	200142e8 	.word	0x200142e8

08006150 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006150:	b580      	push	{r7, lr}
 8006152:	b088      	sub	sp, #32
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006158:	f3ef 8311 	mrs	r3, BASEPRI
 800615c:	f04f 0120 	mov.w	r1, #32
 8006160:	f381 8811 	msr	BASEPRI, r1
 8006164:	617b      	str	r3, [r7, #20]
 8006166:	4819      	ldr	r0, [pc, #100]	; (80061cc <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006168:	f7ff f8ad 	bl	80052c6 <_PreparePacket>
 800616c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006172:	4b17      	ldr	r3, [pc, #92]	; (80061d0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	61fb      	str	r3, [r7, #28]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	61bb      	str	r3, [r7, #24]
 8006184:	e00b      	b.n	800619e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	b2da      	uxtb	r2, r3
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	1c59      	adds	r1, r3, #1
 800618e:	61f9      	str	r1, [r7, #28]
 8006190:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006194:	b2d2      	uxtb	r2, r2
 8006196:	701a      	strb	r2, [r3, #0]
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	09db      	lsrs	r3, r3, #7
 800619c:	61bb      	str	r3, [r7, #24]
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	2b7f      	cmp	r3, #127	; 0x7f
 80061a2:	d8f0      	bhi.n	8006186 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	1c5a      	adds	r2, r3, #1
 80061a8:	61fa      	str	r2, [r7, #28]
 80061aa:	69ba      	ldr	r2, [r7, #24]
 80061ac:	b2d2      	uxtb	r2, r2
 80061ae:	701a      	strb	r2, [r3, #0]
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80061b4:	2208      	movs	r2, #8
 80061b6:	68f9      	ldr	r1, [r7, #12]
 80061b8:	6938      	ldr	r0, [r7, #16]
 80061ba:	f7ff f975 	bl	80054a8 <_SendPacket>
  RECORD_END();
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	f383 8811 	msr	BASEPRI, r3
}
 80061c4:	bf00      	nop
 80061c6:	3720      	adds	r7, #32
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	200142e8 	.word	0x200142e8
 80061d0:	200142b8 	.word	0x200142b8

080061d4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b088      	sub	sp, #32
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80061dc:	f3ef 8311 	mrs	r3, BASEPRI
 80061e0:	f04f 0120 	mov.w	r1, #32
 80061e4:	f381 8811 	msr	BASEPRI, r1
 80061e8:	617b      	str	r3, [r7, #20]
 80061ea:	4819      	ldr	r0, [pc, #100]	; (8006250 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80061ec:	f7ff f86b 	bl	80052c6 <_PreparePacket>
 80061f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80061f6:	4b17      	ldr	r3, [pc, #92]	; (8006254 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	61fb      	str	r3, [r7, #28]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	61bb      	str	r3, [r7, #24]
 8006208:	e00b      	b.n	8006222 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	b2da      	uxtb	r2, r3
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	1c59      	adds	r1, r3, #1
 8006212:	61f9      	str	r1, [r7, #28]
 8006214:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006218:	b2d2      	uxtb	r2, r2
 800621a:	701a      	strb	r2, [r3, #0]
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	09db      	lsrs	r3, r3, #7
 8006220:	61bb      	str	r3, [r7, #24]
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	2b7f      	cmp	r3, #127	; 0x7f
 8006226:	d8f0      	bhi.n	800620a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	1c5a      	adds	r2, r3, #1
 800622c:	61fa      	str	r2, [r7, #28]
 800622e:	69ba      	ldr	r2, [r7, #24]
 8006230:	b2d2      	uxtb	r2, r2
 8006232:	701a      	strb	r2, [r3, #0]
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006238:	2204      	movs	r2, #4
 800623a:	68f9      	ldr	r1, [r7, #12]
 800623c:	6938      	ldr	r0, [r7, #16]
 800623e:	f7ff f933 	bl	80054a8 <_SendPacket>
  RECORD_END();
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f383 8811 	msr	BASEPRI, r3
}
 8006248:	bf00      	nop
 800624a:	3720      	adds	r7, #32
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}
 8006250:	200142e8 	.word	0x200142e8
 8006254:	200142b8 	.word	0x200142b8

08006258 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006258:	b580      	push	{r7, lr}
 800625a:	b088      	sub	sp, #32
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006260:	f3ef 8311 	mrs	r3, BASEPRI
 8006264:	f04f 0120 	mov.w	r1, #32
 8006268:	f381 8811 	msr	BASEPRI, r1
 800626c:	617b      	str	r3, [r7, #20]
 800626e:	4819      	ldr	r0, [pc, #100]	; (80062d4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006270:	f7ff f829 	bl	80052c6 <_PreparePacket>
 8006274:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800627a:	4b17      	ldr	r3, [pc, #92]	; (80062d8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	61fb      	str	r3, [r7, #28]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	61bb      	str	r3, [r7, #24]
 800628c:	e00b      	b.n	80062a6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	b2da      	uxtb	r2, r3
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	1c59      	adds	r1, r3, #1
 8006296:	61f9      	str	r1, [r7, #28]
 8006298:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800629c:	b2d2      	uxtb	r2, r2
 800629e:	701a      	strb	r2, [r3, #0]
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	09db      	lsrs	r3, r3, #7
 80062a4:	61bb      	str	r3, [r7, #24]
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	2b7f      	cmp	r3, #127	; 0x7f
 80062aa:	d8f0      	bhi.n	800628e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	1c5a      	adds	r2, r3, #1
 80062b0:	61fa      	str	r2, [r7, #28]
 80062b2:	69ba      	ldr	r2, [r7, #24]
 80062b4:	b2d2      	uxtb	r2, r2
 80062b6:	701a      	strb	r2, [r3, #0]
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80062bc:	2206      	movs	r2, #6
 80062be:	68f9      	ldr	r1, [r7, #12]
 80062c0:	6938      	ldr	r0, [r7, #16]
 80062c2:	f7ff f8f1 	bl	80054a8 <_SendPacket>
  RECORD_END();
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	f383 8811 	msr	BASEPRI, r3
}
 80062cc:	bf00      	nop
 80062ce:	3720      	adds	r7, #32
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	200142e8 	.word	0x200142e8
 80062d8:	200142b8 	.word	0x200142b8

080062dc <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80062dc:	b580      	push	{r7, lr}
 80062de:	b08a      	sub	sp, #40	; 0x28
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80062e6:	f3ef 8311 	mrs	r3, BASEPRI
 80062ea:	f04f 0120 	mov.w	r1, #32
 80062ee:	f381 8811 	msr	BASEPRI, r1
 80062f2:	617b      	str	r3, [r7, #20]
 80062f4:	4827      	ldr	r0, [pc, #156]	; (8006394 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80062f6:	f7fe ffe6 	bl	80052c6 <_PreparePacket>
 80062fa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006300:	4b25      	ldr	r3, [pc, #148]	; (8006398 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	627b      	str	r3, [r7, #36]	; 0x24
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	623b      	str	r3, [r7, #32]
 8006312:	e00b      	b.n	800632c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006314:	6a3b      	ldr	r3, [r7, #32]
 8006316:	b2da      	uxtb	r2, r3
 8006318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631a:	1c59      	adds	r1, r3, #1
 800631c:	6279      	str	r1, [r7, #36]	; 0x24
 800631e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006322:	b2d2      	uxtb	r2, r2
 8006324:	701a      	strb	r2, [r3, #0]
 8006326:	6a3b      	ldr	r3, [r7, #32]
 8006328:	09db      	lsrs	r3, r3, #7
 800632a:	623b      	str	r3, [r7, #32]
 800632c:	6a3b      	ldr	r3, [r7, #32]
 800632e:	2b7f      	cmp	r3, #127	; 0x7f
 8006330:	d8f0      	bhi.n	8006314 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006334:	1c5a      	adds	r2, r3, #1
 8006336:	627a      	str	r2, [r7, #36]	; 0x24
 8006338:	6a3a      	ldr	r2, [r7, #32]
 800633a:	b2d2      	uxtb	r2, r2
 800633c:	701a      	strb	r2, [r3, #0]
 800633e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006340:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	61fb      	str	r3, [r7, #28]
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	61bb      	str	r3, [r7, #24]
 800634a:	e00b      	b.n	8006364 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	b2da      	uxtb	r2, r3
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	1c59      	adds	r1, r3, #1
 8006354:	61f9      	str	r1, [r7, #28]
 8006356:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800635a:	b2d2      	uxtb	r2, r2
 800635c:	701a      	strb	r2, [r3, #0]
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	09db      	lsrs	r3, r3, #7
 8006362:	61bb      	str	r3, [r7, #24]
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	2b7f      	cmp	r3, #127	; 0x7f
 8006368:	d8f0      	bhi.n	800634c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	1c5a      	adds	r2, r3, #1
 800636e:	61fa      	str	r2, [r7, #28]
 8006370:	69ba      	ldr	r2, [r7, #24]
 8006372:	b2d2      	uxtb	r2, r2
 8006374:	701a      	strb	r2, [r3, #0]
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800637a:	2207      	movs	r2, #7
 800637c:	68f9      	ldr	r1, [r7, #12]
 800637e:	6938      	ldr	r0, [r7, #16]
 8006380:	f7ff f892 	bl	80054a8 <_SendPacket>
  RECORD_END();
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	f383 8811 	msr	BASEPRI, r3
}
 800638a:	bf00      	nop
 800638c:	3728      	adds	r7, #40	; 0x28
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	200142e8 	.word	0x200142e8
 8006398:	200142b8 	.word	0x200142b8

0800639c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80063a4:	4b04      	ldr	r3, [pc, #16]	; (80063b8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	1ad3      	subs	r3, r2, r3
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr
 80063b8:	200142b8 	.word	0x200142b8

080063bc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80063bc:	b580      	push	{r7, lr}
 80063be:	b08c      	sub	sp, #48	; 0x30
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	4603      	mov	r3, r0
 80063c4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80063c6:	4b3b      	ldr	r3, [pc, #236]	; (80064b4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d06d      	beq.n	80064aa <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80063ce:	4b39      	ldr	r3, [pc, #228]	; (80064b4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80063d4:	2300      	movs	r3, #0
 80063d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80063d8:	e008      	b.n	80063ec <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80063da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80063e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d007      	beq.n	80063f6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80063e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e8:	3301      	adds	r3, #1
 80063ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80063ec:	79fb      	ldrb	r3, [r7, #7]
 80063ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d3f2      	bcc.n	80063da <SEGGER_SYSVIEW_SendModule+0x1e>
 80063f4:	e000      	b.n	80063f8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80063f6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80063f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d055      	beq.n	80064aa <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80063fe:	f3ef 8311 	mrs	r3, BASEPRI
 8006402:	f04f 0120 	mov.w	r1, #32
 8006406:	f381 8811 	msr	BASEPRI, r1
 800640a:	617b      	str	r3, [r7, #20]
 800640c:	482a      	ldr	r0, [pc, #168]	; (80064b8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800640e:	f7fe ff5a 	bl	80052c6 <_PreparePacket>
 8006412:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	627b      	str	r3, [r7, #36]	; 0x24
 800641c:	79fb      	ldrb	r3, [r7, #7]
 800641e:	623b      	str	r3, [r7, #32]
 8006420:	e00b      	b.n	800643a <SEGGER_SYSVIEW_SendModule+0x7e>
 8006422:	6a3b      	ldr	r3, [r7, #32]
 8006424:	b2da      	uxtb	r2, r3
 8006426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006428:	1c59      	adds	r1, r3, #1
 800642a:	6279      	str	r1, [r7, #36]	; 0x24
 800642c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006430:	b2d2      	uxtb	r2, r2
 8006432:	701a      	strb	r2, [r3, #0]
 8006434:	6a3b      	ldr	r3, [r7, #32]
 8006436:	09db      	lsrs	r3, r3, #7
 8006438:	623b      	str	r3, [r7, #32]
 800643a:	6a3b      	ldr	r3, [r7, #32]
 800643c:	2b7f      	cmp	r3, #127	; 0x7f
 800643e:	d8f0      	bhi.n	8006422 <SEGGER_SYSVIEW_SendModule+0x66>
 8006440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006442:	1c5a      	adds	r2, r3, #1
 8006444:	627a      	str	r2, [r7, #36]	; 0x24
 8006446:	6a3a      	ldr	r2, [r7, #32]
 8006448:	b2d2      	uxtb	r2, r2
 800644a:	701a      	strb	r2, [r3, #0]
 800644c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	61fb      	str	r3, [r7, #28]
 8006454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	61bb      	str	r3, [r7, #24]
 800645a:	e00b      	b.n	8006474 <SEGGER_SYSVIEW_SendModule+0xb8>
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	b2da      	uxtb	r2, r3
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	1c59      	adds	r1, r3, #1
 8006464:	61f9      	str	r1, [r7, #28]
 8006466:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800646a:	b2d2      	uxtb	r2, r2
 800646c:	701a      	strb	r2, [r3, #0]
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	09db      	lsrs	r3, r3, #7
 8006472:	61bb      	str	r3, [r7, #24]
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	2b7f      	cmp	r3, #127	; 0x7f
 8006478:	d8f0      	bhi.n	800645c <SEGGER_SYSVIEW_SendModule+0xa0>
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	1c5a      	adds	r2, r3, #1
 800647e:	61fa      	str	r2, [r7, #28]
 8006480:	69ba      	ldr	r2, [r7, #24]
 8006482:	b2d2      	uxtb	r2, r2
 8006484:	701a      	strb	r2, [r3, #0]
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800648a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2280      	movs	r2, #128	; 0x80
 8006490:	4619      	mov	r1, r3
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f7fe feca 	bl	800522c <_EncodeStr>
 8006498:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800649a:	2216      	movs	r2, #22
 800649c:	68f9      	ldr	r1, [r7, #12]
 800649e:	6938      	ldr	r0, [r7, #16]
 80064a0:	f7ff f802 	bl	80054a8 <_SendPacket>
      RECORD_END();
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80064aa:	bf00      	nop
 80064ac:	3730      	adds	r7, #48	; 0x30
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	200142e0 	.word	0x200142e0
 80064b8:	200142e8 	.word	0x200142e8

080064bc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80064c2:	4b0c      	ldr	r3, [pc, #48]	; (80064f4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00f      	beq.n	80064ea <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80064ca:	4b0a      	ldr	r3, [pc, #40]	; (80064f4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d002      	beq.n	80064de <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1f2      	bne.n	80064d0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80064ea:	bf00      	nop
 80064ec:	3708      	adds	r7, #8
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	200142e0 	.word	0x200142e0

080064f8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b086      	sub	sp, #24
 80064fc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80064fe:	f3ef 8311 	mrs	r3, BASEPRI
 8006502:	f04f 0120 	mov.w	r1, #32
 8006506:	f381 8811 	msr	BASEPRI, r1
 800650a:	60fb      	str	r3, [r7, #12]
 800650c:	4817      	ldr	r0, [pc, #92]	; (800656c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800650e:	f7fe feda 	bl	80052c6 <_PreparePacket>
 8006512:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	617b      	str	r3, [r7, #20]
 800651c:	4b14      	ldr	r3, [pc, #80]	; (8006570 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	613b      	str	r3, [r7, #16]
 8006522:	e00b      	b.n	800653c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	b2da      	uxtb	r2, r3
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	1c59      	adds	r1, r3, #1
 800652c:	6179      	str	r1, [r7, #20]
 800652e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006532:	b2d2      	uxtb	r2, r2
 8006534:	701a      	strb	r2, [r3, #0]
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	09db      	lsrs	r3, r3, #7
 800653a:	613b      	str	r3, [r7, #16]
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	2b7f      	cmp	r3, #127	; 0x7f
 8006540:	d8f0      	bhi.n	8006524 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	1c5a      	adds	r2, r3, #1
 8006546:	617a      	str	r2, [r7, #20]
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	b2d2      	uxtb	r2, r2
 800654c:	701a      	strb	r2, [r3, #0]
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006552:	221b      	movs	r2, #27
 8006554:	6879      	ldr	r1, [r7, #4]
 8006556:	68b8      	ldr	r0, [r7, #8]
 8006558:	f7fe ffa6 	bl	80054a8 <_SendPacket>
  RECORD_END();
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f383 8811 	msr	BASEPRI, r3
}
 8006562:	bf00      	nop
 8006564:	3718      	adds	r7, #24
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	200142e8 	.word	0x200142e8
 8006570:	200142e4 	.word	0x200142e4

08006574 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006574:	b580      	push	{r7, lr}
 8006576:	b08a      	sub	sp, #40	; 0x28
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800657c:	f3ef 8311 	mrs	r3, BASEPRI
 8006580:	f04f 0120 	mov.w	r1, #32
 8006584:	f381 8811 	msr	BASEPRI, r1
 8006588:	617b      	str	r3, [r7, #20]
 800658a:	4827      	ldr	r0, [pc, #156]	; (8006628 <SEGGER_SYSVIEW_Warn+0xb4>)
 800658c:	f7fe fe9b 	bl	80052c6 <_PreparePacket>
 8006590:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006592:	2280      	movs	r2, #128	; 0x80
 8006594:	6879      	ldr	r1, [r7, #4]
 8006596:	6938      	ldr	r0, [r7, #16]
 8006598:	f7fe fe48 	bl	800522c <_EncodeStr>
 800659c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	627b      	str	r3, [r7, #36]	; 0x24
 80065a2:	2301      	movs	r3, #1
 80065a4:	623b      	str	r3, [r7, #32]
 80065a6:	e00b      	b.n	80065c0 <SEGGER_SYSVIEW_Warn+0x4c>
 80065a8:	6a3b      	ldr	r3, [r7, #32]
 80065aa:	b2da      	uxtb	r2, r3
 80065ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ae:	1c59      	adds	r1, r3, #1
 80065b0:	6279      	str	r1, [r7, #36]	; 0x24
 80065b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065b6:	b2d2      	uxtb	r2, r2
 80065b8:	701a      	strb	r2, [r3, #0]
 80065ba:	6a3b      	ldr	r3, [r7, #32]
 80065bc:	09db      	lsrs	r3, r3, #7
 80065be:	623b      	str	r3, [r7, #32]
 80065c0:	6a3b      	ldr	r3, [r7, #32]
 80065c2:	2b7f      	cmp	r3, #127	; 0x7f
 80065c4:	d8f0      	bhi.n	80065a8 <SEGGER_SYSVIEW_Warn+0x34>
 80065c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c8:	1c5a      	adds	r2, r3, #1
 80065ca:	627a      	str	r2, [r7, #36]	; 0x24
 80065cc:	6a3a      	ldr	r2, [r7, #32]
 80065ce:	b2d2      	uxtb	r2, r2
 80065d0:	701a      	strb	r2, [r3, #0]
 80065d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	61fb      	str	r3, [r7, #28]
 80065da:	2300      	movs	r3, #0
 80065dc:	61bb      	str	r3, [r7, #24]
 80065de:	e00b      	b.n	80065f8 <SEGGER_SYSVIEW_Warn+0x84>
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	b2da      	uxtb	r2, r3
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	1c59      	adds	r1, r3, #1
 80065e8:	61f9      	str	r1, [r7, #28]
 80065ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065ee:	b2d2      	uxtb	r2, r2
 80065f0:	701a      	strb	r2, [r3, #0]
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	09db      	lsrs	r3, r3, #7
 80065f6:	61bb      	str	r3, [r7, #24]
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	2b7f      	cmp	r3, #127	; 0x7f
 80065fc:	d8f0      	bhi.n	80065e0 <SEGGER_SYSVIEW_Warn+0x6c>
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	1c5a      	adds	r2, r3, #1
 8006602:	61fa      	str	r2, [r7, #28]
 8006604:	69ba      	ldr	r2, [r7, #24]
 8006606:	b2d2      	uxtb	r2, r2
 8006608:	701a      	strb	r2, [r3, #0]
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800660e:	221a      	movs	r2, #26
 8006610:	68f9      	ldr	r1, [r7, #12]
 8006612:	6938      	ldr	r0, [r7, #16]
 8006614:	f7fe ff48 	bl	80054a8 <_SendPacket>
  RECORD_END();
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	f383 8811 	msr	BASEPRI, r3
}
 800661e:	bf00      	nop
 8006620:	3728      	adds	r7, #40	; 0x28
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	200142e8 	.word	0x200142e8

0800662c <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
 8006638:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800663a:	683a      	ldr	r2, [r7, #0]
 800663c:	6879      	ldr	r1, [r7, #4]
 800663e:	2000      	movs	r0, #0
 8006640:	f7fe fcda 	bl	8004ff8 <SEGGER_RTT_Write>
  return len;
 8006644:	683b      	ldr	r3, [r7, #0]
}
 8006646:	4618      	mov	r0, r3
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
	...

08006650 <__libc_init_array>:
 8006650:	b570      	push	{r4, r5, r6, lr}
 8006652:	4d0d      	ldr	r5, [pc, #52]	; (8006688 <__libc_init_array+0x38>)
 8006654:	4c0d      	ldr	r4, [pc, #52]	; (800668c <__libc_init_array+0x3c>)
 8006656:	1b64      	subs	r4, r4, r5
 8006658:	10a4      	asrs	r4, r4, #2
 800665a:	2600      	movs	r6, #0
 800665c:	42a6      	cmp	r6, r4
 800665e:	d109      	bne.n	8006674 <__libc_init_array+0x24>
 8006660:	4d0b      	ldr	r5, [pc, #44]	; (8006690 <__libc_init_array+0x40>)
 8006662:	4c0c      	ldr	r4, [pc, #48]	; (8006694 <__libc_init_array+0x44>)
 8006664:	f000 fcfe 	bl	8007064 <_init>
 8006668:	1b64      	subs	r4, r4, r5
 800666a:	10a4      	asrs	r4, r4, #2
 800666c:	2600      	movs	r6, #0
 800666e:	42a6      	cmp	r6, r4
 8006670:	d105      	bne.n	800667e <__libc_init_array+0x2e>
 8006672:	bd70      	pop	{r4, r5, r6, pc}
 8006674:	f855 3b04 	ldr.w	r3, [r5], #4
 8006678:	4798      	blx	r3
 800667a:	3601      	adds	r6, #1
 800667c:	e7ee      	b.n	800665c <__libc_init_array+0xc>
 800667e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006682:	4798      	blx	r3
 8006684:	3601      	adds	r6, #1
 8006686:	e7f2      	b.n	800666e <__libc_init_array+0x1e>
 8006688:	08007258 	.word	0x08007258
 800668c:	08007258 	.word	0x08007258
 8006690:	08007258 	.word	0x08007258
 8006694:	0800725c 	.word	0x0800725c

08006698 <memcmp>:
 8006698:	b530      	push	{r4, r5, lr}
 800669a:	3901      	subs	r1, #1
 800669c:	2400      	movs	r4, #0
 800669e:	42a2      	cmp	r2, r4
 80066a0:	d101      	bne.n	80066a6 <memcmp+0xe>
 80066a2:	2000      	movs	r0, #0
 80066a4:	e005      	b.n	80066b2 <memcmp+0x1a>
 80066a6:	5d03      	ldrb	r3, [r0, r4]
 80066a8:	3401      	adds	r4, #1
 80066aa:	5d0d      	ldrb	r5, [r1, r4]
 80066ac:	42ab      	cmp	r3, r5
 80066ae:	d0f6      	beq.n	800669e <memcmp+0x6>
 80066b0:	1b58      	subs	r0, r3, r5
 80066b2:	bd30      	pop	{r4, r5, pc}

080066b4 <memcpy>:
 80066b4:	440a      	add	r2, r1
 80066b6:	4291      	cmp	r1, r2
 80066b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80066bc:	d100      	bne.n	80066c0 <memcpy+0xc>
 80066be:	4770      	bx	lr
 80066c0:	b510      	push	{r4, lr}
 80066c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066ca:	4291      	cmp	r1, r2
 80066cc:	d1f9      	bne.n	80066c2 <memcpy+0xe>
 80066ce:	bd10      	pop	{r4, pc}

080066d0 <memset>:
 80066d0:	4402      	add	r2, r0
 80066d2:	4603      	mov	r3, r0
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d100      	bne.n	80066da <memset+0xa>
 80066d8:	4770      	bx	lr
 80066da:	f803 1b01 	strb.w	r1, [r3], #1
 80066de:	e7f9      	b.n	80066d4 <memset+0x4>

080066e0 <_puts_r>:
 80066e0:	b570      	push	{r4, r5, r6, lr}
 80066e2:	460e      	mov	r6, r1
 80066e4:	4605      	mov	r5, r0
 80066e6:	b118      	cbz	r0, 80066f0 <_puts_r+0x10>
 80066e8:	6983      	ldr	r3, [r0, #24]
 80066ea:	b90b      	cbnz	r3, 80066f0 <_puts_r+0x10>
 80066ec:	f000 fa48 	bl	8006b80 <__sinit>
 80066f0:	69ab      	ldr	r3, [r5, #24]
 80066f2:	68ac      	ldr	r4, [r5, #8]
 80066f4:	b913      	cbnz	r3, 80066fc <_puts_r+0x1c>
 80066f6:	4628      	mov	r0, r5
 80066f8:	f000 fa42 	bl	8006b80 <__sinit>
 80066fc:	4b2c      	ldr	r3, [pc, #176]	; (80067b0 <_puts_r+0xd0>)
 80066fe:	429c      	cmp	r4, r3
 8006700:	d120      	bne.n	8006744 <_puts_r+0x64>
 8006702:	686c      	ldr	r4, [r5, #4]
 8006704:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006706:	07db      	lsls	r3, r3, #31
 8006708:	d405      	bmi.n	8006716 <_puts_r+0x36>
 800670a:	89a3      	ldrh	r3, [r4, #12]
 800670c:	0598      	lsls	r0, r3, #22
 800670e:	d402      	bmi.n	8006716 <_puts_r+0x36>
 8006710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006712:	f000 fad3 	bl	8006cbc <__retarget_lock_acquire_recursive>
 8006716:	89a3      	ldrh	r3, [r4, #12]
 8006718:	0719      	lsls	r1, r3, #28
 800671a:	d51d      	bpl.n	8006758 <_puts_r+0x78>
 800671c:	6923      	ldr	r3, [r4, #16]
 800671e:	b1db      	cbz	r3, 8006758 <_puts_r+0x78>
 8006720:	3e01      	subs	r6, #1
 8006722:	68a3      	ldr	r3, [r4, #8]
 8006724:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006728:	3b01      	subs	r3, #1
 800672a:	60a3      	str	r3, [r4, #8]
 800672c:	bb39      	cbnz	r1, 800677e <_puts_r+0x9e>
 800672e:	2b00      	cmp	r3, #0
 8006730:	da38      	bge.n	80067a4 <_puts_r+0xc4>
 8006732:	4622      	mov	r2, r4
 8006734:	210a      	movs	r1, #10
 8006736:	4628      	mov	r0, r5
 8006738:	f000 f848 	bl	80067cc <__swbuf_r>
 800673c:	3001      	adds	r0, #1
 800673e:	d011      	beq.n	8006764 <_puts_r+0x84>
 8006740:	250a      	movs	r5, #10
 8006742:	e011      	b.n	8006768 <_puts_r+0x88>
 8006744:	4b1b      	ldr	r3, [pc, #108]	; (80067b4 <_puts_r+0xd4>)
 8006746:	429c      	cmp	r4, r3
 8006748:	d101      	bne.n	800674e <_puts_r+0x6e>
 800674a:	68ac      	ldr	r4, [r5, #8]
 800674c:	e7da      	b.n	8006704 <_puts_r+0x24>
 800674e:	4b1a      	ldr	r3, [pc, #104]	; (80067b8 <_puts_r+0xd8>)
 8006750:	429c      	cmp	r4, r3
 8006752:	bf08      	it	eq
 8006754:	68ec      	ldreq	r4, [r5, #12]
 8006756:	e7d5      	b.n	8006704 <_puts_r+0x24>
 8006758:	4621      	mov	r1, r4
 800675a:	4628      	mov	r0, r5
 800675c:	f000 f888 	bl	8006870 <__swsetup_r>
 8006760:	2800      	cmp	r0, #0
 8006762:	d0dd      	beq.n	8006720 <_puts_r+0x40>
 8006764:	f04f 35ff 	mov.w	r5, #4294967295
 8006768:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800676a:	07da      	lsls	r2, r3, #31
 800676c:	d405      	bmi.n	800677a <_puts_r+0x9a>
 800676e:	89a3      	ldrh	r3, [r4, #12]
 8006770:	059b      	lsls	r3, r3, #22
 8006772:	d402      	bmi.n	800677a <_puts_r+0x9a>
 8006774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006776:	f000 faa2 	bl	8006cbe <__retarget_lock_release_recursive>
 800677a:	4628      	mov	r0, r5
 800677c:	bd70      	pop	{r4, r5, r6, pc}
 800677e:	2b00      	cmp	r3, #0
 8006780:	da04      	bge.n	800678c <_puts_r+0xac>
 8006782:	69a2      	ldr	r2, [r4, #24]
 8006784:	429a      	cmp	r2, r3
 8006786:	dc06      	bgt.n	8006796 <_puts_r+0xb6>
 8006788:	290a      	cmp	r1, #10
 800678a:	d004      	beq.n	8006796 <_puts_r+0xb6>
 800678c:	6823      	ldr	r3, [r4, #0]
 800678e:	1c5a      	adds	r2, r3, #1
 8006790:	6022      	str	r2, [r4, #0]
 8006792:	7019      	strb	r1, [r3, #0]
 8006794:	e7c5      	b.n	8006722 <_puts_r+0x42>
 8006796:	4622      	mov	r2, r4
 8006798:	4628      	mov	r0, r5
 800679a:	f000 f817 	bl	80067cc <__swbuf_r>
 800679e:	3001      	adds	r0, #1
 80067a0:	d1bf      	bne.n	8006722 <_puts_r+0x42>
 80067a2:	e7df      	b.n	8006764 <_puts_r+0x84>
 80067a4:	6823      	ldr	r3, [r4, #0]
 80067a6:	250a      	movs	r5, #10
 80067a8:	1c5a      	adds	r2, r3, #1
 80067aa:	6022      	str	r2, [r4, #0]
 80067ac:	701d      	strb	r5, [r3, #0]
 80067ae:	e7db      	b.n	8006768 <_puts_r+0x88>
 80067b0:	08007210 	.word	0x08007210
 80067b4:	08007230 	.word	0x08007230
 80067b8:	080071f0 	.word	0x080071f0

080067bc <puts>:
 80067bc:	4b02      	ldr	r3, [pc, #8]	; (80067c8 <puts+0xc>)
 80067be:	4601      	mov	r1, r0
 80067c0:	6818      	ldr	r0, [r3, #0]
 80067c2:	f7ff bf8d 	b.w	80066e0 <_puts_r>
 80067c6:	bf00      	nop
 80067c8:	20000014 	.word	0x20000014

080067cc <__swbuf_r>:
 80067cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ce:	460e      	mov	r6, r1
 80067d0:	4614      	mov	r4, r2
 80067d2:	4605      	mov	r5, r0
 80067d4:	b118      	cbz	r0, 80067de <__swbuf_r+0x12>
 80067d6:	6983      	ldr	r3, [r0, #24]
 80067d8:	b90b      	cbnz	r3, 80067de <__swbuf_r+0x12>
 80067da:	f000 f9d1 	bl	8006b80 <__sinit>
 80067de:	4b21      	ldr	r3, [pc, #132]	; (8006864 <__swbuf_r+0x98>)
 80067e0:	429c      	cmp	r4, r3
 80067e2:	d12b      	bne.n	800683c <__swbuf_r+0x70>
 80067e4:	686c      	ldr	r4, [r5, #4]
 80067e6:	69a3      	ldr	r3, [r4, #24]
 80067e8:	60a3      	str	r3, [r4, #8]
 80067ea:	89a3      	ldrh	r3, [r4, #12]
 80067ec:	071a      	lsls	r2, r3, #28
 80067ee:	d52f      	bpl.n	8006850 <__swbuf_r+0x84>
 80067f0:	6923      	ldr	r3, [r4, #16]
 80067f2:	b36b      	cbz	r3, 8006850 <__swbuf_r+0x84>
 80067f4:	6923      	ldr	r3, [r4, #16]
 80067f6:	6820      	ldr	r0, [r4, #0]
 80067f8:	1ac0      	subs	r0, r0, r3
 80067fa:	6963      	ldr	r3, [r4, #20]
 80067fc:	b2f6      	uxtb	r6, r6
 80067fe:	4283      	cmp	r3, r0
 8006800:	4637      	mov	r7, r6
 8006802:	dc04      	bgt.n	800680e <__swbuf_r+0x42>
 8006804:	4621      	mov	r1, r4
 8006806:	4628      	mov	r0, r5
 8006808:	f000 f926 	bl	8006a58 <_fflush_r>
 800680c:	bb30      	cbnz	r0, 800685c <__swbuf_r+0x90>
 800680e:	68a3      	ldr	r3, [r4, #8]
 8006810:	3b01      	subs	r3, #1
 8006812:	60a3      	str	r3, [r4, #8]
 8006814:	6823      	ldr	r3, [r4, #0]
 8006816:	1c5a      	adds	r2, r3, #1
 8006818:	6022      	str	r2, [r4, #0]
 800681a:	701e      	strb	r6, [r3, #0]
 800681c:	6963      	ldr	r3, [r4, #20]
 800681e:	3001      	adds	r0, #1
 8006820:	4283      	cmp	r3, r0
 8006822:	d004      	beq.n	800682e <__swbuf_r+0x62>
 8006824:	89a3      	ldrh	r3, [r4, #12]
 8006826:	07db      	lsls	r3, r3, #31
 8006828:	d506      	bpl.n	8006838 <__swbuf_r+0x6c>
 800682a:	2e0a      	cmp	r6, #10
 800682c:	d104      	bne.n	8006838 <__swbuf_r+0x6c>
 800682e:	4621      	mov	r1, r4
 8006830:	4628      	mov	r0, r5
 8006832:	f000 f911 	bl	8006a58 <_fflush_r>
 8006836:	b988      	cbnz	r0, 800685c <__swbuf_r+0x90>
 8006838:	4638      	mov	r0, r7
 800683a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800683c:	4b0a      	ldr	r3, [pc, #40]	; (8006868 <__swbuf_r+0x9c>)
 800683e:	429c      	cmp	r4, r3
 8006840:	d101      	bne.n	8006846 <__swbuf_r+0x7a>
 8006842:	68ac      	ldr	r4, [r5, #8]
 8006844:	e7cf      	b.n	80067e6 <__swbuf_r+0x1a>
 8006846:	4b09      	ldr	r3, [pc, #36]	; (800686c <__swbuf_r+0xa0>)
 8006848:	429c      	cmp	r4, r3
 800684a:	bf08      	it	eq
 800684c:	68ec      	ldreq	r4, [r5, #12]
 800684e:	e7ca      	b.n	80067e6 <__swbuf_r+0x1a>
 8006850:	4621      	mov	r1, r4
 8006852:	4628      	mov	r0, r5
 8006854:	f000 f80c 	bl	8006870 <__swsetup_r>
 8006858:	2800      	cmp	r0, #0
 800685a:	d0cb      	beq.n	80067f4 <__swbuf_r+0x28>
 800685c:	f04f 37ff 	mov.w	r7, #4294967295
 8006860:	e7ea      	b.n	8006838 <__swbuf_r+0x6c>
 8006862:	bf00      	nop
 8006864:	08007210 	.word	0x08007210
 8006868:	08007230 	.word	0x08007230
 800686c:	080071f0 	.word	0x080071f0

08006870 <__swsetup_r>:
 8006870:	4b32      	ldr	r3, [pc, #200]	; (800693c <__swsetup_r+0xcc>)
 8006872:	b570      	push	{r4, r5, r6, lr}
 8006874:	681d      	ldr	r5, [r3, #0]
 8006876:	4606      	mov	r6, r0
 8006878:	460c      	mov	r4, r1
 800687a:	b125      	cbz	r5, 8006886 <__swsetup_r+0x16>
 800687c:	69ab      	ldr	r3, [r5, #24]
 800687e:	b913      	cbnz	r3, 8006886 <__swsetup_r+0x16>
 8006880:	4628      	mov	r0, r5
 8006882:	f000 f97d 	bl	8006b80 <__sinit>
 8006886:	4b2e      	ldr	r3, [pc, #184]	; (8006940 <__swsetup_r+0xd0>)
 8006888:	429c      	cmp	r4, r3
 800688a:	d10f      	bne.n	80068ac <__swsetup_r+0x3c>
 800688c:	686c      	ldr	r4, [r5, #4]
 800688e:	89a3      	ldrh	r3, [r4, #12]
 8006890:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006894:	0719      	lsls	r1, r3, #28
 8006896:	d42c      	bmi.n	80068f2 <__swsetup_r+0x82>
 8006898:	06dd      	lsls	r5, r3, #27
 800689a:	d411      	bmi.n	80068c0 <__swsetup_r+0x50>
 800689c:	2309      	movs	r3, #9
 800689e:	6033      	str	r3, [r6, #0]
 80068a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80068a4:	81a3      	strh	r3, [r4, #12]
 80068a6:	f04f 30ff 	mov.w	r0, #4294967295
 80068aa:	e03e      	b.n	800692a <__swsetup_r+0xba>
 80068ac:	4b25      	ldr	r3, [pc, #148]	; (8006944 <__swsetup_r+0xd4>)
 80068ae:	429c      	cmp	r4, r3
 80068b0:	d101      	bne.n	80068b6 <__swsetup_r+0x46>
 80068b2:	68ac      	ldr	r4, [r5, #8]
 80068b4:	e7eb      	b.n	800688e <__swsetup_r+0x1e>
 80068b6:	4b24      	ldr	r3, [pc, #144]	; (8006948 <__swsetup_r+0xd8>)
 80068b8:	429c      	cmp	r4, r3
 80068ba:	bf08      	it	eq
 80068bc:	68ec      	ldreq	r4, [r5, #12]
 80068be:	e7e6      	b.n	800688e <__swsetup_r+0x1e>
 80068c0:	0758      	lsls	r0, r3, #29
 80068c2:	d512      	bpl.n	80068ea <__swsetup_r+0x7a>
 80068c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068c6:	b141      	cbz	r1, 80068da <__swsetup_r+0x6a>
 80068c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068cc:	4299      	cmp	r1, r3
 80068ce:	d002      	beq.n	80068d6 <__swsetup_r+0x66>
 80068d0:	4630      	mov	r0, r6
 80068d2:	f000 fa59 	bl	8006d88 <_free_r>
 80068d6:	2300      	movs	r3, #0
 80068d8:	6363      	str	r3, [r4, #52]	; 0x34
 80068da:	89a3      	ldrh	r3, [r4, #12]
 80068dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80068e0:	81a3      	strh	r3, [r4, #12]
 80068e2:	2300      	movs	r3, #0
 80068e4:	6063      	str	r3, [r4, #4]
 80068e6:	6923      	ldr	r3, [r4, #16]
 80068e8:	6023      	str	r3, [r4, #0]
 80068ea:	89a3      	ldrh	r3, [r4, #12]
 80068ec:	f043 0308 	orr.w	r3, r3, #8
 80068f0:	81a3      	strh	r3, [r4, #12]
 80068f2:	6923      	ldr	r3, [r4, #16]
 80068f4:	b94b      	cbnz	r3, 800690a <__swsetup_r+0x9a>
 80068f6:	89a3      	ldrh	r3, [r4, #12]
 80068f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80068fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006900:	d003      	beq.n	800690a <__swsetup_r+0x9a>
 8006902:	4621      	mov	r1, r4
 8006904:	4630      	mov	r0, r6
 8006906:	f000 f9ff 	bl	8006d08 <__smakebuf_r>
 800690a:	89a0      	ldrh	r0, [r4, #12]
 800690c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006910:	f010 0301 	ands.w	r3, r0, #1
 8006914:	d00a      	beq.n	800692c <__swsetup_r+0xbc>
 8006916:	2300      	movs	r3, #0
 8006918:	60a3      	str	r3, [r4, #8]
 800691a:	6963      	ldr	r3, [r4, #20]
 800691c:	425b      	negs	r3, r3
 800691e:	61a3      	str	r3, [r4, #24]
 8006920:	6923      	ldr	r3, [r4, #16]
 8006922:	b943      	cbnz	r3, 8006936 <__swsetup_r+0xc6>
 8006924:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006928:	d1ba      	bne.n	80068a0 <__swsetup_r+0x30>
 800692a:	bd70      	pop	{r4, r5, r6, pc}
 800692c:	0781      	lsls	r1, r0, #30
 800692e:	bf58      	it	pl
 8006930:	6963      	ldrpl	r3, [r4, #20]
 8006932:	60a3      	str	r3, [r4, #8]
 8006934:	e7f4      	b.n	8006920 <__swsetup_r+0xb0>
 8006936:	2000      	movs	r0, #0
 8006938:	e7f7      	b.n	800692a <__swsetup_r+0xba>
 800693a:	bf00      	nop
 800693c:	20000014 	.word	0x20000014
 8006940:	08007210 	.word	0x08007210
 8006944:	08007230 	.word	0x08007230
 8006948:	080071f0 	.word	0x080071f0

0800694c <__sflush_r>:
 800694c:	898a      	ldrh	r2, [r1, #12]
 800694e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006952:	4605      	mov	r5, r0
 8006954:	0710      	lsls	r0, r2, #28
 8006956:	460c      	mov	r4, r1
 8006958:	d458      	bmi.n	8006a0c <__sflush_r+0xc0>
 800695a:	684b      	ldr	r3, [r1, #4]
 800695c:	2b00      	cmp	r3, #0
 800695e:	dc05      	bgt.n	800696c <__sflush_r+0x20>
 8006960:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006962:	2b00      	cmp	r3, #0
 8006964:	dc02      	bgt.n	800696c <__sflush_r+0x20>
 8006966:	2000      	movs	r0, #0
 8006968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800696c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800696e:	2e00      	cmp	r6, #0
 8006970:	d0f9      	beq.n	8006966 <__sflush_r+0x1a>
 8006972:	2300      	movs	r3, #0
 8006974:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006978:	682f      	ldr	r7, [r5, #0]
 800697a:	602b      	str	r3, [r5, #0]
 800697c:	d032      	beq.n	80069e4 <__sflush_r+0x98>
 800697e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006980:	89a3      	ldrh	r3, [r4, #12]
 8006982:	075a      	lsls	r2, r3, #29
 8006984:	d505      	bpl.n	8006992 <__sflush_r+0x46>
 8006986:	6863      	ldr	r3, [r4, #4]
 8006988:	1ac0      	subs	r0, r0, r3
 800698a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800698c:	b10b      	cbz	r3, 8006992 <__sflush_r+0x46>
 800698e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006990:	1ac0      	subs	r0, r0, r3
 8006992:	2300      	movs	r3, #0
 8006994:	4602      	mov	r2, r0
 8006996:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006998:	6a21      	ldr	r1, [r4, #32]
 800699a:	4628      	mov	r0, r5
 800699c:	47b0      	blx	r6
 800699e:	1c43      	adds	r3, r0, #1
 80069a0:	89a3      	ldrh	r3, [r4, #12]
 80069a2:	d106      	bne.n	80069b2 <__sflush_r+0x66>
 80069a4:	6829      	ldr	r1, [r5, #0]
 80069a6:	291d      	cmp	r1, #29
 80069a8:	d82c      	bhi.n	8006a04 <__sflush_r+0xb8>
 80069aa:	4a2a      	ldr	r2, [pc, #168]	; (8006a54 <__sflush_r+0x108>)
 80069ac:	40ca      	lsrs	r2, r1
 80069ae:	07d6      	lsls	r6, r2, #31
 80069b0:	d528      	bpl.n	8006a04 <__sflush_r+0xb8>
 80069b2:	2200      	movs	r2, #0
 80069b4:	6062      	str	r2, [r4, #4]
 80069b6:	04d9      	lsls	r1, r3, #19
 80069b8:	6922      	ldr	r2, [r4, #16]
 80069ba:	6022      	str	r2, [r4, #0]
 80069bc:	d504      	bpl.n	80069c8 <__sflush_r+0x7c>
 80069be:	1c42      	adds	r2, r0, #1
 80069c0:	d101      	bne.n	80069c6 <__sflush_r+0x7a>
 80069c2:	682b      	ldr	r3, [r5, #0]
 80069c4:	b903      	cbnz	r3, 80069c8 <__sflush_r+0x7c>
 80069c6:	6560      	str	r0, [r4, #84]	; 0x54
 80069c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069ca:	602f      	str	r7, [r5, #0]
 80069cc:	2900      	cmp	r1, #0
 80069ce:	d0ca      	beq.n	8006966 <__sflush_r+0x1a>
 80069d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069d4:	4299      	cmp	r1, r3
 80069d6:	d002      	beq.n	80069de <__sflush_r+0x92>
 80069d8:	4628      	mov	r0, r5
 80069da:	f000 f9d5 	bl	8006d88 <_free_r>
 80069de:	2000      	movs	r0, #0
 80069e0:	6360      	str	r0, [r4, #52]	; 0x34
 80069e2:	e7c1      	b.n	8006968 <__sflush_r+0x1c>
 80069e4:	6a21      	ldr	r1, [r4, #32]
 80069e6:	2301      	movs	r3, #1
 80069e8:	4628      	mov	r0, r5
 80069ea:	47b0      	blx	r6
 80069ec:	1c41      	adds	r1, r0, #1
 80069ee:	d1c7      	bne.n	8006980 <__sflush_r+0x34>
 80069f0:	682b      	ldr	r3, [r5, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d0c4      	beq.n	8006980 <__sflush_r+0x34>
 80069f6:	2b1d      	cmp	r3, #29
 80069f8:	d001      	beq.n	80069fe <__sflush_r+0xb2>
 80069fa:	2b16      	cmp	r3, #22
 80069fc:	d101      	bne.n	8006a02 <__sflush_r+0xb6>
 80069fe:	602f      	str	r7, [r5, #0]
 8006a00:	e7b1      	b.n	8006966 <__sflush_r+0x1a>
 8006a02:	89a3      	ldrh	r3, [r4, #12]
 8006a04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a08:	81a3      	strh	r3, [r4, #12]
 8006a0a:	e7ad      	b.n	8006968 <__sflush_r+0x1c>
 8006a0c:	690f      	ldr	r7, [r1, #16]
 8006a0e:	2f00      	cmp	r7, #0
 8006a10:	d0a9      	beq.n	8006966 <__sflush_r+0x1a>
 8006a12:	0793      	lsls	r3, r2, #30
 8006a14:	680e      	ldr	r6, [r1, #0]
 8006a16:	bf08      	it	eq
 8006a18:	694b      	ldreq	r3, [r1, #20]
 8006a1a:	600f      	str	r7, [r1, #0]
 8006a1c:	bf18      	it	ne
 8006a1e:	2300      	movne	r3, #0
 8006a20:	eba6 0807 	sub.w	r8, r6, r7
 8006a24:	608b      	str	r3, [r1, #8]
 8006a26:	f1b8 0f00 	cmp.w	r8, #0
 8006a2a:	dd9c      	ble.n	8006966 <__sflush_r+0x1a>
 8006a2c:	6a21      	ldr	r1, [r4, #32]
 8006a2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a30:	4643      	mov	r3, r8
 8006a32:	463a      	mov	r2, r7
 8006a34:	4628      	mov	r0, r5
 8006a36:	47b0      	blx	r6
 8006a38:	2800      	cmp	r0, #0
 8006a3a:	dc06      	bgt.n	8006a4a <__sflush_r+0xfe>
 8006a3c:	89a3      	ldrh	r3, [r4, #12]
 8006a3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a42:	81a3      	strh	r3, [r4, #12]
 8006a44:	f04f 30ff 	mov.w	r0, #4294967295
 8006a48:	e78e      	b.n	8006968 <__sflush_r+0x1c>
 8006a4a:	4407      	add	r7, r0
 8006a4c:	eba8 0800 	sub.w	r8, r8, r0
 8006a50:	e7e9      	b.n	8006a26 <__sflush_r+0xda>
 8006a52:	bf00      	nop
 8006a54:	20400001 	.word	0x20400001

08006a58 <_fflush_r>:
 8006a58:	b538      	push	{r3, r4, r5, lr}
 8006a5a:	690b      	ldr	r3, [r1, #16]
 8006a5c:	4605      	mov	r5, r0
 8006a5e:	460c      	mov	r4, r1
 8006a60:	b913      	cbnz	r3, 8006a68 <_fflush_r+0x10>
 8006a62:	2500      	movs	r5, #0
 8006a64:	4628      	mov	r0, r5
 8006a66:	bd38      	pop	{r3, r4, r5, pc}
 8006a68:	b118      	cbz	r0, 8006a72 <_fflush_r+0x1a>
 8006a6a:	6983      	ldr	r3, [r0, #24]
 8006a6c:	b90b      	cbnz	r3, 8006a72 <_fflush_r+0x1a>
 8006a6e:	f000 f887 	bl	8006b80 <__sinit>
 8006a72:	4b14      	ldr	r3, [pc, #80]	; (8006ac4 <_fflush_r+0x6c>)
 8006a74:	429c      	cmp	r4, r3
 8006a76:	d11b      	bne.n	8006ab0 <_fflush_r+0x58>
 8006a78:	686c      	ldr	r4, [r5, #4]
 8006a7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d0ef      	beq.n	8006a62 <_fflush_r+0xa>
 8006a82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006a84:	07d0      	lsls	r0, r2, #31
 8006a86:	d404      	bmi.n	8006a92 <_fflush_r+0x3a>
 8006a88:	0599      	lsls	r1, r3, #22
 8006a8a:	d402      	bmi.n	8006a92 <_fflush_r+0x3a>
 8006a8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a8e:	f000 f915 	bl	8006cbc <__retarget_lock_acquire_recursive>
 8006a92:	4628      	mov	r0, r5
 8006a94:	4621      	mov	r1, r4
 8006a96:	f7ff ff59 	bl	800694c <__sflush_r>
 8006a9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a9c:	07da      	lsls	r2, r3, #31
 8006a9e:	4605      	mov	r5, r0
 8006aa0:	d4e0      	bmi.n	8006a64 <_fflush_r+0xc>
 8006aa2:	89a3      	ldrh	r3, [r4, #12]
 8006aa4:	059b      	lsls	r3, r3, #22
 8006aa6:	d4dd      	bmi.n	8006a64 <_fflush_r+0xc>
 8006aa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006aaa:	f000 f908 	bl	8006cbe <__retarget_lock_release_recursive>
 8006aae:	e7d9      	b.n	8006a64 <_fflush_r+0xc>
 8006ab0:	4b05      	ldr	r3, [pc, #20]	; (8006ac8 <_fflush_r+0x70>)
 8006ab2:	429c      	cmp	r4, r3
 8006ab4:	d101      	bne.n	8006aba <_fflush_r+0x62>
 8006ab6:	68ac      	ldr	r4, [r5, #8]
 8006ab8:	e7df      	b.n	8006a7a <_fflush_r+0x22>
 8006aba:	4b04      	ldr	r3, [pc, #16]	; (8006acc <_fflush_r+0x74>)
 8006abc:	429c      	cmp	r4, r3
 8006abe:	bf08      	it	eq
 8006ac0:	68ec      	ldreq	r4, [r5, #12]
 8006ac2:	e7da      	b.n	8006a7a <_fflush_r+0x22>
 8006ac4:	08007210 	.word	0x08007210
 8006ac8:	08007230 	.word	0x08007230
 8006acc:	080071f0 	.word	0x080071f0

08006ad0 <std>:
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	b510      	push	{r4, lr}
 8006ad4:	4604      	mov	r4, r0
 8006ad6:	e9c0 3300 	strd	r3, r3, [r0]
 8006ada:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ade:	6083      	str	r3, [r0, #8]
 8006ae0:	8181      	strh	r1, [r0, #12]
 8006ae2:	6643      	str	r3, [r0, #100]	; 0x64
 8006ae4:	81c2      	strh	r2, [r0, #14]
 8006ae6:	6183      	str	r3, [r0, #24]
 8006ae8:	4619      	mov	r1, r3
 8006aea:	2208      	movs	r2, #8
 8006aec:	305c      	adds	r0, #92	; 0x5c
 8006aee:	f7ff fdef 	bl	80066d0 <memset>
 8006af2:	4b05      	ldr	r3, [pc, #20]	; (8006b08 <std+0x38>)
 8006af4:	6263      	str	r3, [r4, #36]	; 0x24
 8006af6:	4b05      	ldr	r3, [pc, #20]	; (8006b0c <std+0x3c>)
 8006af8:	62a3      	str	r3, [r4, #40]	; 0x28
 8006afa:	4b05      	ldr	r3, [pc, #20]	; (8006b10 <std+0x40>)
 8006afc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006afe:	4b05      	ldr	r3, [pc, #20]	; (8006b14 <std+0x44>)
 8006b00:	6224      	str	r4, [r4, #32]
 8006b02:	6323      	str	r3, [r4, #48]	; 0x30
 8006b04:	bd10      	pop	{r4, pc}
 8006b06:	bf00      	nop
 8006b08:	08006efd 	.word	0x08006efd
 8006b0c:	08006f1f 	.word	0x08006f1f
 8006b10:	08006f57 	.word	0x08006f57
 8006b14:	08006f7b 	.word	0x08006f7b

08006b18 <_cleanup_r>:
 8006b18:	4901      	ldr	r1, [pc, #4]	; (8006b20 <_cleanup_r+0x8>)
 8006b1a:	f000 b8af 	b.w	8006c7c <_fwalk_reent>
 8006b1e:	bf00      	nop
 8006b20:	08006a59 	.word	0x08006a59

08006b24 <__sfmoreglue>:
 8006b24:	b570      	push	{r4, r5, r6, lr}
 8006b26:	1e4a      	subs	r2, r1, #1
 8006b28:	2568      	movs	r5, #104	; 0x68
 8006b2a:	4355      	muls	r5, r2
 8006b2c:	460e      	mov	r6, r1
 8006b2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b32:	f000 f979 	bl	8006e28 <_malloc_r>
 8006b36:	4604      	mov	r4, r0
 8006b38:	b140      	cbz	r0, 8006b4c <__sfmoreglue+0x28>
 8006b3a:	2100      	movs	r1, #0
 8006b3c:	e9c0 1600 	strd	r1, r6, [r0]
 8006b40:	300c      	adds	r0, #12
 8006b42:	60a0      	str	r0, [r4, #8]
 8006b44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b48:	f7ff fdc2 	bl	80066d0 <memset>
 8006b4c:	4620      	mov	r0, r4
 8006b4e:	bd70      	pop	{r4, r5, r6, pc}

08006b50 <__sfp_lock_acquire>:
 8006b50:	4801      	ldr	r0, [pc, #4]	; (8006b58 <__sfp_lock_acquire+0x8>)
 8006b52:	f000 b8b3 	b.w	8006cbc <__retarget_lock_acquire_recursive>
 8006b56:	bf00      	nop
 8006b58:	20014514 	.word	0x20014514

08006b5c <__sfp_lock_release>:
 8006b5c:	4801      	ldr	r0, [pc, #4]	; (8006b64 <__sfp_lock_release+0x8>)
 8006b5e:	f000 b8ae 	b.w	8006cbe <__retarget_lock_release_recursive>
 8006b62:	bf00      	nop
 8006b64:	20014514 	.word	0x20014514

08006b68 <__sinit_lock_acquire>:
 8006b68:	4801      	ldr	r0, [pc, #4]	; (8006b70 <__sinit_lock_acquire+0x8>)
 8006b6a:	f000 b8a7 	b.w	8006cbc <__retarget_lock_acquire_recursive>
 8006b6e:	bf00      	nop
 8006b70:	2001450f 	.word	0x2001450f

08006b74 <__sinit_lock_release>:
 8006b74:	4801      	ldr	r0, [pc, #4]	; (8006b7c <__sinit_lock_release+0x8>)
 8006b76:	f000 b8a2 	b.w	8006cbe <__retarget_lock_release_recursive>
 8006b7a:	bf00      	nop
 8006b7c:	2001450f 	.word	0x2001450f

08006b80 <__sinit>:
 8006b80:	b510      	push	{r4, lr}
 8006b82:	4604      	mov	r4, r0
 8006b84:	f7ff fff0 	bl	8006b68 <__sinit_lock_acquire>
 8006b88:	69a3      	ldr	r3, [r4, #24]
 8006b8a:	b11b      	cbz	r3, 8006b94 <__sinit+0x14>
 8006b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b90:	f7ff bff0 	b.w	8006b74 <__sinit_lock_release>
 8006b94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006b98:	6523      	str	r3, [r4, #80]	; 0x50
 8006b9a:	4b13      	ldr	r3, [pc, #76]	; (8006be8 <__sinit+0x68>)
 8006b9c:	4a13      	ldr	r2, [pc, #76]	; (8006bec <__sinit+0x6c>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	62a2      	str	r2, [r4, #40]	; 0x28
 8006ba2:	42a3      	cmp	r3, r4
 8006ba4:	bf04      	itt	eq
 8006ba6:	2301      	moveq	r3, #1
 8006ba8:	61a3      	streq	r3, [r4, #24]
 8006baa:	4620      	mov	r0, r4
 8006bac:	f000 f820 	bl	8006bf0 <__sfp>
 8006bb0:	6060      	str	r0, [r4, #4]
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	f000 f81c 	bl	8006bf0 <__sfp>
 8006bb8:	60a0      	str	r0, [r4, #8]
 8006bba:	4620      	mov	r0, r4
 8006bbc:	f000 f818 	bl	8006bf0 <__sfp>
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	60e0      	str	r0, [r4, #12]
 8006bc4:	2104      	movs	r1, #4
 8006bc6:	6860      	ldr	r0, [r4, #4]
 8006bc8:	f7ff ff82 	bl	8006ad0 <std>
 8006bcc:	68a0      	ldr	r0, [r4, #8]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	2109      	movs	r1, #9
 8006bd2:	f7ff ff7d 	bl	8006ad0 <std>
 8006bd6:	68e0      	ldr	r0, [r4, #12]
 8006bd8:	2202      	movs	r2, #2
 8006bda:	2112      	movs	r1, #18
 8006bdc:	f7ff ff78 	bl	8006ad0 <std>
 8006be0:	2301      	movs	r3, #1
 8006be2:	61a3      	str	r3, [r4, #24]
 8006be4:	e7d2      	b.n	8006b8c <__sinit+0xc>
 8006be6:	bf00      	nop
 8006be8:	080071ec 	.word	0x080071ec
 8006bec:	08006b19 	.word	0x08006b19

08006bf0 <__sfp>:
 8006bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bf2:	4607      	mov	r7, r0
 8006bf4:	f7ff ffac 	bl	8006b50 <__sfp_lock_acquire>
 8006bf8:	4b1e      	ldr	r3, [pc, #120]	; (8006c74 <__sfp+0x84>)
 8006bfa:	681e      	ldr	r6, [r3, #0]
 8006bfc:	69b3      	ldr	r3, [r6, #24]
 8006bfe:	b913      	cbnz	r3, 8006c06 <__sfp+0x16>
 8006c00:	4630      	mov	r0, r6
 8006c02:	f7ff ffbd 	bl	8006b80 <__sinit>
 8006c06:	3648      	adds	r6, #72	; 0x48
 8006c08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	d503      	bpl.n	8006c18 <__sfp+0x28>
 8006c10:	6833      	ldr	r3, [r6, #0]
 8006c12:	b30b      	cbz	r3, 8006c58 <__sfp+0x68>
 8006c14:	6836      	ldr	r6, [r6, #0]
 8006c16:	e7f7      	b.n	8006c08 <__sfp+0x18>
 8006c18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c1c:	b9d5      	cbnz	r5, 8006c54 <__sfp+0x64>
 8006c1e:	4b16      	ldr	r3, [pc, #88]	; (8006c78 <__sfp+0x88>)
 8006c20:	60e3      	str	r3, [r4, #12]
 8006c22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c26:	6665      	str	r5, [r4, #100]	; 0x64
 8006c28:	f000 f847 	bl	8006cba <__retarget_lock_init_recursive>
 8006c2c:	f7ff ff96 	bl	8006b5c <__sfp_lock_release>
 8006c30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006c34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006c38:	6025      	str	r5, [r4, #0]
 8006c3a:	61a5      	str	r5, [r4, #24]
 8006c3c:	2208      	movs	r2, #8
 8006c3e:	4629      	mov	r1, r5
 8006c40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006c44:	f7ff fd44 	bl	80066d0 <memset>
 8006c48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c50:	4620      	mov	r0, r4
 8006c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c54:	3468      	adds	r4, #104	; 0x68
 8006c56:	e7d9      	b.n	8006c0c <__sfp+0x1c>
 8006c58:	2104      	movs	r1, #4
 8006c5a:	4638      	mov	r0, r7
 8006c5c:	f7ff ff62 	bl	8006b24 <__sfmoreglue>
 8006c60:	4604      	mov	r4, r0
 8006c62:	6030      	str	r0, [r6, #0]
 8006c64:	2800      	cmp	r0, #0
 8006c66:	d1d5      	bne.n	8006c14 <__sfp+0x24>
 8006c68:	f7ff ff78 	bl	8006b5c <__sfp_lock_release>
 8006c6c:	230c      	movs	r3, #12
 8006c6e:	603b      	str	r3, [r7, #0]
 8006c70:	e7ee      	b.n	8006c50 <__sfp+0x60>
 8006c72:	bf00      	nop
 8006c74:	080071ec 	.word	0x080071ec
 8006c78:	ffff0001 	.word	0xffff0001

08006c7c <_fwalk_reent>:
 8006c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c80:	4606      	mov	r6, r0
 8006c82:	4688      	mov	r8, r1
 8006c84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006c88:	2700      	movs	r7, #0
 8006c8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c8e:	f1b9 0901 	subs.w	r9, r9, #1
 8006c92:	d505      	bpl.n	8006ca0 <_fwalk_reent+0x24>
 8006c94:	6824      	ldr	r4, [r4, #0]
 8006c96:	2c00      	cmp	r4, #0
 8006c98:	d1f7      	bne.n	8006c8a <_fwalk_reent+0xe>
 8006c9a:	4638      	mov	r0, r7
 8006c9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ca0:	89ab      	ldrh	r3, [r5, #12]
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d907      	bls.n	8006cb6 <_fwalk_reent+0x3a>
 8006ca6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006caa:	3301      	adds	r3, #1
 8006cac:	d003      	beq.n	8006cb6 <_fwalk_reent+0x3a>
 8006cae:	4629      	mov	r1, r5
 8006cb0:	4630      	mov	r0, r6
 8006cb2:	47c0      	blx	r8
 8006cb4:	4307      	orrs	r7, r0
 8006cb6:	3568      	adds	r5, #104	; 0x68
 8006cb8:	e7e9      	b.n	8006c8e <_fwalk_reent+0x12>

08006cba <__retarget_lock_init_recursive>:
 8006cba:	4770      	bx	lr

08006cbc <__retarget_lock_acquire_recursive>:
 8006cbc:	4770      	bx	lr

08006cbe <__retarget_lock_release_recursive>:
 8006cbe:	4770      	bx	lr

08006cc0 <__swhatbuf_r>:
 8006cc0:	b570      	push	{r4, r5, r6, lr}
 8006cc2:	460e      	mov	r6, r1
 8006cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cc8:	2900      	cmp	r1, #0
 8006cca:	b096      	sub	sp, #88	; 0x58
 8006ccc:	4614      	mov	r4, r2
 8006cce:	461d      	mov	r5, r3
 8006cd0:	da07      	bge.n	8006ce2 <__swhatbuf_r+0x22>
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	602b      	str	r3, [r5, #0]
 8006cd6:	89b3      	ldrh	r3, [r6, #12]
 8006cd8:	061a      	lsls	r2, r3, #24
 8006cda:	d410      	bmi.n	8006cfe <__swhatbuf_r+0x3e>
 8006cdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ce0:	e00e      	b.n	8006d00 <__swhatbuf_r+0x40>
 8006ce2:	466a      	mov	r2, sp
 8006ce4:	f000 f95e 	bl	8006fa4 <_fstat_r>
 8006ce8:	2800      	cmp	r0, #0
 8006cea:	dbf2      	blt.n	8006cd2 <__swhatbuf_r+0x12>
 8006cec:	9a01      	ldr	r2, [sp, #4]
 8006cee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006cf2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006cf6:	425a      	negs	r2, r3
 8006cf8:	415a      	adcs	r2, r3
 8006cfa:	602a      	str	r2, [r5, #0]
 8006cfc:	e7ee      	b.n	8006cdc <__swhatbuf_r+0x1c>
 8006cfe:	2340      	movs	r3, #64	; 0x40
 8006d00:	2000      	movs	r0, #0
 8006d02:	6023      	str	r3, [r4, #0]
 8006d04:	b016      	add	sp, #88	; 0x58
 8006d06:	bd70      	pop	{r4, r5, r6, pc}

08006d08 <__smakebuf_r>:
 8006d08:	898b      	ldrh	r3, [r1, #12]
 8006d0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d0c:	079d      	lsls	r5, r3, #30
 8006d0e:	4606      	mov	r6, r0
 8006d10:	460c      	mov	r4, r1
 8006d12:	d507      	bpl.n	8006d24 <__smakebuf_r+0x1c>
 8006d14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d18:	6023      	str	r3, [r4, #0]
 8006d1a:	6123      	str	r3, [r4, #16]
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	6163      	str	r3, [r4, #20]
 8006d20:	b002      	add	sp, #8
 8006d22:	bd70      	pop	{r4, r5, r6, pc}
 8006d24:	ab01      	add	r3, sp, #4
 8006d26:	466a      	mov	r2, sp
 8006d28:	f7ff ffca 	bl	8006cc0 <__swhatbuf_r>
 8006d2c:	9900      	ldr	r1, [sp, #0]
 8006d2e:	4605      	mov	r5, r0
 8006d30:	4630      	mov	r0, r6
 8006d32:	f000 f879 	bl	8006e28 <_malloc_r>
 8006d36:	b948      	cbnz	r0, 8006d4c <__smakebuf_r+0x44>
 8006d38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d3c:	059a      	lsls	r2, r3, #22
 8006d3e:	d4ef      	bmi.n	8006d20 <__smakebuf_r+0x18>
 8006d40:	f023 0303 	bic.w	r3, r3, #3
 8006d44:	f043 0302 	orr.w	r3, r3, #2
 8006d48:	81a3      	strh	r3, [r4, #12]
 8006d4a:	e7e3      	b.n	8006d14 <__smakebuf_r+0xc>
 8006d4c:	4b0d      	ldr	r3, [pc, #52]	; (8006d84 <__smakebuf_r+0x7c>)
 8006d4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006d50:	89a3      	ldrh	r3, [r4, #12]
 8006d52:	6020      	str	r0, [r4, #0]
 8006d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d58:	81a3      	strh	r3, [r4, #12]
 8006d5a:	9b00      	ldr	r3, [sp, #0]
 8006d5c:	6163      	str	r3, [r4, #20]
 8006d5e:	9b01      	ldr	r3, [sp, #4]
 8006d60:	6120      	str	r0, [r4, #16]
 8006d62:	b15b      	cbz	r3, 8006d7c <__smakebuf_r+0x74>
 8006d64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d68:	4630      	mov	r0, r6
 8006d6a:	f000 f92d 	bl	8006fc8 <_isatty_r>
 8006d6e:	b128      	cbz	r0, 8006d7c <__smakebuf_r+0x74>
 8006d70:	89a3      	ldrh	r3, [r4, #12]
 8006d72:	f023 0303 	bic.w	r3, r3, #3
 8006d76:	f043 0301 	orr.w	r3, r3, #1
 8006d7a:	81a3      	strh	r3, [r4, #12]
 8006d7c:	89a0      	ldrh	r0, [r4, #12]
 8006d7e:	4305      	orrs	r5, r0
 8006d80:	81a5      	strh	r5, [r4, #12]
 8006d82:	e7cd      	b.n	8006d20 <__smakebuf_r+0x18>
 8006d84:	08006b19 	.word	0x08006b19

08006d88 <_free_r>:
 8006d88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d8a:	2900      	cmp	r1, #0
 8006d8c:	d048      	beq.n	8006e20 <_free_r+0x98>
 8006d8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d92:	9001      	str	r0, [sp, #4]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	f1a1 0404 	sub.w	r4, r1, #4
 8006d9a:	bfb8      	it	lt
 8006d9c:	18e4      	addlt	r4, r4, r3
 8006d9e:	f000 f935 	bl	800700c <__malloc_lock>
 8006da2:	4a20      	ldr	r2, [pc, #128]	; (8006e24 <_free_r+0x9c>)
 8006da4:	9801      	ldr	r0, [sp, #4]
 8006da6:	6813      	ldr	r3, [r2, #0]
 8006da8:	4615      	mov	r5, r2
 8006daa:	b933      	cbnz	r3, 8006dba <_free_r+0x32>
 8006dac:	6063      	str	r3, [r4, #4]
 8006dae:	6014      	str	r4, [r2, #0]
 8006db0:	b003      	add	sp, #12
 8006db2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006db6:	f000 b92f 	b.w	8007018 <__malloc_unlock>
 8006dba:	42a3      	cmp	r3, r4
 8006dbc:	d90b      	bls.n	8006dd6 <_free_r+0x4e>
 8006dbe:	6821      	ldr	r1, [r4, #0]
 8006dc0:	1862      	adds	r2, r4, r1
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	bf04      	itt	eq
 8006dc6:	681a      	ldreq	r2, [r3, #0]
 8006dc8:	685b      	ldreq	r3, [r3, #4]
 8006dca:	6063      	str	r3, [r4, #4]
 8006dcc:	bf04      	itt	eq
 8006dce:	1852      	addeq	r2, r2, r1
 8006dd0:	6022      	streq	r2, [r4, #0]
 8006dd2:	602c      	str	r4, [r5, #0]
 8006dd4:	e7ec      	b.n	8006db0 <_free_r+0x28>
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	b10b      	cbz	r3, 8006de0 <_free_r+0x58>
 8006ddc:	42a3      	cmp	r3, r4
 8006dde:	d9fa      	bls.n	8006dd6 <_free_r+0x4e>
 8006de0:	6811      	ldr	r1, [r2, #0]
 8006de2:	1855      	adds	r5, r2, r1
 8006de4:	42a5      	cmp	r5, r4
 8006de6:	d10b      	bne.n	8006e00 <_free_r+0x78>
 8006de8:	6824      	ldr	r4, [r4, #0]
 8006dea:	4421      	add	r1, r4
 8006dec:	1854      	adds	r4, r2, r1
 8006dee:	42a3      	cmp	r3, r4
 8006df0:	6011      	str	r1, [r2, #0]
 8006df2:	d1dd      	bne.n	8006db0 <_free_r+0x28>
 8006df4:	681c      	ldr	r4, [r3, #0]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	6053      	str	r3, [r2, #4]
 8006dfa:	4421      	add	r1, r4
 8006dfc:	6011      	str	r1, [r2, #0]
 8006dfe:	e7d7      	b.n	8006db0 <_free_r+0x28>
 8006e00:	d902      	bls.n	8006e08 <_free_r+0x80>
 8006e02:	230c      	movs	r3, #12
 8006e04:	6003      	str	r3, [r0, #0]
 8006e06:	e7d3      	b.n	8006db0 <_free_r+0x28>
 8006e08:	6825      	ldr	r5, [r4, #0]
 8006e0a:	1961      	adds	r1, r4, r5
 8006e0c:	428b      	cmp	r3, r1
 8006e0e:	bf04      	itt	eq
 8006e10:	6819      	ldreq	r1, [r3, #0]
 8006e12:	685b      	ldreq	r3, [r3, #4]
 8006e14:	6063      	str	r3, [r4, #4]
 8006e16:	bf04      	itt	eq
 8006e18:	1949      	addeq	r1, r1, r5
 8006e1a:	6021      	streq	r1, [r4, #0]
 8006e1c:	6054      	str	r4, [r2, #4]
 8006e1e:	e7c7      	b.n	8006db0 <_free_r+0x28>
 8006e20:	b003      	add	sp, #12
 8006e22:	bd30      	pop	{r4, r5, pc}
 8006e24:	200143cc 	.word	0x200143cc

08006e28 <_malloc_r>:
 8006e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e2a:	1ccd      	adds	r5, r1, #3
 8006e2c:	f025 0503 	bic.w	r5, r5, #3
 8006e30:	3508      	adds	r5, #8
 8006e32:	2d0c      	cmp	r5, #12
 8006e34:	bf38      	it	cc
 8006e36:	250c      	movcc	r5, #12
 8006e38:	2d00      	cmp	r5, #0
 8006e3a:	4606      	mov	r6, r0
 8006e3c:	db01      	blt.n	8006e42 <_malloc_r+0x1a>
 8006e3e:	42a9      	cmp	r1, r5
 8006e40:	d903      	bls.n	8006e4a <_malloc_r+0x22>
 8006e42:	230c      	movs	r3, #12
 8006e44:	6033      	str	r3, [r6, #0]
 8006e46:	2000      	movs	r0, #0
 8006e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e4a:	f000 f8df 	bl	800700c <__malloc_lock>
 8006e4e:	4921      	ldr	r1, [pc, #132]	; (8006ed4 <_malloc_r+0xac>)
 8006e50:	680a      	ldr	r2, [r1, #0]
 8006e52:	4614      	mov	r4, r2
 8006e54:	b99c      	cbnz	r4, 8006e7e <_malloc_r+0x56>
 8006e56:	4f20      	ldr	r7, [pc, #128]	; (8006ed8 <_malloc_r+0xb0>)
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	b923      	cbnz	r3, 8006e66 <_malloc_r+0x3e>
 8006e5c:	4621      	mov	r1, r4
 8006e5e:	4630      	mov	r0, r6
 8006e60:	f000 f83c 	bl	8006edc <_sbrk_r>
 8006e64:	6038      	str	r0, [r7, #0]
 8006e66:	4629      	mov	r1, r5
 8006e68:	4630      	mov	r0, r6
 8006e6a:	f000 f837 	bl	8006edc <_sbrk_r>
 8006e6e:	1c43      	adds	r3, r0, #1
 8006e70:	d123      	bne.n	8006eba <_malloc_r+0x92>
 8006e72:	230c      	movs	r3, #12
 8006e74:	6033      	str	r3, [r6, #0]
 8006e76:	4630      	mov	r0, r6
 8006e78:	f000 f8ce 	bl	8007018 <__malloc_unlock>
 8006e7c:	e7e3      	b.n	8006e46 <_malloc_r+0x1e>
 8006e7e:	6823      	ldr	r3, [r4, #0]
 8006e80:	1b5b      	subs	r3, r3, r5
 8006e82:	d417      	bmi.n	8006eb4 <_malloc_r+0x8c>
 8006e84:	2b0b      	cmp	r3, #11
 8006e86:	d903      	bls.n	8006e90 <_malloc_r+0x68>
 8006e88:	6023      	str	r3, [r4, #0]
 8006e8a:	441c      	add	r4, r3
 8006e8c:	6025      	str	r5, [r4, #0]
 8006e8e:	e004      	b.n	8006e9a <_malloc_r+0x72>
 8006e90:	6863      	ldr	r3, [r4, #4]
 8006e92:	42a2      	cmp	r2, r4
 8006e94:	bf0c      	ite	eq
 8006e96:	600b      	streq	r3, [r1, #0]
 8006e98:	6053      	strne	r3, [r2, #4]
 8006e9a:	4630      	mov	r0, r6
 8006e9c:	f000 f8bc 	bl	8007018 <__malloc_unlock>
 8006ea0:	f104 000b 	add.w	r0, r4, #11
 8006ea4:	1d23      	adds	r3, r4, #4
 8006ea6:	f020 0007 	bic.w	r0, r0, #7
 8006eaa:	1ac2      	subs	r2, r0, r3
 8006eac:	d0cc      	beq.n	8006e48 <_malloc_r+0x20>
 8006eae:	1a1b      	subs	r3, r3, r0
 8006eb0:	50a3      	str	r3, [r4, r2]
 8006eb2:	e7c9      	b.n	8006e48 <_malloc_r+0x20>
 8006eb4:	4622      	mov	r2, r4
 8006eb6:	6864      	ldr	r4, [r4, #4]
 8006eb8:	e7cc      	b.n	8006e54 <_malloc_r+0x2c>
 8006eba:	1cc4      	adds	r4, r0, #3
 8006ebc:	f024 0403 	bic.w	r4, r4, #3
 8006ec0:	42a0      	cmp	r0, r4
 8006ec2:	d0e3      	beq.n	8006e8c <_malloc_r+0x64>
 8006ec4:	1a21      	subs	r1, r4, r0
 8006ec6:	4630      	mov	r0, r6
 8006ec8:	f000 f808 	bl	8006edc <_sbrk_r>
 8006ecc:	3001      	adds	r0, #1
 8006ece:	d1dd      	bne.n	8006e8c <_malloc_r+0x64>
 8006ed0:	e7cf      	b.n	8006e72 <_malloc_r+0x4a>
 8006ed2:	bf00      	nop
 8006ed4:	200143cc 	.word	0x200143cc
 8006ed8:	200143d0 	.word	0x200143d0

08006edc <_sbrk_r>:
 8006edc:	b538      	push	{r3, r4, r5, lr}
 8006ede:	4d06      	ldr	r5, [pc, #24]	; (8006ef8 <_sbrk_r+0x1c>)
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	4604      	mov	r4, r0
 8006ee4:	4608      	mov	r0, r1
 8006ee6:	602b      	str	r3, [r5, #0]
 8006ee8:	f000 f8ae 	bl	8007048 <_sbrk>
 8006eec:	1c43      	adds	r3, r0, #1
 8006eee:	d102      	bne.n	8006ef6 <_sbrk_r+0x1a>
 8006ef0:	682b      	ldr	r3, [r5, #0]
 8006ef2:	b103      	cbz	r3, 8006ef6 <_sbrk_r+0x1a>
 8006ef4:	6023      	str	r3, [r4, #0]
 8006ef6:	bd38      	pop	{r3, r4, r5, pc}
 8006ef8:	20014518 	.word	0x20014518

08006efc <__sread>:
 8006efc:	b510      	push	{r4, lr}
 8006efe:	460c      	mov	r4, r1
 8006f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f04:	f000 f88e 	bl	8007024 <_read_r>
 8006f08:	2800      	cmp	r0, #0
 8006f0a:	bfab      	itete	ge
 8006f0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f0e:	89a3      	ldrhlt	r3, [r4, #12]
 8006f10:	181b      	addge	r3, r3, r0
 8006f12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f16:	bfac      	ite	ge
 8006f18:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f1a:	81a3      	strhlt	r3, [r4, #12]
 8006f1c:	bd10      	pop	{r4, pc}

08006f1e <__swrite>:
 8006f1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f22:	461f      	mov	r7, r3
 8006f24:	898b      	ldrh	r3, [r1, #12]
 8006f26:	05db      	lsls	r3, r3, #23
 8006f28:	4605      	mov	r5, r0
 8006f2a:	460c      	mov	r4, r1
 8006f2c:	4616      	mov	r6, r2
 8006f2e:	d505      	bpl.n	8006f3c <__swrite+0x1e>
 8006f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f34:	2302      	movs	r3, #2
 8006f36:	2200      	movs	r2, #0
 8006f38:	f000 f856 	bl	8006fe8 <_lseek_r>
 8006f3c:	89a3      	ldrh	r3, [r4, #12]
 8006f3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f46:	81a3      	strh	r3, [r4, #12]
 8006f48:	4632      	mov	r2, r6
 8006f4a:	463b      	mov	r3, r7
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f52:	f7ff bb6b 	b.w	800662c <_write_r>

08006f56 <__sseek>:
 8006f56:	b510      	push	{r4, lr}
 8006f58:	460c      	mov	r4, r1
 8006f5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f5e:	f000 f843 	bl	8006fe8 <_lseek_r>
 8006f62:	1c43      	adds	r3, r0, #1
 8006f64:	89a3      	ldrh	r3, [r4, #12]
 8006f66:	bf15      	itete	ne
 8006f68:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f72:	81a3      	strheq	r3, [r4, #12]
 8006f74:	bf18      	it	ne
 8006f76:	81a3      	strhne	r3, [r4, #12]
 8006f78:	bd10      	pop	{r4, pc}

08006f7a <__sclose>:
 8006f7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f7e:	f000 b801 	b.w	8006f84 <_close_r>
	...

08006f84 <_close_r>:
 8006f84:	b538      	push	{r3, r4, r5, lr}
 8006f86:	4d06      	ldr	r5, [pc, #24]	; (8006fa0 <_close_r+0x1c>)
 8006f88:	2300      	movs	r3, #0
 8006f8a:	4604      	mov	r4, r0
 8006f8c:	4608      	mov	r0, r1
 8006f8e:	602b      	str	r3, [r5, #0]
 8006f90:	f7f9 fe0b 	bl	8000baa <_close>
 8006f94:	1c43      	adds	r3, r0, #1
 8006f96:	d102      	bne.n	8006f9e <_close_r+0x1a>
 8006f98:	682b      	ldr	r3, [r5, #0]
 8006f9a:	b103      	cbz	r3, 8006f9e <_close_r+0x1a>
 8006f9c:	6023      	str	r3, [r4, #0]
 8006f9e:	bd38      	pop	{r3, r4, r5, pc}
 8006fa0:	20014518 	.word	0x20014518

08006fa4 <_fstat_r>:
 8006fa4:	b538      	push	{r3, r4, r5, lr}
 8006fa6:	4d07      	ldr	r5, [pc, #28]	; (8006fc4 <_fstat_r+0x20>)
 8006fa8:	2300      	movs	r3, #0
 8006faa:	4604      	mov	r4, r0
 8006fac:	4608      	mov	r0, r1
 8006fae:	4611      	mov	r1, r2
 8006fb0:	602b      	str	r3, [r5, #0]
 8006fb2:	f7f9 fe06 	bl	8000bc2 <_fstat>
 8006fb6:	1c43      	adds	r3, r0, #1
 8006fb8:	d102      	bne.n	8006fc0 <_fstat_r+0x1c>
 8006fba:	682b      	ldr	r3, [r5, #0]
 8006fbc:	b103      	cbz	r3, 8006fc0 <_fstat_r+0x1c>
 8006fbe:	6023      	str	r3, [r4, #0]
 8006fc0:	bd38      	pop	{r3, r4, r5, pc}
 8006fc2:	bf00      	nop
 8006fc4:	20014518 	.word	0x20014518

08006fc8 <_isatty_r>:
 8006fc8:	b538      	push	{r3, r4, r5, lr}
 8006fca:	4d06      	ldr	r5, [pc, #24]	; (8006fe4 <_isatty_r+0x1c>)
 8006fcc:	2300      	movs	r3, #0
 8006fce:	4604      	mov	r4, r0
 8006fd0:	4608      	mov	r0, r1
 8006fd2:	602b      	str	r3, [r5, #0]
 8006fd4:	f7f9 fe05 	bl	8000be2 <_isatty>
 8006fd8:	1c43      	adds	r3, r0, #1
 8006fda:	d102      	bne.n	8006fe2 <_isatty_r+0x1a>
 8006fdc:	682b      	ldr	r3, [r5, #0]
 8006fde:	b103      	cbz	r3, 8006fe2 <_isatty_r+0x1a>
 8006fe0:	6023      	str	r3, [r4, #0]
 8006fe2:	bd38      	pop	{r3, r4, r5, pc}
 8006fe4:	20014518 	.word	0x20014518

08006fe8 <_lseek_r>:
 8006fe8:	b538      	push	{r3, r4, r5, lr}
 8006fea:	4d07      	ldr	r5, [pc, #28]	; (8007008 <_lseek_r+0x20>)
 8006fec:	4604      	mov	r4, r0
 8006fee:	4608      	mov	r0, r1
 8006ff0:	4611      	mov	r1, r2
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	602a      	str	r2, [r5, #0]
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	f7f9 fdfe 	bl	8000bf8 <_lseek>
 8006ffc:	1c43      	adds	r3, r0, #1
 8006ffe:	d102      	bne.n	8007006 <_lseek_r+0x1e>
 8007000:	682b      	ldr	r3, [r5, #0]
 8007002:	b103      	cbz	r3, 8007006 <_lseek_r+0x1e>
 8007004:	6023      	str	r3, [r4, #0]
 8007006:	bd38      	pop	{r3, r4, r5, pc}
 8007008:	20014518 	.word	0x20014518

0800700c <__malloc_lock>:
 800700c:	4801      	ldr	r0, [pc, #4]	; (8007014 <__malloc_lock+0x8>)
 800700e:	f7ff be55 	b.w	8006cbc <__retarget_lock_acquire_recursive>
 8007012:	bf00      	nop
 8007014:	20014510 	.word	0x20014510

08007018 <__malloc_unlock>:
 8007018:	4801      	ldr	r0, [pc, #4]	; (8007020 <__malloc_unlock+0x8>)
 800701a:	f7ff be50 	b.w	8006cbe <__retarget_lock_release_recursive>
 800701e:	bf00      	nop
 8007020:	20014510 	.word	0x20014510

08007024 <_read_r>:
 8007024:	b538      	push	{r3, r4, r5, lr}
 8007026:	4d07      	ldr	r5, [pc, #28]	; (8007044 <_read_r+0x20>)
 8007028:	4604      	mov	r4, r0
 800702a:	4608      	mov	r0, r1
 800702c:	4611      	mov	r1, r2
 800702e:	2200      	movs	r2, #0
 8007030:	602a      	str	r2, [r5, #0]
 8007032:	461a      	mov	r2, r3
 8007034:	f7f9 fd9c 	bl	8000b70 <_read>
 8007038:	1c43      	adds	r3, r0, #1
 800703a:	d102      	bne.n	8007042 <_read_r+0x1e>
 800703c:	682b      	ldr	r3, [r5, #0]
 800703e:	b103      	cbz	r3, 8007042 <_read_r+0x1e>
 8007040:	6023      	str	r3, [r4, #0]
 8007042:	bd38      	pop	{r3, r4, r5, pc}
 8007044:	20014518 	.word	0x20014518

08007048 <_sbrk>:
 8007048:	4b04      	ldr	r3, [pc, #16]	; (800705c <_sbrk+0x14>)
 800704a:	6819      	ldr	r1, [r3, #0]
 800704c:	4602      	mov	r2, r0
 800704e:	b909      	cbnz	r1, 8007054 <_sbrk+0xc>
 8007050:	4903      	ldr	r1, [pc, #12]	; (8007060 <_sbrk+0x18>)
 8007052:	6019      	str	r1, [r3, #0]
 8007054:	6818      	ldr	r0, [r3, #0]
 8007056:	4402      	add	r2, r0
 8007058:	601a      	str	r2, [r3, #0]
 800705a:	4770      	bx	lr
 800705c:	200143d4 	.word	0x200143d4
 8007060:	20014520 	.word	0x20014520

08007064 <_init>:
 8007064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007066:	bf00      	nop
 8007068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800706a:	bc08      	pop	{r3}
 800706c:	469e      	mov	lr, r3
 800706e:	4770      	bx	lr

08007070 <_fini>:
 8007070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007072:	bf00      	nop
 8007074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007076:	bc08      	pop	{r3}
 8007078:	469e      	mov	lr, r3
 800707a:	4770      	bx	lr
